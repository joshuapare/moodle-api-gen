/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreContentbankRenameContent200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ToolDataprivacyApproveDataRequestRequest;
import org.openapitools.client.model.ToolDataprivacyBulkApproveDataRequestsRequest;
import org.openapitools.client.model.ToolDataprivacyBulkDenyDataRequestsRequest;
import org.openapitools.client.model.ToolDataprivacyCancelDataRequestRequest;
import org.openapitools.client.model.ToolDataprivacyConfirmContextsForDeletion200Response;
import org.openapitools.client.model.ToolDataprivacyConfirmContextsForDeletionRequest;
import org.openapitools.client.model.ToolDataprivacyContactDpoRequest;
import org.openapitools.client.model.ToolDataprivacyCreateCategoryForm200Response;
import org.openapitools.client.model.ToolDataprivacyCreateCategoryFormRequest;
import org.openapitools.client.model.ToolDataprivacyCreatePurposeForm200Response;
import org.openapitools.client.model.ToolDataprivacyCreatePurposeFormRequest;
import org.openapitools.client.model.ToolDataprivacyDeleteCategoryRequest;
import org.openapitools.client.model.ToolDataprivacyDeletePurposeRequest;
import org.openapitools.client.model.ToolDataprivacyGetActivityOptions200Response;
import org.openapitools.client.model.ToolDataprivacyGetActivityOptionsRequest;
import org.openapitools.client.model.ToolDataprivacyGetCategoryOptions200Response;
import org.openapitools.client.model.ToolDataprivacyGetCategoryOptionsRequest;
import org.openapitools.client.model.ToolDataprivacyGetDataRequest200Response;
import org.openapitools.client.model.ToolDataprivacyGetPurposeOptions200Response;
import org.openapitools.client.model.ToolDataprivacyGetUsersRequest;
import org.openapitools.client.model.ToolDataprivacySetContextDefaults200Response;
import org.openapitools.client.model.ToolDataprivacySetContextDefaultsRequest;
import org.openapitools.client.model.ToolDataprivacySetContextForm200Response;
import org.openapitools.client.model.ToolDataprivacySetContextFormRequest;
import org.openapitools.client.model.ToolDataprivacySetContextlevelForm200Response;
import org.openapitools.client.model.ToolDataprivacySetContextlevelFormRequest;
import org.openapitools.client.model.ToolDataprivacySubmitSelectedCoursesFormRequest;
import org.openapitools.client.model.ToolDataprivacyTreeExtraBranches200Response;
import org.openapitools.client.model.ToolDataprivacyTreeExtraBranchesRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ToolDataprivacyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ToolDataprivacyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ToolDataprivacyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for toolDataprivacyApproveDataRequest
     * @param toolDataprivacyApproveDataRequestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyApproveDataRequestCall(ToolDataprivacyApproveDataRequestRequest toolDataprivacyApproveDataRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyApproveDataRequestRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_approve_data_request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyApproveDataRequestValidateBeforeCall(ToolDataprivacyApproveDataRequestRequest toolDataprivacyApproveDataRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyApproveDataRequestRequest' is set
        if (toolDataprivacyApproveDataRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyApproveDataRequestRequest' when calling toolDataprivacyApproveDataRequest(Async)");
        }

        return toolDataprivacyApproveDataRequestCall(toolDataprivacyApproveDataRequestRequest, _callback);

    }

    /**
     * Approve a data request
     * Approve a data request
     * @param toolDataprivacyApproveDataRequestRequest  (required)
     * @return CoreContentbankRenameContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreContentbankRenameContent200Response toolDataprivacyApproveDataRequest(ToolDataprivacyApproveDataRequestRequest toolDataprivacyApproveDataRequestRequest) throws ApiException {
        ApiResponse<CoreContentbankRenameContent200Response> localVarResp = toolDataprivacyApproveDataRequestWithHttpInfo(toolDataprivacyApproveDataRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Approve a data request
     * Approve a data request
     * @param toolDataprivacyApproveDataRequestRequest  (required)
     * @return ApiResponse&lt;CoreContentbankRenameContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreContentbankRenameContent200Response> toolDataprivacyApproveDataRequestWithHttpInfo(ToolDataprivacyApproveDataRequestRequest toolDataprivacyApproveDataRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyApproveDataRequestValidateBeforeCall(toolDataprivacyApproveDataRequestRequest, null);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Approve a data request (asynchronously)
     * Approve a data request
     * @param toolDataprivacyApproveDataRequestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyApproveDataRequestAsync(ToolDataprivacyApproveDataRequestRequest toolDataprivacyApproveDataRequestRequest, final ApiCallback<CoreContentbankRenameContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyApproveDataRequestValidateBeforeCall(toolDataprivacyApproveDataRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyBulkApproveDataRequests
     * @param toolDataprivacyBulkApproveDataRequestsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyBulkApproveDataRequestsCall(ToolDataprivacyBulkApproveDataRequestsRequest toolDataprivacyBulkApproveDataRequestsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyBulkApproveDataRequestsRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_bulk_approve_data_requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyBulkApproveDataRequestsValidateBeforeCall(ToolDataprivacyBulkApproveDataRequestsRequest toolDataprivacyBulkApproveDataRequestsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyBulkApproveDataRequestsRequest' is set
        if (toolDataprivacyBulkApproveDataRequestsRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyBulkApproveDataRequestsRequest' when calling toolDataprivacyBulkApproveDataRequests(Async)");
        }

        return toolDataprivacyBulkApproveDataRequestsCall(toolDataprivacyBulkApproveDataRequestsRequest, _callback);

    }

    /**
     * Bulk approve data requests
     * Bulk approve data requests
     * @param toolDataprivacyBulkApproveDataRequestsRequest  (required)
     * @return CoreContentbankRenameContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreContentbankRenameContent200Response toolDataprivacyBulkApproveDataRequests(ToolDataprivacyBulkApproveDataRequestsRequest toolDataprivacyBulkApproveDataRequestsRequest) throws ApiException {
        ApiResponse<CoreContentbankRenameContent200Response> localVarResp = toolDataprivacyBulkApproveDataRequestsWithHttpInfo(toolDataprivacyBulkApproveDataRequestsRequest);
        return localVarResp.getData();
    }

    /**
     * Bulk approve data requests
     * Bulk approve data requests
     * @param toolDataprivacyBulkApproveDataRequestsRequest  (required)
     * @return ApiResponse&lt;CoreContentbankRenameContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreContentbankRenameContent200Response> toolDataprivacyBulkApproveDataRequestsWithHttpInfo(ToolDataprivacyBulkApproveDataRequestsRequest toolDataprivacyBulkApproveDataRequestsRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyBulkApproveDataRequestsValidateBeforeCall(toolDataprivacyBulkApproveDataRequestsRequest, null);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk approve data requests (asynchronously)
     * Bulk approve data requests
     * @param toolDataprivacyBulkApproveDataRequestsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyBulkApproveDataRequestsAsync(ToolDataprivacyBulkApproveDataRequestsRequest toolDataprivacyBulkApproveDataRequestsRequest, final ApiCallback<CoreContentbankRenameContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyBulkApproveDataRequestsValidateBeforeCall(toolDataprivacyBulkApproveDataRequestsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyBulkDenyDataRequests
     * @param toolDataprivacyBulkDenyDataRequestsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyBulkDenyDataRequestsCall(ToolDataprivacyBulkDenyDataRequestsRequest toolDataprivacyBulkDenyDataRequestsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyBulkDenyDataRequestsRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_bulk_deny_data_requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyBulkDenyDataRequestsValidateBeforeCall(ToolDataprivacyBulkDenyDataRequestsRequest toolDataprivacyBulkDenyDataRequestsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyBulkDenyDataRequestsRequest' is set
        if (toolDataprivacyBulkDenyDataRequestsRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyBulkDenyDataRequestsRequest' when calling toolDataprivacyBulkDenyDataRequests(Async)");
        }

        return toolDataprivacyBulkDenyDataRequestsCall(toolDataprivacyBulkDenyDataRequestsRequest, _callback);

    }

    /**
     * Bulk deny data requests
     * Bulk deny data requests
     * @param toolDataprivacyBulkDenyDataRequestsRequest  (required)
     * @return CoreContentbankRenameContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreContentbankRenameContent200Response toolDataprivacyBulkDenyDataRequests(ToolDataprivacyBulkDenyDataRequestsRequest toolDataprivacyBulkDenyDataRequestsRequest) throws ApiException {
        ApiResponse<CoreContentbankRenameContent200Response> localVarResp = toolDataprivacyBulkDenyDataRequestsWithHttpInfo(toolDataprivacyBulkDenyDataRequestsRequest);
        return localVarResp.getData();
    }

    /**
     * Bulk deny data requests
     * Bulk deny data requests
     * @param toolDataprivacyBulkDenyDataRequestsRequest  (required)
     * @return ApiResponse&lt;CoreContentbankRenameContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreContentbankRenameContent200Response> toolDataprivacyBulkDenyDataRequestsWithHttpInfo(ToolDataprivacyBulkDenyDataRequestsRequest toolDataprivacyBulkDenyDataRequestsRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyBulkDenyDataRequestsValidateBeforeCall(toolDataprivacyBulkDenyDataRequestsRequest, null);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk deny data requests (asynchronously)
     * Bulk deny data requests
     * @param toolDataprivacyBulkDenyDataRequestsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyBulkDenyDataRequestsAsync(ToolDataprivacyBulkDenyDataRequestsRequest toolDataprivacyBulkDenyDataRequestsRequest, final ApiCallback<CoreContentbankRenameContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyBulkDenyDataRequestsValidateBeforeCall(toolDataprivacyBulkDenyDataRequestsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyCancelDataRequest
     * @param toolDataprivacyCancelDataRequestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyCancelDataRequestCall(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyCancelDataRequestRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_cancel_data_request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyCancelDataRequestValidateBeforeCall(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyCancelDataRequestRequest' is set
        if (toolDataprivacyCancelDataRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyCancelDataRequestRequest' when calling toolDataprivacyCancelDataRequest(Async)");
        }

        return toolDataprivacyCancelDataRequestCall(toolDataprivacyCancelDataRequestRequest, _callback);

    }

    /**
     * Cancel the data request made by the user
     * Cancel the data request made by the user
     * @param toolDataprivacyCancelDataRequestRequest  (required)
     * @return CoreContentbankRenameContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreContentbankRenameContent200Response toolDataprivacyCancelDataRequest(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest) throws ApiException {
        ApiResponse<CoreContentbankRenameContent200Response> localVarResp = toolDataprivacyCancelDataRequestWithHttpInfo(toolDataprivacyCancelDataRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Cancel the data request made by the user
     * Cancel the data request made by the user
     * @param toolDataprivacyCancelDataRequestRequest  (required)
     * @return ApiResponse&lt;CoreContentbankRenameContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreContentbankRenameContent200Response> toolDataprivacyCancelDataRequestWithHttpInfo(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyCancelDataRequestValidateBeforeCall(toolDataprivacyCancelDataRequestRequest, null);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel the data request made by the user (asynchronously)
     * Cancel the data request made by the user
     * @param toolDataprivacyCancelDataRequestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyCancelDataRequestAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, final ApiCallback<CoreContentbankRenameContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyCancelDataRequestValidateBeforeCall(toolDataprivacyCancelDataRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyConfirmContextsForDeletion
     * @param toolDataprivacyConfirmContextsForDeletionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyConfirmContextsForDeletionCall(ToolDataprivacyConfirmContextsForDeletionRequest toolDataprivacyConfirmContextsForDeletionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyConfirmContextsForDeletionRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_confirm_contexts_for_deletion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyConfirmContextsForDeletionValidateBeforeCall(ToolDataprivacyConfirmContextsForDeletionRequest toolDataprivacyConfirmContextsForDeletionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyConfirmContextsForDeletionRequest' is set
        if (toolDataprivacyConfirmContextsForDeletionRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyConfirmContextsForDeletionRequest' when calling toolDataprivacyConfirmContextsForDeletion(Async)");
        }

        return toolDataprivacyConfirmContextsForDeletionCall(toolDataprivacyConfirmContextsForDeletionRequest, _callback);

    }

    /**
     * Mark the selected expired contexts as confirmed for deletion
     * Mark the selected expired contexts as confirmed for deletion
     * @param toolDataprivacyConfirmContextsForDeletionRequest  (required)
     * @return ToolDataprivacyConfirmContextsForDeletion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolDataprivacyConfirmContextsForDeletion200Response toolDataprivacyConfirmContextsForDeletion(ToolDataprivacyConfirmContextsForDeletionRequest toolDataprivacyConfirmContextsForDeletionRequest) throws ApiException {
        ApiResponse<ToolDataprivacyConfirmContextsForDeletion200Response> localVarResp = toolDataprivacyConfirmContextsForDeletionWithHttpInfo(toolDataprivacyConfirmContextsForDeletionRequest);
        return localVarResp.getData();
    }

    /**
     * Mark the selected expired contexts as confirmed for deletion
     * Mark the selected expired contexts as confirmed for deletion
     * @param toolDataprivacyConfirmContextsForDeletionRequest  (required)
     * @return ApiResponse&lt;ToolDataprivacyConfirmContextsForDeletion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolDataprivacyConfirmContextsForDeletion200Response> toolDataprivacyConfirmContextsForDeletionWithHttpInfo(ToolDataprivacyConfirmContextsForDeletionRequest toolDataprivacyConfirmContextsForDeletionRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyConfirmContextsForDeletionValidateBeforeCall(toolDataprivacyConfirmContextsForDeletionRequest, null);
        Type localVarReturnType = new TypeToken<ToolDataprivacyConfirmContextsForDeletion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark the selected expired contexts as confirmed for deletion (asynchronously)
     * Mark the selected expired contexts as confirmed for deletion
     * @param toolDataprivacyConfirmContextsForDeletionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyConfirmContextsForDeletionAsync(ToolDataprivacyConfirmContextsForDeletionRequest toolDataprivacyConfirmContextsForDeletionRequest, final ApiCallback<ToolDataprivacyConfirmContextsForDeletion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyConfirmContextsForDeletionValidateBeforeCall(toolDataprivacyConfirmContextsForDeletionRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolDataprivacyConfirmContextsForDeletion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyContactDpo
     * @param toolDataprivacyContactDpoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyContactDpoCall(ToolDataprivacyContactDpoRequest toolDataprivacyContactDpoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyContactDpoRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_contact_dpo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyContactDpoValidateBeforeCall(ToolDataprivacyContactDpoRequest toolDataprivacyContactDpoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyContactDpoRequest' is set
        if (toolDataprivacyContactDpoRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyContactDpoRequest' when calling toolDataprivacyContactDpo(Async)");
        }

        return toolDataprivacyContactDpoCall(toolDataprivacyContactDpoRequest, _callback);

    }

    /**
     * Contact the site Data Protection Officer(s)
     * Contact the site Data Protection Officer(s)
     * @param toolDataprivacyContactDpoRequest  (required)
     * @return CoreContentbankRenameContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreContentbankRenameContent200Response toolDataprivacyContactDpo(ToolDataprivacyContactDpoRequest toolDataprivacyContactDpoRequest) throws ApiException {
        ApiResponse<CoreContentbankRenameContent200Response> localVarResp = toolDataprivacyContactDpoWithHttpInfo(toolDataprivacyContactDpoRequest);
        return localVarResp.getData();
    }

    /**
     * Contact the site Data Protection Officer(s)
     * Contact the site Data Protection Officer(s)
     * @param toolDataprivacyContactDpoRequest  (required)
     * @return ApiResponse&lt;CoreContentbankRenameContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreContentbankRenameContent200Response> toolDataprivacyContactDpoWithHttpInfo(ToolDataprivacyContactDpoRequest toolDataprivacyContactDpoRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyContactDpoValidateBeforeCall(toolDataprivacyContactDpoRequest, null);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Contact the site Data Protection Officer(s) (asynchronously)
     * Contact the site Data Protection Officer(s)
     * @param toolDataprivacyContactDpoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyContactDpoAsync(ToolDataprivacyContactDpoRequest toolDataprivacyContactDpoRequest, final ApiCallback<CoreContentbankRenameContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyContactDpoValidateBeforeCall(toolDataprivacyContactDpoRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyCreateCategoryForm
     * @param toolDataprivacyCreateCategoryFormRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyCreateCategoryFormCall(ToolDataprivacyCreateCategoryFormRequest toolDataprivacyCreateCategoryFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyCreateCategoryFormRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_create_category_form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyCreateCategoryFormValidateBeforeCall(ToolDataprivacyCreateCategoryFormRequest toolDataprivacyCreateCategoryFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyCreateCategoryFormRequest' is set
        if (toolDataprivacyCreateCategoryFormRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyCreateCategoryFormRequest' when calling toolDataprivacyCreateCategoryForm(Async)");
        }

        return toolDataprivacyCreateCategoryFormCall(toolDataprivacyCreateCategoryFormRequest, _callback);

    }

    /**
     * Adds a data category
     * Adds a data category
     * @param toolDataprivacyCreateCategoryFormRequest  (required)
     * @return ToolDataprivacyCreateCategoryForm200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolDataprivacyCreateCategoryForm200Response toolDataprivacyCreateCategoryForm(ToolDataprivacyCreateCategoryFormRequest toolDataprivacyCreateCategoryFormRequest) throws ApiException {
        ApiResponse<ToolDataprivacyCreateCategoryForm200Response> localVarResp = toolDataprivacyCreateCategoryFormWithHttpInfo(toolDataprivacyCreateCategoryFormRequest);
        return localVarResp.getData();
    }

    /**
     * Adds a data category
     * Adds a data category
     * @param toolDataprivacyCreateCategoryFormRequest  (required)
     * @return ApiResponse&lt;ToolDataprivacyCreateCategoryForm200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolDataprivacyCreateCategoryForm200Response> toolDataprivacyCreateCategoryFormWithHttpInfo(ToolDataprivacyCreateCategoryFormRequest toolDataprivacyCreateCategoryFormRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyCreateCategoryFormValidateBeforeCall(toolDataprivacyCreateCategoryFormRequest, null);
        Type localVarReturnType = new TypeToken<ToolDataprivacyCreateCategoryForm200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a data category (asynchronously)
     * Adds a data category
     * @param toolDataprivacyCreateCategoryFormRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyCreateCategoryFormAsync(ToolDataprivacyCreateCategoryFormRequest toolDataprivacyCreateCategoryFormRequest, final ApiCallback<ToolDataprivacyCreateCategoryForm200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyCreateCategoryFormValidateBeforeCall(toolDataprivacyCreateCategoryFormRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolDataprivacyCreateCategoryForm200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyCreatePurposeForm
     * @param toolDataprivacyCreatePurposeFormRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyCreatePurposeFormCall(ToolDataprivacyCreatePurposeFormRequest toolDataprivacyCreatePurposeFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyCreatePurposeFormRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_create_purpose_form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyCreatePurposeFormValidateBeforeCall(ToolDataprivacyCreatePurposeFormRequest toolDataprivacyCreatePurposeFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyCreatePurposeFormRequest' is set
        if (toolDataprivacyCreatePurposeFormRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyCreatePurposeFormRequest' when calling toolDataprivacyCreatePurposeForm(Async)");
        }

        return toolDataprivacyCreatePurposeFormCall(toolDataprivacyCreatePurposeFormRequest, _callback);

    }

    /**
     * Adds a data purpose
     * Adds a data purpose
     * @param toolDataprivacyCreatePurposeFormRequest  (required)
     * @return ToolDataprivacyCreatePurposeForm200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolDataprivacyCreatePurposeForm200Response toolDataprivacyCreatePurposeForm(ToolDataprivacyCreatePurposeFormRequest toolDataprivacyCreatePurposeFormRequest) throws ApiException {
        ApiResponse<ToolDataprivacyCreatePurposeForm200Response> localVarResp = toolDataprivacyCreatePurposeFormWithHttpInfo(toolDataprivacyCreatePurposeFormRequest);
        return localVarResp.getData();
    }

    /**
     * Adds a data purpose
     * Adds a data purpose
     * @param toolDataprivacyCreatePurposeFormRequest  (required)
     * @return ApiResponse&lt;ToolDataprivacyCreatePurposeForm200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolDataprivacyCreatePurposeForm200Response> toolDataprivacyCreatePurposeFormWithHttpInfo(ToolDataprivacyCreatePurposeFormRequest toolDataprivacyCreatePurposeFormRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyCreatePurposeFormValidateBeforeCall(toolDataprivacyCreatePurposeFormRequest, null);
        Type localVarReturnType = new TypeToken<ToolDataprivacyCreatePurposeForm200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a data purpose (asynchronously)
     * Adds a data purpose
     * @param toolDataprivacyCreatePurposeFormRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyCreatePurposeFormAsync(ToolDataprivacyCreatePurposeFormRequest toolDataprivacyCreatePurposeFormRequest, final ApiCallback<ToolDataprivacyCreatePurposeForm200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyCreatePurposeFormValidateBeforeCall(toolDataprivacyCreatePurposeFormRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolDataprivacyCreatePurposeForm200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyDeleteCategory
     * @param toolDataprivacyDeleteCategoryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyDeleteCategoryCall(ToolDataprivacyDeleteCategoryRequest toolDataprivacyDeleteCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyDeleteCategoryRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_delete_category";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyDeleteCategoryValidateBeforeCall(ToolDataprivacyDeleteCategoryRequest toolDataprivacyDeleteCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyDeleteCategoryRequest' is set
        if (toolDataprivacyDeleteCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyDeleteCategoryRequest' when calling toolDataprivacyDeleteCategory(Async)");
        }

        return toolDataprivacyDeleteCategoryCall(toolDataprivacyDeleteCategoryRequest, _callback);

    }

    /**
     * Deletes an existing data category
     * Deletes an existing data category
     * @param toolDataprivacyDeleteCategoryRequest  (required)
     * @return CoreContentbankRenameContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreContentbankRenameContent200Response toolDataprivacyDeleteCategory(ToolDataprivacyDeleteCategoryRequest toolDataprivacyDeleteCategoryRequest) throws ApiException {
        ApiResponse<CoreContentbankRenameContent200Response> localVarResp = toolDataprivacyDeleteCategoryWithHttpInfo(toolDataprivacyDeleteCategoryRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes an existing data category
     * Deletes an existing data category
     * @param toolDataprivacyDeleteCategoryRequest  (required)
     * @return ApiResponse&lt;CoreContentbankRenameContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreContentbankRenameContent200Response> toolDataprivacyDeleteCategoryWithHttpInfo(ToolDataprivacyDeleteCategoryRequest toolDataprivacyDeleteCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyDeleteCategoryValidateBeforeCall(toolDataprivacyDeleteCategoryRequest, null);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes an existing data category (asynchronously)
     * Deletes an existing data category
     * @param toolDataprivacyDeleteCategoryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyDeleteCategoryAsync(ToolDataprivacyDeleteCategoryRequest toolDataprivacyDeleteCategoryRequest, final ApiCallback<CoreContentbankRenameContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyDeleteCategoryValidateBeforeCall(toolDataprivacyDeleteCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyDeletePurpose
     * @param toolDataprivacyDeletePurposeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyDeletePurposeCall(ToolDataprivacyDeletePurposeRequest toolDataprivacyDeletePurposeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyDeletePurposeRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_delete_purpose";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyDeletePurposeValidateBeforeCall(ToolDataprivacyDeletePurposeRequest toolDataprivacyDeletePurposeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyDeletePurposeRequest' is set
        if (toolDataprivacyDeletePurposeRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyDeletePurposeRequest' when calling toolDataprivacyDeletePurpose(Async)");
        }

        return toolDataprivacyDeletePurposeCall(toolDataprivacyDeletePurposeRequest, _callback);

    }

    /**
     * Deletes an existing data purpose
     * Deletes an existing data purpose
     * @param toolDataprivacyDeletePurposeRequest  (required)
     * @return CoreContentbankRenameContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreContentbankRenameContent200Response toolDataprivacyDeletePurpose(ToolDataprivacyDeletePurposeRequest toolDataprivacyDeletePurposeRequest) throws ApiException {
        ApiResponse<CoreContentbankRenameContent200Response> localVarResp = toolDataprivacyDeletePurposeWithHttpInfo(toolDataprivacyDeletePurposeRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes an existing data purpose
     * Deletes an existing data purpose
     * @param toolDataprivacyDeletePurposeRequest  (required)
     * @return ApiResponse&lt;CoreContentbankRenameContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreContentbankRenameContent200Response> toolDataprivacyDeletePurposeWithHttpInfo(ToolDataprivacyDeletePurposeRequest toolDataprivacyDeletePurposeRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyDeletePurposeValidateBeforeCall(toolDataprivacyDeletePurposeRequest, null);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes an existing data purpose (asynchronously)
     * Deletes an existing data purpose
     * @param toolDataprivacyDeletePurposeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyDeletePurposeAsync(ToolDataprivacyDeletePurposeRequest toolDataprivacyDeletePurposeRequest, final ApiCallback<CoreContentbankRenameContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyDeletePurposeValidateBeforeCall(toolDataprivacyDeletePurposeRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyDenyDataRequest
     * @param toolDataprivacyCancelDataRequestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyDenyDataRequestCall(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyCancelDataRequestRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_deny_data_request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyDenyDataRequestValidateBeforeCall(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyCancelDataRequestRequest' is set
        if (toolDataprivacyCancelDataRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyCancelDataRequestRequest' when calling toolDataprivacyDenyDataRequest(Async)");
        }

        return toolDataprivacyDenyDataRequestCall(toolDataprivacyCancelDataRequestRequest, _callback);

    }

    /**
     * Deny a data request
     * Deny a data request
     * @param toolDataprivacyCancelDataRequestRequest  (required)
     * @return CoreContentbankRenameContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreContentbankRenameContent200Response toolDataprivacyDenyDataRequest(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest) throws ApiException {
        ApiResponse<CoreContentbankRenameContent200Response> localVarResp = toolDataprivacyDenyDataRequestWithHttpInfo(toolDataprivacyCancelDataRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Deny a data request
     * Deny a data request
     * @param toolDataprivacyCancelDataRequestRequest  (required)
     * @return ApiResponse&lt;CoreContentbankRenameContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreContentbankRenameContent200Response> toolDataprivacyDenyDataRequestWithHttpInfo(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyDenyDataRequestValidateBeforeCall(toolDataprivacyCancelDataRequestRequest, null);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deny a data request (asynchronously)
     * Deny a data request
     * @param toolDataprivacyCancelDataRequestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyDenyDataRequestAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, final ApiCallback<CoreContentbankRenameContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyDenyDataRequestValidateBeforeCall(toolDataprivacyCancelDataRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyGetActivityOptions
     * @param toolDataprivacyGetActivityOptionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyGetActivityOptionsCall(ToolDataprivacyGetActivityOptionsRequest toolDataprivacyGetActivityOptionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyGetActivityOptionsRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_get_activity_options";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyGetActivityOptionsValidateBeforeCall(ToolDataprivacyGetActivityOptionsRequest toolDataprivacyGetActivityOptionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyGetActivityOptionsRequest' is set
        if (toolDataprivacyGetActivityOptionsRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyGetActivityOptionsRequest' when calling toolDataprivacyGetActivityOptions(Async)");
        }

        return toolDataprivacyGetActivityOptionsCall(toolDataprivacyGetActivityOptionsRequest, _callback);

    }

    /**
     * Fetches a list of activity options
     * Fetches a list of activity options
     * @param toolDataprivacyGetActivityOptionsRequest  (required)
     * @return ToolDataprivacyGetActivityOptions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolDataprivacyGetActivityOptions200Response toolDataprivacyGetActivityOptions(ToolDataprivacyGetActivityOptionsRequest toolDataprivacyGetActivityOptionsRequest) throws ApiException {
        ApiResponse<ToolDataprivacyGetActivityOptions200Response> localVarResp = toolDataprivacyGetActivityOptionsWithHttpInfo(toolDataprivacyGetActivityOptionsRequest);
        return localVarResp.getData();
    }

    /**
     * Fetches a list of activity options
     * Fetches a list of activity options
     * @param toolDataprivacyGetActivityOptionsRequest  (required)
     * @return ApiResponse&lt;ToolDataprivacyGetActivityOptions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolDataprivacyGetActivityOptions200Response> toolDataprivacyGetActivityOptionsWithHttpInfo(ToolDataprivacyGetActivityOptionsRequest toolDataprivacyGetActivityOptionsRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyGetActivityOptionsValidateBeforeCall(toolDataprivacyGetActivityOptionsRequest, null);
        Type localVarReturnType = new TypeToken<ToolDataprivacyGetActivityOptions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetches a list of activity options (asynchronously)
     * Fetches a list of activity options
     * @param toolDataprivacyGetActivityOptionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyGetActivityOptionsAsync(ToolDataprivacyGetActivityOptionsRequest toolDataprivacyGetActivityOptionsRequest, final ApiCallback<ToolDataprivacyGetActivityOptions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyGetActivityOptionsValidateBeforeCall(toolDataprivacyGetActivityOptionsRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolDataprivacyGetActivityOptions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyGetCategoryOptions
     * @param toolDataprivacyGetCategoryOptionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyGetCategoryOptionsCall(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyGetCategoryOptionsRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_get_category_options";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyGetCategoryOptionsValidateBeforeCall(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyGetCategoryOptionsRequest' is set
        if (toolDataprivacyGetCategoryOptionsRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyGetCategoryOptionsRequest' when calling toolDataprivacyGetCategoryOptions(Async)");
        }

        return toolDataprivacyGetCategoryOptionsCall(toolDataprivacyGetCategoryOptionsRequest, _callback);

    }

    /**
     * Fetches a list of data category options
     * Fetches a list of data category options
     * @param toolDataprivacyGetCategoryOptionsRequest  (required)
     * @return ToolDataprivacyGetCategoryOptions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolDataprivacyGetCategoryOptions200Response toolDataprivacyGetCategoryOptions(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest) throws ApiException {
        ApiResponse<ToolDataprivacyGetCategoryOptions200Response> localVarResp = toolDataprivacyGetCategoryOptionsWithHttpInfo(toolDataprivacyGetCategoryOptionsRequest);
        return localVarResp.getData();
    }

    /**
     * Fetches a list of data category options
     * Fetches a list of data category options
     * @param toolDataprivacyGetCategoryOptionsRequest  (required)
     * @return ApiResponse&lt;ToolDataprivacyGetCategoryOptions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolDataprivacyGetCategoryOptions200Response> toolDataprivacyGetCategoryOptionsWithHttpInfo(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyGetCategoryOptionsValidateBeforeCall(toolDataprivacyGetCategoryOptionsRequest, null);
        Type localVarReturnType = new TypeToken<ToolDataprivacyGetCategoryOptions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetches a list of data category options (asynchronously)
     * Fetches a list of data category options
     * @param toolDataprivacyGetCategoryOptionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyGetCategoryOptionsAsync(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, final ApiCallback<ToolDataprivacyGetCategoryOptions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyGetCategoryOptionsValidateBeforeCall(toolDataprivacyGetCategoryOptionsRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolDataprivacyGetCategoryOptions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyGetDataRequest
     * @param toolDataprivacyCancelDataRequestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyGetDataRequestCall(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyCancelDataRequestRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_get_data_request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyGetDataRequestValidateBeforeCall(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyCancelDataRequestRequest' is set
        if (toolDataprivacyCancelDataRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyCancelDataRequestRequest' when calling toolDataprivacyGetDataRequest(Async)");
        }

        return toolDataprivacyGetDataRequestCall(toolDataprivacyCancelDataRequestRequest, _callback);

    }

    /**
     * Fetch the details of a user&#39;s data request
     * Fetch the details of a user&#39;s data request
     * @param toolDataprivacyCancelDataRequestRequest  (required)
     * @return ToolDataprivacyGetDataRequest200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolDataprivacyGetDataRequest200Response toolDataprivacyGetDataRequest(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest) throws ApiException {
        ApiResponse<ToolDataprivacyGetDataRequest200Response> localVarResp = toolDataprivacyGetDataRequestWithHttpInfo(toolDataprivacyCancelDataRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch the details of a user&#39;s data request
     * Fetch the details of a user&#39;s data request
     * @param toolDataprivacyCancelDataRequestRequest  (required)
     * @return ApiResponse&lt;ToolDataprivacyGetDataRequest200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolDataprivacyGetDataRequest200Response> toolDataprivacyGetDataRequestWithHttpInfo(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyGetDataRequestValidateBeforeCall(toolDataprivacyCancelDataRequestRequest, null);
        Type localVarReturnType = new TypeToken<ToolDataprivacyGetDataRequest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the details of a user&#39;s data request (asynchronously)
     * Fetch the details of a user&#39;s data request
     * @param toolDataprivacyCancelDataRequestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyGetDataRequestAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, final ApiCallback<ToolDataprivacyGetDataRequest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyGetDataRequestValidateBeforeCall(toolDataprivacyCancelDataRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolDataprivacyGetDataRequest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyGetPurposeOptions
     * @param toolDataprivacyGetCategoryOptionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyGetPurposeOptionsCall(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyGetCategoryOptionsRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_get_purpose_options";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyGetPurposeOptionsValidateBeforeCall(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyGetCategoryOptionsRequest' is set
        if (toolDataprivacyGetCategoryOptionsRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyGetCategoryOptionsRequest' when calling toolDataprivacyGetPurposeOptions(Async)");
        }

        return toolDataprivacyGetPurposeOptionsCall(toolDataprivacyGetCategoryOptionsRequest, _callback);

    }

    /**
     * Fetches a list of data storage purpose options
     * Fetches a list of data storage purpose options
     * @param toolDataprivacyGetCategoryOptionsRequest  (required)
     * @return ToolDataprivacyGetPurposeOptions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolDataprivacyGetPurposeOptions200Response toolDataprivacyGetPurposeOptions(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest) throws ApiException {
        ApiResponse<ToolDataprivacyGetPurposeOptions200Response> localVarResp = toolDataprivacyGetPurposeOptionsWithHttpInfo(toolDataprivacyGetCategoryOptionsRequest);
        return localVarResp.getData();
    }

    /**
     * Fetches a list of data storage purpose options
     * Fetches a list of data storage purpose options
     * @param toolDataprivacyGetCategoryOptionsRequest  (required)
     * @return ApiResponse&lt;ToolDataprivacyGetPurposeOptions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolDataprivacyGetPurposeOptions200Response> toolDataprivacyGetPurposeOptionsWithHttpInfo(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyGetPurposeOptionsValidateBeforeCall(toolDataprivacyGetCategoryOptionsRequest, null);
        Type localVarReturnType = new TypeToken<ToolDataprivacyGetPurposeOptions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetches a list of data storage purpose options (asynchronously)
     * Fetches a list of data storage purpose options
     * @param toolDataprivacyGetCategoryOptionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyGetPurposeOptionsAsync(ToolDataprivacyGetCategoryOptionsRequest toolDataprivacyGetCategoryOptionsRequest, final ApiCallback<ToolDataprivacyGetPurposeOptions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyGetPurposeOptionsValidateBeforeCall(toolDataprivacyGetCategoryOptionsRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolDataprivacyGetPurposeOptions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyGetUsers
     * @param toolDataprivacyGetUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyGetUsersCall(ToolDataprivacyGetUsersRequest toolDataprivacyGetUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyGetUsersRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_get_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyGetUsersValidateBeforeCall(ToolDataprivacyGetUsersRequest toolDataprivacyGetUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyGetUsersRequest' is set
        if (toolDataprivacyGetUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyGetUsersRequest' when calling toolDataprivacyGetUsers(Async)");
        }

        return toolDataprivacyGetUsersCall(toolDataprivacyGetUsersRequest, _callback);

    }

    /**
     * Fetches a list of users
     * Fetches a list of users
     * @param toolDataprivacyGetUsersRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object toolDataprivacyGetUsers(ToolDataprivacyGetUsersRequest toolDataprivacyGetUsersRequest) throws ApiException {
        ApiResponse<Object> localVarResp = toolDataprivacyGetUsersWithHttpInfo(toolDataprivacyGetUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Fetches a list of users
     * Fetches a list of users
     * @param toolDataprivacyGetUsersRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> toolDataprivacyGetUsersWithHttpInfo(ToolDataprivacyGetUsersRequest toolDataprivacyGetUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyGetUsersValidateBeforeCall(toolDataprivacyGetUsersRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetches a list of users (asynchronously)
     * Fetches a list of users
     * @param toolDataprivacyGetUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyGetUsersAsync(ToolDataprivacyGetUsersRequest toolDataprivacyGetUsersRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyGetUsersValidateBeforeCall(toolDataprivacyGetUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyMarkComplete
     * @param toolDataprivacyCancelDataRequestRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyMarkCompleteCall(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyCancelDataRequestRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_mark_complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyMarkCompleteValidateBeforeCall(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyCancelDataRequestRequest' is set
        if (toolDataprivacyCancelDataRequestRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyCancelDataRequestRequest' when calling toolDataprivacyMarkComplete(Async)");
        }

        return toolDataprivacyMarkCompleteCall(toolDataprivacyCancelDataRequestRequest, _callback);

    }

    /**
     * Mark a user&#39;s general enquiry as complete
     * Mark a user&#39;s general enquiry as complete
     * @param toolDataprivacyCancelDataRequestRequest  (required)
     * @return CoreContentbankRenameContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreContentbankRenameContent200Response toolDataprivacyMarkComplete(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest) throws ApiException {
        ApiResponse<CoreContentbankRenameContent200Response> localVarResp = toolDataprivacyMarkCompleteWithHttpInfo(toolDataprivacyCancelDataRequestRequest);
        return localVarResp.getData();
    }

    /**
     * Mark a user&#39;s general enquiry as complete
     * Mark a user&#39;s general enquiry as complete
     * @param toolDataprivacyCancelDataRequestRequest  (required)
     * @return ApiResponse&lt;CoreContentbankRenameContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreContentbankRenameContent200Response> toolDataprivacyMarkCompleteWithHttpInfo(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyMarkCompleteValidateBeforeCall(toolDataprivacyCancelDataRequestRequest, null);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark a user&#39;s general enquiry as complete (asynchronously)
     * Mark a user&#39;s general enquiry as complete
     * @param toolDataprivacyCancelDataRequestRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyMarkCompleteAsync(ToolDataprivacyCancelDataRequestRequest toolDataprivacyCancelDataRequestRequest, final ApiCallback<CoreContentbankRenameContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyMarkCompleteValidateBeforeCall(toolDataprivacyCancelDataRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacySetContextDefaults
     * @param toolDataprivacySetContextDefaultsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacySetContextDefaultsCall(ToolDataprivacySetContextDefaultsRequest toolDataprivacySetContextDefaultsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacySetContextDefaultsRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_set_context_defaults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacySetContextDefaultsValidateBeforeCall(ToolDataprivacySetContextDefaultsRequest toolDataprivacySetContextDefaultsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacySetContextDefaultsRequest' is set
        if (toolDataprivacySetContextDefaultsRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacySetContextDefaultsRequest' when calling toolDataprivacySetContextDefaults(Async)");
        }

        return toolDataprivacySetContextDefaultsCall(toolDataprivacySetContextDefaultsRequest, _callback);

    }

    /**
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     * @param toolDataprivacySetContextDefaultsRequest  (required)
     * @return ToolDataprivacySetContextDefaults200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolDataprivacySetContextDefaults200Response toolDataprivacySetContextDefaults(ToolDataprivacySetContextDefaultsRequest toolDataprivacySetContextDefaultsRequest) throws ApiException {
        ApiResponse<ToolDataprivacySetContextDefaults200Response> localVarResp = toolDataprivacySetContextDefaultsWithHttpInfo(toolDataprivacySetContextDefaultsRequest);
        return localVarResp.getData();
    }

    /**
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     * @param toolDataprivacySetContextDefaultsRequest  (required)
     * @return ApiResponse&lt;ToolDataprivacySetContextDefaults200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolDataprivacySetContextDefaults200Response> toolDataprivacySetContextDefaultsWithHttpInfo(ToolDataprivacySetContextDefaultsRequest toolDataprivacySetContextDefaultsRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacySetContextDefaultsValidateBeforeCall(toolDataprivacySetContextDefaultsRequest, null);
        Type localVarReturnType = new TypeToken<ToolDataprivacySetContextDefaults200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the default category and purpose for a given context level (and optionally, a plugin) (asynchronously)
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     * @param toolDataprivacySetContextDefaultsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacySetContextDefaultsAsync(ToolDataprivacySetContextDefaultsRequest toolDataprivacySetContextDefaultsRequest, final ApiCallback<ToolDataprivacySetContextDefaults200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacySetContextDefaultsValidateBeforeCall(toolDataprivacySetContextDefaultsRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolDataprivacySetContextDefaults200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacySetContextForm
     * @param toolDataprivacySetContextFormRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacySetContextFormCall(ToolDataprivacySetContextFormRequest toolDataprivacySetContextFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacySetContextFormRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_set_context_form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacySetContextFormValidateBeforeCall(ToolDataprivacySetContextFormRequest toolDataprivacySetContextFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacySetContextFormRequest' is set
        if (toolDataprivacySetContextFormRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacySetContextFormRequest' when calling toolDataprivacySetContextForm(Async)");
        }

        return toolDataprivacySetContextFormCall(toolDataprivacySetContextFormRequest, _callback);

    }

    /**
     * Sets purpose and category for a specific context
     * Sets purpose and category for a specific context
     * @param toolDataprivacySetContextFormRequest  (required)
     * @return ToolDataprivacySetContextForm200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolDataprivacySetContextForm200Response toolDataprivacySetContextForm(ToolDataprivacySetContextFormRequest toolDataprivacySetContextFormRequest) throws ApiException {
        ApiResponse<ToolDataprivacySetContextForm200Response> localVarResp = toolDataprivacySetContextFormWithHttpInfo(toolDataprivacySetContextFormRequest);
        return localVarResp.getData();
    }

    /**
     * Sets purpose and category for a specific context
     * Sets purpose and category for a specific context
     * @param toolDataprivacySetContextFormRequest  (required)
     * @return ApiResponse&lt;ToolDataprivacySetContextForm200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolDataprivacySetContextForm200Response> toolDataprivacySetContextFormWithHttpInfo(ToolDataprivacySetContextFormRequest toolDataprivacySetContextFormRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacySetContextFormValidateBeforeCall(toolDataprivacySetContextFormRequest, null);
        Type localVarReturnType = new TypeToken<ToolDataprivacySetContextForm200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets purpose and category for a specific context (asynchronously)
     * Sets purpose and category for a specific context
     * @param toolDataprivacySetContextFormRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacySetContextFormAsync(ToolDataprivacySetContextFormRequest toolDataprivacySetContextFormRequest, final ApiCallback<ToolDataprivacySetContextForm200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacySetContextFormValidateBeforeCall(toolDataprivacySetContextFormRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolDataprivacySetContextForm200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacySetContextlevelForm
     * @param toolDataprivacySetContextlevelFormRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacySetContextlevelFormCall(ToolDataprivacySetContextlevelFormRequest toolDataprivacySetContextlevelFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacySetContextlevelFormRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_set_contextlevel_form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacySetContextlevelFormValidateBeforeCall(ToolDataprivacySetContextlevelFormRequest toolDataprivacySetContextlevelFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacySetContextlevelFormRequest' is set
        if (toolDataprivacySetContextlevelFormRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacySetContextlevelFormRequest' when calling toolDataprivacySetContextlevelForm(Async)");
        }

        return toolDataprivacySetContextlevelFormCall(toolDataprivacySetContextlevelFormRequest, _callback);

    }

    /**
     * Sets purpose and category across a context level
     * Sets purpose and category across a context level
     * @param toolDataprivacySetContextlevelFormRequest  (required)
     * @return ToolDataprivacySetContextlevelForm200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolDataprivacySetContextlevelForm200Response toolDataprivacySetContextlevelForm(ToolDataprivacySetContextlevelFormRequest toolDataprivacySetContextlevelFormRequest) throws ApiException {
        ApiResponse<ToolDataprivacySetContextlevelForm200Response> localVarResp = toolDataprivacySetContextlevelFormWithHttpInfo(toolDataprivacySetContextlevelFormRequest);
        return localVarResp.getData();
    }

    /**
     * Sets purpose and category across a context level
     * Sets purpose and category across a context level
     * @param toolDataprivacySetContextlevelFormRequest  (required)
     * @return ApiResponse&lt;ToolDataprivacySetContextlevelForm200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolDataprivacySetContextlevelForm200Response> toolDataprivacySetContextlevelFormWithHttpInfo(ToolDataprivacySetContextlevelFormRequest toolDataprivacySetContextlevelFormRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacySetContextlevelFormValidateBeforeCall(toolDataprivacySetContextlevelFormRequest, null);
        Type localVarReturnType = new TypeToken<ToolDataprivacySetContextlevelForm200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sets purpose and category across a context level (asynchronously)
     * Sets purpose and category across a context level
     * @param toolDataprivacySetContextlevelFormRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacySetContextlevelFormAsync(ToolDataprivacySetContextlevelFormRequest toolDataprivacySetContextlevelFormRequest, final ApiCallback<ToolDataprivacySetContextlevelForm200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacySetContextlevelFormValidateBeforeCall(toolDataprivacySetContextlevelFormRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolDataprivacySetContextlevelForm200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacySubmitSelectedCoursesForm
     * @param toolDataprivacySubmitSelectedCoursesFormRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacySubmitSelectedCoursesFormCall(ToolDataprivacySubmitSelectedCoursesFormRequest toolDataprivacySubmitSelectedCoursesFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacySubmitSelectedCoursesFormRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_submit_selected_courses_form";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacySubmitSelectedCoursesFormValidateBeforeCall(ToolDataprivacySubmitSelectedCoursesFormRequest toolDataprivacySubmitSelectedCoursesFormRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacySubmitSelectedCoursesFormRequest' is set
        if (toolDataprivacySubmitSelectedCoursesFormRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacySubmitSelectedCoursesFormRequest' when calling toolDataprivacySubmitSelectedCoursesForm(Async)");
        }

        return toolDataprivacySubmitSelectedCoursesFormCall(toolDataprivacySubmitSelectedCoursesFormRequest, _callback);

    }

    /**
     * Save list of selected courses for export
     * Save list of selected courses for export
     * @param toolDataprivacySubmitSelectedCoursesFormRequest  (required)
     * @return CoreContentbankRenameContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreContentbankRenameContent200Response toolDataprivacySubmitSelectedCoursesForm(ToolDataprivacySubmitSelectedCoursesFormRequest toolDataprivacySubmitSelectedCoursesFormRequest) throws ApiException {
        ApiResponse<CoreContentbankRenameContent200Response> localVarResp = toolDataprivacySubmitSelectedCoursesFormWithHttpInfo(toolDataprivacySubmitSelectedCoursesFormRequest);
        return localVarResp.getData();
    }

    /**
     * Save list of selected courses for export
     * Save list of selected courses for export
     * @param toolDataprivacySubmitSelectedCoursesFormRequest  (required)
     * @return ApiResponse&lt;CoreContentbankRenameContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreContentbankRenameContent200Response> toolDataprivacySubmitSelectedCoursesFormWithHttpInfo(ToolDataprivacySubmitSelectedCoursesFormRequest toolDataprivacySubmitSelectedCoursesFormRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacySubmitSelectedCoursesFormValidateBeforeCall(toolDataprivacySubmitSelectedCoursesFormRequest, null);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save list of selected courses for export (asynchronously)
     * Save list of selected courses for export
     * @param toolDataprivacySubmitSelectedCoursesFormRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacySubmitSelectedCoursesFormAsync(ToolDataprivacySubmitSelectedCoursesFormRequest toolDataprivacySubmitSelectedCoursesFormRequest, final ApiCallback<CoreContentbankRenameContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacySubmitSelectedCoursesFormValidateBeforeCall(toolDataprivacySubmitSelectedCoursesFormRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolDataprivacyTreeExtraBranches
     * @param toolDataprivacyTreeExtraBranchesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyTreeExtraBranchesCall(ToolDataprivacyTreeExtraBranchesRequest toolDataprivacyTreeExtraBranchesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolDataprivacyTreeExtraBranchesRequest;

        // create path and map variables
        String localVarPath = "/tool_dataprivacy_tree_extra_branches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolDataprivacyTreeExtraBranchesValidateBeforeCall(ToolDataprivacyTreeExtraBranchesRequest toolDataprivacyTreeExtraBranchesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolDataprivacyTreeExtraBranchesRequest' is set
        if (toolDataprivacyTreeExtraBranchesRequest == null) {
            throw new ApiException("Missing the required parameter 'toolDataprivacyTreeExtraBranchesRequest' when calling toolDataprivacyTreeExtraBranches(Async)");
        }

        return toolDataprivacyTreeExtraBranchesCall(toolDataprivacyTreeExtraBranchesRequest, _callback);

    }

    /**
     * Return branches for the context tree
     * Return branches for the context tree
     * @param toolDataprivacyTreeExtraBranchesRequest  (required)
     * @return ToolDataprivacyTreeExtraBranches200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolDataprivacyTreeExtraBranches200Response toolDataprivacyTreeExtraBranches(ToolDataprivacyTreeExtraBranchesRequest toolDataprivacyTreeExtraBranchesRequest) throws ApiException {
        ApiResponse<ToolDataprivacyTreeExtraBranches200Response> localVarResp = toolDataprivacyTreeExtraBranchesWithHttpInfo(toolDataprivacyTreeExtraBranchesRequest);
        return localVarResp.getData();
    }

    /**
     * Return branches for the context tree
     * Return branches for the context tree
     * @param toolDataprivacyTreeExtraBranchesRequest  (required)
     * @return ApiResponse&lt;ToolDataprivacyTreeExtraBranches200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolDataprivacyTreeExtraBranches200Response> toolDataprivacyTreeExtraBranchesWithHttpInfo(ToolDataprivacyTreeExtraBranchesRequest toolDataprivacyTreeExtraBranchesRequest) throws ApiException {
        okhttp3.Call localVarCall = toolDataprivacyTreeExtraBranchesValidateBeforeCall(toolDataprivacyTreeExtraBranchesRequest, null);
        Type localVarReturnType = new TypeToken<ToolDataprivacyTreeExtraBranches200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return branches for the context tree (asynchronously)
     * Return branches for the context tree
     * @param toolDataprivacyTreeExtraBranchesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolDataprivacyTreeExtraBranchesAsync(ToolDataprivacyTreeExtraBranchesRequest toolDataprivacyTreeExtraBranchesRequest, final ApiCallback<ToolDataprivacyTreeExtraBranches200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolDataprivacyTreeExtraBranchesValidateBeforeCall(toolDataprivacyTreeExtraBranchesRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolDataprivacyTreeExtraBranches200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
