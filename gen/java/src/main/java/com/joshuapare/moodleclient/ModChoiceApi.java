/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModChatGetChatsByCoursesRequest;
import org.openapitools.client.model.ModChoiceDeleteChoiceResponses200Response;
import org.openapitools.client.model.ModChoiceDeleteChoiceResponsesRequest;
import org.openapitools.client.model.ModChoiceGetChoiceOptions200Response;
import org.openapitools.client.model.ModChoiceGetChoiceOptionsRequest;
import org.openapitools.client.model.ModChoiceGetChoiceResults200Response;
import org.openapitools.client.model.ModChoiceGetChoicesByCourses200Response;
import org.openapitools.client.model.ModChoiceSubmitChoiceResponse200Response;
import org.openapitools.client.model.ModChoiceSubmitChoiceResponseRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModChoiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModChoiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModChoiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modChoiceDeleteChoiceResponses
     * @param modChoiceDeleteChoiceResponsesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChoiceDeleteChoiceResponsesCall(ModChoiceDeleteChoiceResponsesRequest modChoiceDeleteChoiceResponsesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChoiceDeleteChoiceResponsesRequest;

        // create path and map variables
        String localVarPath = "/mod_choice_delete_choice_responses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modChoiceDeleteChoiceResponsesValidateBeforeCall(ModChoiceDeleteChoiceResponsesRequest modChoiceDeleteChoiceResponsesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChoiceDeleteChoiceResponsesRequest' is set
        if (modChoiceDeleteChoiceResponsesRequest == null) {
            throw new ApiException("Missing the required parameter 'modChoiceDeleteChoiceResponsesRequest' when calling modChoiceDeleteChoiceResponses(Async)");
        }

        return modChoiceDeleteChoiceResponsesCall(modChoiceDeleteChoiceResponsesRequest, _callback);

    }

    /**
     * Delete the given submitted responses in a choice
     * Delete the given submitted responses in a choice
     * @param modChoiceDeleteChoiceResponsesRequest  (required)
     * @return ModChoiceDeleteChoiceResponses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModChoiceDeleteChoiceResponses200Response modChoiceDeleteChoiceResponses(ModChoiceDeleteChoiceResponsesRequest modChoiceDeleteChoiceResponsesRequest) throws ApiException {
        ApiResponse<ModChoiceDeleteChoiceResponses200Response> localVarResp = modChoiceDeleteChoiceResponsesWithHttpInfo(modChoiceDeleteChoiceResponsesRequest);
        return localVarResp.getData();
    }

    /**
     * Delete the given submitted responses in a choice
     * Delete the given submitted responses in a choice
     * @param modChoiceDeleteChoiceResponsesRequest  (required)
     * @return ApiResponse&lt;ModChoiceDeleteChoiceResponses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModChoiceDeleteChoiceResponses200Response> modChoiceDeleteChoiceResponsesWithHttpInfo(ModChoiceDeleteChoiceResponsesRequest modChoiceDeleteChoiceResponsesRequest) throws ApiException {
        okhttp3.Call localVarCall = modChoiceDeleteChoiceResponsesValidateBeforeCall(modChoiceDeleteChoiceResponsesRequest, null);
        Type localVarReturnType = new TypeToken<ModChoiceDeleteChoiceResponses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the given submitted responses in a choice (asynchronously)
     * Delete the given submitted responses in a choice
     * @param modChoiceDeleteChoiceResponsesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChoiceDeleteChoiceResponsesAsync(ModChoiceDeleteChoiceResponsesRequest modChoiceDeleteChoiceResponsesRequest, final ApiCallback<ModChoiceDeleteChoiceResponses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modChoiceDeleteChoiceResponsesValidateBeforeCall(modChoiceDeleteChoiceResponsesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModChoiceDeleteChoiceResponses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modChoiceGetChoiceOptions
     * @param modChoiceGetChoiceOptionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChoiceGetChoiceOptionsCall(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChoiceGetChoiceOptionsRequest;

        // create path and map variables
        String localVarPath = "/mod_choice_get_choice_options";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modChoiceGetChoiceOptionsValidateBeforeCall(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChoiceGetChoiceOptionsRequest' is set
        if (modChoiceGetChoiceOptionsRequest == null) {
            throw new ApiException("Missing the required parameter 'modChoiceGetChoiceOptionsRequest' when calling modChoiceGetChoiceOptions(Async)");
        }

        return modChoiceGetChoiceOptionsCall(modChoiceGetChoiceOptionsRequest, _callback);

    }

    /**
     * Retrieve options for a specific choice.
     * Retrieve options for a specific choice.
     * @param modChoiceGetChoiceOptionsRequest  (required)
     * @return ModChoiceGetChoiceOptions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModChoiceGetChoiceOptions200Response modChoiceGetChoiceOptions(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest) throws ApiException {
        ApiResponse<ModChoiceGetChoiceOptions200Response> localVarResp = modChoiceGetChoiceOptionsWithHttpInfo(modChoiceGetChoiceOptionsRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve options for a specific choice.
     * Retrieve options for a specific choice.
     * @param modChoiceGetChoiceOptionsRequest  (required)
     * @return ApiResponse&lt;ModChoiceGetChoiceOptions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModChoiceGetChoiceOptions200Response> modChoiceGetChoiceOptionsWithHttpInfo(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest) throws ApiException {
        okhttp3.Call localVarCall = modChoiceGetChoiceOptionsValidateBeforeCall(modChoiceGetChoiceOptionsRequest, null);
        Type localVarReturnType = new TypeToken<ModChoiceGetChoiceOptions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve options for a specific choice. (asynchronously)
     * Retrieve options for a specific choice.
     * @param modChoiceGetChoiceOptionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChoiceGetChoiceOptionsAsync(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, final ApiCallback<ModChoiceGetChoiceOptions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modChoiceGetChoiceOptionsValidateBeforeCall(modChoiceGetChoiceOptionsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModChoiceGetChoiceOptions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modChoiceGetChoiceResults
     * @param modChoiceGetChoiceOptionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChoiceGetChoiceResultsCall(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChoiceGetChoiceOptionsRequest;

        // create path and map variables
        String localVarPath = "/mod_choice_get_choice_results";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modChoiceGetChoiceResultsValidateBeforeCall(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChoiceGetChoiceOptionsRequest' is set
        if (modChoiceGetChoiceOptionsRequest == null) {
            throw new ApiException("Missing the required parameter 'modChoiceGetChoiceOptionsRequest' when calling modChoiceGetChoiceResults(Async)");
        }

        return modChoiceGetChoiceResultsCall(modChoiceGetChoiceOptionsRequest, _callback);

    }

    /**
     * Retrieve users results for a given choice.
     * Retrieve users results for a given choice.
     * @param modChoiceGetChoiceOptionsRequest  (required)
     * @return ModChoiceGetChoiceResults200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModChoiceGetChoiceResults200Response modChoiceGetChoiceResults(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest) throws ApiException {
        ApiResponse<ModChoiceGetChoiceResults200Response> localVarResp = modChoiceGetChoiceResultsWithHttpInfo(modChoiceGetChoiceOptionsRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve users results for a given choice.
     * Retrieve users results for a given choice.
     * @param modChoiceGetChoiceOptionsRequest  (required)
     * @return ApiResponse&lt;ModChoiceGetChoiceResults200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModChoiceGetChoiceResults200Response> modChoiceGetChoiceResultsWithHttpInfo(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest) throws ApiException {
        okhttp3.Call localVarCall = modChoiceGetChoiceResultsValidateBeforeCall(modChoiceGetChoiceOptionsRequest, null);
        Type localVarReturnType = new TypeToken<ModChoiceGetChoiceResults200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve users results for a given choice. (asynchronously)
     * Retrieve users results for a given choice.
     * @param modChoiceGetChoiceOptionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChoiceGetChoiceResultsAsync(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, final ApiCallback<ModChoiceGetChoiceResults200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modChoiceGetChoiceResultsValidateBeforeCall(modChoiceGetChoiceOptionsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModChoiceGetChoiceResults200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modChoiceGetChoicesByCourses
     * @param modChatGetChatsByCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChoiceGetChoicesByCoursesCall(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChatGetChatsByCoursesRequest;

        // create path and map variables
        String localVarPath = "/mod_choice_get_choices_by_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modChoiceGetChoicesByCoursesValidateBeforeCall(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
        if (modChatGetChatsByCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'modChatGetChatsByCoursesRequest' when calling modChoiceGetChoicesByCourses(Async)");
        }

        return modChoiceGetChoicesByCoursesCall(modChatGetChatsByCoursesRequest, _callback);

    }

    /**
     * Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
     * Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @return ModChoiceGetChoicesByCourses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModChoiceGetChoicesByCourses200Response modChoiceGetChoicesByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest) throws ApiException {
        ApiResponse<ModChoiceGetChoicesByCourses200Response> localVarResp = modChoiceGetChoicesByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
     * Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @return ApiResponse&lt;ModChoiceGetChoicesByCourses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModChoiceGetChoicesByCourses200Response> modChoiceGetChoicesByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = modChoiceGetChoicesByCoursesValidateBeforeCall(modChatGetChatsByCoursesRequest, null);
        Type localVarReturnType = new TypeToken<ModChoiceGetChoicesByCourses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned. (asynchronously)
     * Returns a list of choice instances in a provided set of courses,                             if no courses are provided then all the choice instances the user has access to will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChoiceGetChoicesByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback<ModChoiceGetChoicesByCourses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modChoiceGetChoicesByCoursesValidateBeforeCall(modChatGetChatsByCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModChoiceGetChoicesByCourses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modChoiceSubmitChoiceResponse
     * @param modChoiceSubmitChoiceResponseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChoiceSubmitChoiceResponseCall(ModChoiceSubmitChoiceResponseRequest modChoiceSubmitChoiceResponseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChoiceSubmitChoiceResponseRequest;

        // create path and map variables
        String localVarPath = "/mod_choice_submit_choice_response";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modChoiceSubmitChoiceResponseValidateBeforeCall(ModChoiceSubmitChoiceResponseRequest modChoiceSubmitChoiceResponseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChoiceSubmitChoiceResponseRequest' is set
        if (modChoiceSubmitChoiceResponseRequest == null) {
            throw new ApiException("Missing the required parameter 'modChoiceSubmitChoiceResponseRequest' when calling modChoiceSubmitChoiceResponse(Async)");
        }

        return modChoiceSubmitChoiceResponseCall(modChoiceSubmitChoiceResponseRequest, _callback);

    }

    /**
     * Submit responses to a specific choice item.
     * Submit responses to a specific choice item.
     * @param modChoiceSubmitChoiceResponseRequest  (required)
     * @return ModChoiceSubmitChoiceResponse200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModChoiceSubmitChoiceResponse200Response modChoiceSubmitChoiceResponse(ModChoiceSubmitChoiceResponseRequest modChoiceSubmitChoiceResponseRequest) throws ApiException {
        ApiResponse<ModChoiceSubmitChoiceResponse200Response> localVarResp = modChoiceSubmitChoiceResponseWithHttpInfo(modChoiceSubmitChoiceResponseRequest);
        return localVarResp.getData();
    }

    /**
     * Submit responses to a specific choice item.
     * Submit responses to a specific choice item.
     * @param modChoiceSubmitChoiceResponseRequest  (required)
     * @return ApiResponse&lt;ModChoiceSubmitChoiceResponse200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModChoiceSubmitChoiceResponse200Response> modChoiceSubmitChoiceResponseWithHttpInfo(ModChoiceSubmitChoiceResponseRequest modChoiceSubmitChoiceResponseRequest) throws ApiException {
        okhttp3.Call localVarCall = modChoiceSubmitChoiceResponseValidateBeforeCall(modChoiceSubmitChoiceResponseRequest, null);
        Type localVarReturnType = new TypeToken<ModChoiceSubmitChoiceResponse200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit responses to a specific choice item. (asynchronously)
     * Submit responses to a specific choice item.
     * @param modChoiceSubmitChoiceResponseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChoiceSubmitChoiceResponseAsync(ModChoiceSubmitChoiceResponseRequest modChoiceSubmitChoiceResponseRequest, final ApiCallback<ModChoiceSubmitChoiceResponse200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modChoiceSubmitChoiceResponseValidateBeforeCall(modChoiceSubmitChoiceResponseRequest, _callback);
        Type localVarReturnType = new TypeToken<ModChoiceSubmitChoiceResponse200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modChoiceViewChoice
     * @param modChoiceGetChoiceOptionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChoiceViewChoiceCall(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChoiceGetChoiceOptionsRequest;

        // create path and map variables
        String localVarPath = "/mod_choice_view_choice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modChoiceViewChoiceValidateBeforeCall(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChoiceGetChoiceOptionsRequest' is set
        if (modChoiceGetChoiceOptionsRequest == null) {
            throw new ApiException("Missing the required parameter 'modChoiceGetChoiceOptionsRequest' when calling modChoiceViewChoice(Async)");
        }

        return modChoiceViewChoiceCall(modChoiceGetChoiceOptionsRequest, _callback);

    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modChoiceGetChoiceOptionsRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modChoiceViewChoice(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modChoiceViewChoiceWithHttpInfo(modChoiceGetChoiceOptionsRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modChoiceGetChoiceOptionsRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modChoiceViewChoiceWithHttpInfo(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest) throws ApiException {
        okhttp3.Call localVarCall = modChoiceViewChoiceValidateBeforeCall(modChoiceGetChoiceOptionsRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the course module viewed event and update the module completion status. (asynchronously)
     * Trigger the course module viewed event and update the module completion status.
     * @param modChoiceGetChoiceOptionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modChoiceViewChoiceAsync(ModChoiceGetChoiceOptionsRequest modChoiceGetChoiceOptionsRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modChoiceViewChoiceValidateBeforeCall(modChoiceGetChoiceOptionsRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
