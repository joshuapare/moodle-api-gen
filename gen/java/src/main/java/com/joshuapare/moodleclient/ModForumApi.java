/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModForumAddDiscussion200Response;
import org.openapitools.client.model.ModForumAddDiscussionPost200Response;
import org.openapitools.client.model.ModForumAddDiscussionPostRequest;
import org.openapitools.client.model.ModForumAddDiscussionRequest;
import org.openapitools.client.model.ModForumCanAddDiscussion200Response;
import org.openapitools.client.model.ModForumCanAddDiscussionRequest;
import org.openapitools.client.model.ModForumDeletePost200Response;
import org.openapitools.client.model.ModForumDeletePostRequest;
import org.openapitools.client.model.ModForumGetDiscussionPost200Response;
import org.openapitools.client.model.ModForumGetDiscussionPostRequest;
import org.openapitools.client.model.ModForumGetDiscussionPosts200Response;
import org.openapitools.client.model.ModForumGetDiscussionPostsByUserid200Response;
import org.openapitools.client.model.ModForumGetDiscussionPostsByUseridRequest;
import org.openapitools.client.model.ModForumGetDiscussionPostsRequest;
import org.openapitools.client.model.ModForumGetForumAccessInformation200Response;
import org.openapitools.client.model.ModForumGetForumAccessInformationRequest;
import org.openapitools.client.model.ModForumGetForumDiscussions200Response;
import org.openapitools.client.model.ModForumGetForumDiscussionsPaginated200Response;
import org.openapitools.client.model.ModForumGetForumDiscussionsPaginatedRequest;
import org.openapitools.client.model.ModForumGetForumDiscussionsRequest;
import org.openapitools.client.model.ModForumGetForumsByCoursesRequest;
import org.openapitools.client.model.ModForumPrepareDraftAreaForPost200Response;
import org.openapitools.client.model.ModForumPrepareDraftAreaForPostRequest;
import org.openapitools.client.model.ModForumSetLockState200Response;
import org.openapitools.client.model.ModForumSetLockStateRequest;
import org.openapitools.client.model.ModForumSetPinState200Response;
import org.openapitools.client.model.ModForumSetPinStateRequest;
import org.openapitools.client.model.ModForumSetSubscriptionState200Response;
import org.openapitools.client.model.ModForumSetSubscriptionStateRequest;
import org.openapitools.client.model.ModForumToggleFavouriteStateRequest;
import org.openapitools.client.model.ModForumUpdateDiscussionPost200Response;
import org.openapitools.client.model.ModForumUpdateDiscussionPostRequest;
import org.openapitools.client.model.ModForumViewForumDiscussionRequest;
import org.openapitools.client.model.ModForumViewForumRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModForumApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModForumApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModForumApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modForumAddDiscussion
     * @param modForumAddDiscussionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumAddDiscussionCall(ModForumAddDiscussionRequest modForumAddDiscussionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumAddDiscussionRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_add_discussion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumAddDiscussionValidateBeforeCall(ModForumAddDiscussionRequest modForumAddDiscussionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumAddDiscussionRequest' is set
        if (modForumAddDiscussionRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumAddDiscussionRequest' when calling modForumAddDiscussion(Async)");
        }

        return modForumAddDiscussionCall(modForumAddDiscussionRequest, _callback);

    }

    /**
     * Add a new discussion into an existing forum.
     * Add a new discussion into an existing forum.
     * @param modForumAddDiscussionRequest  (required)
     * @return ModForumAddDiscussion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModForumAddDiscussion200Response modForumAddDiscussion(ModForumAddDiscussionRequest modForumAddDiscussionRequest) throws ApiException {
        ApiResponse<ModForumAddDiscussion200Response> localVarResp = modForumAddDiscussionWithHttpInfo(modForumAddDiscussionRequest);
        return localVarResp.getData();
    }

    /**
     * Add a new discussion into an existing forum.
     * Add a new discussion into an existing forum.
     * @param modForumAddDiscussionRequest  (required)
     * @return ApiResponse&lt;ModForumAddDiscussion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModForumAddDiscussion200Response> modForumAddDiscussionWithHttpInfo(ModForumAddDiscussionRequest modForumAddDiscussionRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumAddDiscussionValidateBeforeCall(modForumAddDiscussionRequest, null);
        Type localVarReturnType = new TypeToken<ModForumAddDiscussion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new discussion into an existing forum. (asynchronously)
     * Add a new discussion into an existing forum.
     * @param modForumAddDiscussionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumAddDiscussionAsync(ModForumAddDiscussionRequest modForumAddDiscussionRequest, final ApiCallback<ModForumAddDiscussion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumAddDiscussionValidateBeforeCall(modForumAddDiscussionRequest, _callback);
        Type localVarReturnType = new TypeToken<ModForumAddDiscussion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumAddDiscussionPost
     * @param modForumAddDiscussionPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumAddDiscussionPostCall(ModForumAddDiscussionPostRequest modForumAddDiscussionPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumAddDiscussionPostRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_add_discussion_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumAddDiscussionPostValidateBeforeCall(ModForumAddDiscussionPostRequest modForumAddDiscussionPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumAddDiscussionPostRequest' is set
        if (modForumAddDiscussionPostRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumAddDiscussionPostRequest' when calling modForumAddDiscussionPost(Async)");
        }

        return modForumAddDiscussionPostCall(modForumAddDiscussionPostRequest, _callback);

    }

    /**
     * Create new posts into an existing discussion.
     * Create new posts into an existing discussion.
     * @param modForumAddDiscussionPostRequest  (required)
     * @return ModForumAddDiscussionPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModForumAddDiscussionPost200Response modForumAddDiscussionPost(ModForumAddDiscussionPostRequest modForumAddDiscussionPostRequest) throws ApiException {
        ApiResponse<ModForumAddDiscussionPost200Response> localVarResp = modForumAddDiscussionPostWithHttpInfo(modForumAddDiscussionPostRequest);
        return localVarResp.getData();
    }

    /**
     * Create new posts into an existing discussion.
     * Create new posts into an existing discussion.
     * @param modForumAddDiscussionPostRequest  (required)
     * @return ApiResponse&lt;ModForumAddDiscussionPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModForumAddDiscussionPost200Response> modForumAddDiscussionPostWithHttpInfo(ModForumAddDiscussionPostRequest modForumAddDiscussionPostRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumAddDiscussionPostValidateBeforeCall(modForumAddDiscussionPostRequest, null);
        Type localVarReturnType = new TypeToken<ModForumAddDiscussionPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new posts into an existing discussion. (asynchronously)
     * Create new posts into an existing discussion.
     * @param modForumAddDiscussionPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumAddDiscussionPostAsync(ModForumAddDiscussionPostRequest modForumAddDiscussionPostRequest, final ApiCallback<ModForumAddDiscussionPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumAddDiscussionPostValidateBeforeCall(modForumAddDiscussionPostRequest, _callback);
        Type localVarReturnType = new TypeToken<ModForumAddDiscussionPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumCanAddDiscussion
     * @param modForumCanAddDiscussionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumCanAddDiscussionCall(ModForumCanAddDiscussionRequest modForumCanAddDiscussionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumCanAddDiscussionRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_can_add_discussion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumCanAddDiscussionValidateBeforeCall(ModForumCanAddDiscussionRequest modForumCanAddDiscussionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumCanAddDiscussionRequest' is set
        if (modForumCanAddDiscussionRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumCanAddDiscussionRequest' when calling modForumCanAddDiscussion(Async)");
        }

        return modForumCanAddDiscussionCall(modForumCanAddDiscussionRequest, _callback);

    }

    /**
     * Check if the current user can add discussions in the given forum (and optionally for the given group).
     * Check if the current user can add discussions in the given forum (and optionally for the given group).
     * @param modForumCanAddDiscussionRequest  (required)
     * @return ModForumCanAddDiscussion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModForumCanAddDiscussion200Response modForumCanAddDiscussion(ModForumCanAddDiscussionRequest modForumCanAddDiscussionRequest) throws ApiException {
        ApiResponse<ModForumCanAddDiscussion200Response> localVarResp = modForumCanAddDiscussionWithHttpInfo(modForumCanAddDiscussionRequest);
        return localVarResp.getData();
    }

    /**
     * Check if the current user can add discussions in the given forum (and optionally for the given group).
     * Check if the current user can add discussions in the given forum (and optionally for the given group).
     * @param modForumCanAddDiscussionRequest  (required)
     * @return ApiResponse&lt;ModForumCanAddDiscussion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModForumCanAddDiscussion200Response> modForumCanAddDiscussionWithHttpInfo(ModForumCanAddDiscussionRequest modForumCanAddDiscussionRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumCanAddDiscussionValidateBeforeCall(modForumCanAddDiscussionRequest, null);
        Type localVarReturnType = new TypeToken<ModForumCanAddDiscussion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if the current user can add discussions in the given forum (and optionally for the given group). (asynchronously)
     * Check if the current user can add discussions in the given forum (and optionally for the given group).
     * @param modForumCanAddDiscussionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumCanAddDiscussionAsync(ModForumCanAddDiscussionRequest modForumCanAddDiscussionRequest, final ApiCallback<ModForumCanAddDiscussion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumCanAddDiscussionValidateBeforeCall(modForumCanAddDiscussionRequest, _callback);
        Type localVarReturnType = new TypeToken<ModForumCanAddDiscussion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumDeletePost
     * @param modForumDeletePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumDeletePostCall(ModForumDeletePostRequest modForumDeletePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumDeletePostRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_delete_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumDeletePostValidateBeforeCall(ModForumDeletePostRequest modForumDeletePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumDeletePostRequest' is set
        if (modForumDeletePostRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumDeletePostRequest' when calling modForumDeletePost(Async)");
        }

        return modForumDeletePostCall(modForumDeletePostRequest, _callback);

    }

    /**
     * Deletes a post or a discussion completely when the post is the discussion topic.
     * Deletes a post or a discussion completely when the post is the discussion topic.
     * @param modForumDeletePostRequest  (required)
     * @return ModForumDeletePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModForumDeletePost200Response modForumDeletePost(ModForumDeletePostRequest modForumDeletePostRequest) throws ApiException {
        ApiResponse<ModForumDeletePost200Response> localVarResp = modForumDeletePostWithHttpInfo(modForumDeletePostRequest);
        return localVarResp.getData();
    }

    /**
     * Deletes a post or a discussion completely when the post is the discussion topic.
     * Deletes a post or a discussion completely when the post is the discussion topic.
     * @param modForumDeletePostRequest  (required)
     * @return ApiResponse&lt;ModForumDeletePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModForumDeletePost200Response> modForumDeletePostWithHttpInfo(ModForumDeletePostRequest modForumDeletePostRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumDeletePostValidateBeforeCall(modForumDeletePostRequest, null);
        Type localVarReturnType = new TypeToken<ModForumDeletePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a post or a discussion completely when the post is the discussion topic. (asynchronously)
     * Deletes a post or a discussion completely when the post is the discussion topic.
     * @param modForumDeletePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumDeletePostAsync(ModForumDeletePostRequest modForumDeletePostRequest, final ApiCallback<ModForumDeletePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumDeletePostValidateBeforeCall(modForumDeletePostRequest, _callback);
        Type localVarReturnType = new TypeToken<ModForumDeletePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumGetDiscussionPost
     * @param modForumGetDiscussionPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumGetDiscussionPostCall(ModForumGetDiscussionPostRequest modForumGetDiscussionPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumGetDiscussionPostRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_get_discussion_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumGetDiscussionPostValidateBeforeCall(ModForumGetDiscussionPostRequest modForumGetDiscussionPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumGetDiscussionPostRequest' is set
        if (modForumGetDiscussionPostRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumGetDiscussionPostRequest' when calling modForumGetDiscussionPost(Async)");
        }

        return modForumGetDiscussionPostCall(modForumGetDiscussionPostRequest, _callback);

    }

    /**
     * Get a particular discussion post.
     * Get a particular discussion post.
     * @param modForumGetDiscussionPostRequest  (required)
     * @return ModForumGetDiscussionPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModForumGetDiscussionPost200Response modForumGetDiscussionPost(ModForumGetDiscussionPostRequest modForumGetDiscussionPostRequest) throws ApiException {
        ApiResponse<ModForumGetDiscussionPost200Response> localVarResp = modForumGetDiscussionPostWithHttpInfo(modForumGetDiscussionPostRequest);
        return localVarResp.getData();
    }

    /**
     * Get a particular discussion post.
     * Get a particular discussion post.
     * @param modForumGetDiscussionPostRequest  (required)
     * @return ApiResponse&lt;ModForumGetDiscussionPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModForumGetDiscussionPost200Response> modForumGetDiscussionPostWithHttpInfo(ModForumGetDiscussionPostRequest modForumGetDiscussionPostRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumGetDiscussionPostValidateBeforeCall(modForumGetDiscussionPostRequest, null);
        Type localVarReturnType = new TypeToken<ModForumGetDiscussionPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a particular discussion post. (asynchronously)
     * Get a particular discussion post.
     * @param modForumGetDiscussionPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumGetDiscussionPostAsync(ModForumGetDiscussionPostRequest modForumGetDiscussionPostRequest, final ApiCallback<ModForumGetDiscussionPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumGetDiscussionPostValidateBeforeCall(modForumGetDiscussionPostRequest, _callback);
        Type localVarReturnType = new TypeToken<ModForumGetDiscussionPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumGetDiscussionPosts
     * @param modForumGetDiscussionPostsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumGetDiscussionPostsCall(ModForumGetDiscussionPostsRequest modForumGetDiscussionPostsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumGetDiscussionPostsRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_get_discussion_posts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumGetDiscussionPostsValidateBeforeCall(ModForumGetDiscussionPostsRequest modForumGetDiscussionPostsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumGetDiscussionPostsRequest' is set
        if (modForumGetDiscussionPostsRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumGetDiscussionPostsRequest' when calling modForumGetDiscussionPosts(Async)");
        }

        return modForumGetDiscussionPostsCall(modForumGetDiscussionPostsRequest, _callback);

    }

    /**
     * Returns a list of forum posts for a discussion.
     * Returns a list of forum posts for a discussion.
     * @param modForumGetDiscussionPostsRequest  (required)
     * @return ModForumGetDiscussionPosts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModForumGetDiscussionPosts200Response modForumGetDiscussionPosts(ModForumGetDiscussionPostsRequest modForumGetDiscussionPostsRequest) throws ApiException {
        ApiResponse<ModForumGetDiscussionPosts200Response> localVarResp = modForumGetDiscussionPostsWithHttpInfo(modForumGetDiscussionPostsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of forum posts for a discussion.
     * Returns a list of forum posts for a discussion.
     * @param modForumGetDiscussionPostsRequest  (required)
     * @return ApiResponse&lt;ModForumGetDiscussionPosts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModForumGetDiscussionPosts200Response> modForumGetDiscussionPostsWithHttpInfo(ModForumGetDiscussionPostsRequest modForumGetDiscussionPostsRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumGetDiscussionPostsValidateBeforeCall(modForumGetDiscussionPostsRequest, null);
        Type localVarReturnType = new TypeToken<ModForumGetDiscussionPosts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of forum posts for a discussion. (asynchronously)
     * Returns a list of forum posts for a discussion.
     * @param modForumGetDiscussionPostsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumGetDiscussionPostsAsync(ModForumGetDiscussionPostsRequest modForumGetDiscussionPostsRequest, final ApiCallback<ModForumGetDiscussionPosts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumGetDiscussionPostsValidateBeforeCall(modForumGetDiscussionPostsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModForumGetDiscussionPosts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumGetDiscussionPostsByUserid
     * @param modForumGetDiscussionPostsByUseridRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumGetDiscussionPostsByUseridCall(ModForumGetDiscussionPostsByUseridRequest modForumGetDiscussionPostsByUseridRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumGetDiscussionPostsByUseridRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_get_discussion_posts_by_userid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumGetDiscussionPostsByUseridValidateBeforeCall(ModForumGetDiscussionPostsByUseridRequest modForumGetDiscussionPostsByUseridRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumGetDiscussionPostsByUseridRequest' is set
        if (modForumGetDiscussionPostsByUseridRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumGetDiscussionPostsByUseridRequest' when calling modForumGetDiscussionPostsByUserid(Async)");
        }

        return modForumGetDiscussionPostsByUseridCall(modForumGetDiscussionPostsByUseridRequest, _callback);

    }

    /**
     * Returns a list of forum posts for a discussion for a user.
     * Returns a list of forum posts for a discussion for a user.
     * @param modForumGetDiscussionPostsByUseridRequest  (required)
     * @return ModForumGetDiscussionPostsByUserid200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModForumGetDiscussionPostsByUserid200Response modForumGetDiscussionPostsByUserid(ModForumGetDiscussionPostsByUseridRequest modForumGetDiscussionPostsByUseridRequest) throws ApiException {
        ApiResponse<ModForumGetDiscussionPostsByUserid200Response> localVarResp = modForumGetDiscussionPostsByUseridWithHttpInfo(modForumGetDiscussionPostsByUseridRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of forum posts for a discussion for a user.
     * Returns a list of forum posts for a discussion for a user.
     * @param modForumGetDiscussionPostsByUseridRequest  (required)
     * @return ApiResponse&lt;ModForumGetDiscussionPostsByUserid200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModForumGetDiscussionPostsByUserid200Response> modForumGetDiscussionPostsByUseridWithHttpInfo(ModForumGetDiscussionPostsByUseridRequest modForumGetDiscussionPostsByUseridRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumGetDiscussionPostsByUseridValidateBeforeCall(modForumGetDiscussionPostsByUseridRequest, null);
        Type localVarReturnType = new TypeToken<ModForumGetDiscussionPostsByUserid200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of forum posts for a discussion for a user. (asynchronously)
     * Returns a list of forum posts for a discussion for a user.
     * @param modForumGetDiscussionPostsByUseridRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumGetDiscussionPostsByUseridAsync(ModForumGetDiscussionPostsByUseridRequest modForumGetDiscussionPostsByUseridRequest, final ApiCallback<ModForumGetDiscussionPostsByUserid200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumGetDiscussionPostsByUseridValidateBeforeCall(modForumGetDiscussionPostsByUseridRequest, _callback);
        Type localVarReturnType = new TypeToken<ModForumGetDiscussionPostsByUserid200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumGetForumAccessInformation
     * @param modForumGetForumAccessInformationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumGetForumAccessInformationCall(ModForumGetForumAccessInformationRequest modForumGetForumAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumGetForumAccessInformationRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_get_forum_access_information";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumGetForumAccessInformationValidateBeforeCall(ModForumGetForumAccessInformationRequest modForumGetForumAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumGetForumAccessInformationRequest' is set
        if (modForumGetForumAccessInformationRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumGetForumAccessInformationRequest' when calling modForumGetForumAccessInformation(Async)");
        }

        return modForumGetForumAccessInformationCall(modForumGetForumAccessInformationRequest, _callback);

    }

    /**
     * Return capabilities information for a given forum.
     * Return capabilities information for a given forum.
     * @param modForumGetForumAccessInformationRequest  (required)
     * @return ModForumGetForumAccessInformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModForumGetForumAccessInformation200Response modForumGetForumAccessInformation(ModForumGetForumAccessInformationRequest modForumGetForumAccessInformationRequest) throws ApiException {
        ApiResponse<ModForumGetForumAccessInformation200Response> localVarResp = modForumGetForumAccessInformationWithHttpInfo(modForumGetForumAccessInformationRequest);
        return localVarResp.getData();
    }

    /**
     * Return capabilities information for a given forum.
     * Return capabilities information for a given forum.
     * @param modForumGetForumAccessInformationRequest  (required)
     * @return ApiResponse&lt;ModForumGetForumAccessInformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModForumGetForumAccessInformation200Response> modForumGetForumAccessInformationWithHttpInfo(ModForumGetForumAccessInformationRequest modForumGetForumAccessInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumGetForumAccessInformationValidateBeforeCall(modForumGetForumAccessInformationRequest, null);
        Type localVarReturnType = new TypeToken<ModForumGetForumAccessInformation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return capabilities information for a given forum. (asynchronously)
     * Return capabilities information for a given forum.
     * @param modForumGetForumAccessInformationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumGetForumAccessInformationAsync(ModForumGetForumAccessInformationRequest modForumGetForumAccessInformationRequest, final ApiCallback<ModForumGetForumAccessInformation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumGetForumAccessInformationValidateBeforeCall(modForumGetForumAccessInformationRequest, _callback);
        Type localVarReturnType = new TypeToken<ModForumGetForumAccessInformation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumGetForumDiscussions
     * @param modForumGetForumDiscussionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumGetForumDiscussionsCall(ModForumGetForumDiscussionsRequest modForumGetForumDiscussionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumGetForumDiscussionsRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_get_forum_discussions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumGetForumDiscussionsValidateBeforeCall(ModForumGetForumDiscussionsRequest modForumGetForumDiscussionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumGetForumDiscussionsRequest' is set
        if (modForumGetForumDiscussionsRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumGetForumDiscussionsRequest' when calling modForumGetForumDiscussions(Async)");
        }

        return modForumGetForumDiscussionsCall(modForumGetForumDiscussionsRequest, _callback);

    }

    /**
     * Returns a list of forum discussions optionally sorted and paginated.
     * Returns a list of forum discussions optionally sorted and paginated.
     * @param modForumGetForumDiscussionsRequest  (required)
     * @return ModForumGetForumDiscussions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModForumGetForumDiscussions200Response modForumGetForumDiscussions(ModForumGetForumDiscussionsRequest modForumGetForumDiscussionsRequest) throws ApiException {
        ApiResponse<ModForumGetForumDiscussions200Response> localVarResp = modForumGetForumDiscussionsWithHttpInfo(modForumGetForumDiscussionsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of forum discussions optionally sorted and paginated.
     * Returns a list of forum discussions optionally sorted and paginated.
     * @param modForumGetForumDiscussionsRequest  (required)
     * @return ApiResponse&lt;ModForumGetForumDiscussions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModForumGetForumDiscussions200Response> modForumGetForumDiscussionsWithHttpInfo(ModForumGetForumDiscussionsRequest modForumGetForumDiscussionsRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumGetForumDiscussionsValidateBeforeCall(modForumGetForumDiscussionsRequest, null);
        Type localVarReturnType = new TypeToken<ModForumGetForumDiscussions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of forum discussions optionally sorted and paginated. (asynchronously)
     * Returns a list of forum discussions optionally sorted and paginated.
     * @param modForumGetForumDiscussionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumGetForumDiscussionsAsync(ModForumGetForumDiscussionsRequest modForumGetForumDiscussionsRequest, final ApiCallback<ModForumGetForumDiscussions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumGetForumDiscussionsValidateBeforeCall(modForumGetForumDiscussionsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModForumGetForumDiscussions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumGetForumDiscussionsPaginated
     * @param modForumGetForumDiscussionsPaginatedRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumGetForumDiscussionsPaginatedCall(ModForumGetForumDiscussionsPaginatedRequest modForumGetForumDiscussionsPaginatedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumGetForumDiscussionsPaginatedRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_get_forum_discussions_paginated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumGetForumDiscussionsPaginatedValidateBeforeCall(ModForumGetForumDiscussionsPaginatedRequest modForumGetForumDiscussionsPaginatedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumGetForumDiscussionsPaginatedRequest' is set
        if (modForumGetForumDiscussionsPaginatedRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumGetForumDiscussionsPaginatedRequest' when calling modForumGetForumDiscussionsPaginated(Async)");
        }

        return modForumGetForumDiscussionsPaginatedCall(modForumGetForumDiscussionsPaginatedRequest, _callback);

    }

    /**
     * ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
     * ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
     * @param modForumGetForumDiscussionsPaginatedRequest  (required)
     * @return ModForumGetForumDiscussionsPaginated200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModForumGetForumDiscussionsPaginated200Response modForumGetForumDiscussionsPaginated(ModForumGetForumDiscussionsPaginatedRequest modForumGetForumDiscussionsPaginatedRequest) throws ApiException {
        ApiResponse<ModForumGetForumDiscussionsPaginated200Response> localVarResp = modForumGetForumDiscussionsPaginatedWithHttpInfo(modForumGetForumDiscussionsPaginatedRequest);
        return localVarResp.getData();
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
     * ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
     * @param modForumGetForumDiscussionsPaginatedRequest  (required)
     * @return ApiResponse&lt;ModForumGetForumDiscussionsPaginated200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModForumGetForumDiscussionsPaginated200Response> modForumGetForumDiscussionsPaginatedWithHttpInfo(ModForumGetForumDiscussionsPaginatedRequest modForumGetForumDiscussionsPaginatedRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumGetForumDiscussionsPaginatedValidateBeforeCall(modForumGetForumDiscussionsPaginatedRequest, null);
        Type localVarReturnType = new TypeToken<ModForumGetForumDiscussionsPaginated200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated. (asynchronously)
     * ** DEPRECATED ** Please do not call this function any more.                           Returns a list of forum discussions optionally sorted and paginated.
     * @param modForumGetForumDiscussionsPaginatedRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumGetForumDiscussionsPaginatedAsync(ModForumGetForumDiscussionsPaginatedRequest modForumGetForumDiscussionsPaginatedRequest, final ApiCallback<ModForumGetForumDiscussionsPaginated200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumGetForumDiscussionsPaginatedValidateBeforeCall(modForumGetForumDiscussionsPaginatedRequest, _callback);
        Type localVarReturnType = new TypeToken<ModForumGetForumDiscussionsPaginated200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumGetForumsByCourses
     * @param modForumGetForumsByCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumGetForumsByCoursesCall(ModForumGetForumsByCoursesRequest modForumGetForumsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumGetForumsByCoursesRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_get_forums_by_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumGetForumsByCoursesValidateBeforeCall(ModForumGetForumsByCoursesRequest modForumGetForumsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumGetForumsByCoursesRequest' is set
        if (modForumGetForumsByCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumGetForumsByCoursesRequest' when calling modForumGetForumsByCourses(Async)");
        }

        return modForumGetForumsByCoursesCall(modForumGetForumsByCoursesRequest, _callback);

    }

    /**
     * Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
     * Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
     * @param modForumGetForumsByCoursesRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modForumGetForumsByCourses(ModForumGetForumsByCoursesRequest modForumGetForumsByCoursesRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modForumGetForumsByCoursesWithHttpInfo(modForumGetForumsByCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
     * Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
     * @param modForumGetForumsByCoursesRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modForumGetForumsByCoursesWithHttpInfo(ModForumGetForumsByCoursesRequest modForumGetForumsByCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumGetForumsByCoursesValidateBeforeCall(modForumGetForumsByCoursesRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned. (asynchronously)
     * Returns a list of forum instances in a provided set of courses, if             no courses are provided then all the forum instances the user has access to will be             returned.
     * @param modForumGetForumsByCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumGetForumsByCoursesAsync(ModForumGetForumsByCoursesRequest modForumGetForumsByCoursesRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumGetForumsByCoursesValidateBeforeCall(modForumGetForumsByCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumPrepareDraftAreaForPost
     * @param modForumPrepareDraftAreaForPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumPrepareDraftAreaForPostCall(ModForumPrepareDraftAreaForPostRequest modForumPrepareDraftAreaForPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumPrepareDraftAreaForPostRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_prepare_draft_area_for_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumPrepareDraftAreaForPostValidateBeforeCall(ModForumPrepareDraftAreaForPostRequest modForumPrepareDraftAreaForPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumPrepareDraftAreaForPostRequest' is set
        if (modForumPrepareDraftAreaForPostRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumPrepareDraftAreaForPostRequest' when calling modForumPrepareDraftAreaForPost(Async)");
        }

        return modForumPrepareDraftAreaForPostCall(modForumPrepareDraftAreaForPostRequest, _callback);

    }

    /**
     * Prepares a draft area for editing a post.
     * Prepares a draft area for editing a post.
     * @param modForumPrepareDraftAreaForPostRequest  (required)
     * @return ModForumPrepareDraftAreaForPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModForumPrepareDraftAreaForPost200Response modForumPrepareDraftAreaForPost(ModForumPrepareDraftAreaForPostRequest modForumPrepareDraftAreaForPostRequest) throws ApiException {
        ApiResponse<ModForumPrepareDraftAreaForPost200Response> localVarResp = modForumPrepareDraftAreaForPostWithHttpInfo(modForumPrepareDraftAreaForPostRequest);
        return localVarResp.getData();
    }

    /**
     * Prepares a draft area for editing a post.
     * Prepares a draft area for editing a post.
     * @param modForumPrepareDraftAreaForPostRequest  (required)
     * @return ApiResponse&lt;ModForumPrepareDraftAreaForPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModForumPrepareDraftAreaForPost200Response> modForumPrepareDraftAreaForPostWithHttpInfo(ModForumPrepareDraftAreaForPostRequest modForumPrepareDraftAreaForPostRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumPrepareDraftAreaForPostValidateBeforeCall(modForumPrepareDraftAreaForPostRequest, null);
        Type localVarReturnType = new TypeToken<ModForumPrepareDraftAreaForPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Prepares a draft area for editing a post. (asynchronously)
     * Prepares a draft area for editing a post.
     * @param modForumPrepareDraftAreaForPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumPrepareDraftAreaForPostAsync(ModForumPrepareDraftAreaForPostRequest modForumPrepareDraftAreaForPostRequest, final ApiCallback<ModForumPrepareDraftAreaForPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumPrepareDraftAreaForPostValidateBeforeCall(modForumPrepareDraftAreaForPostRequest, _callback);
        Type localVarReturnType = new TypeToken<ModForumPrepareDraftAreaForPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumSetLockState
     * @param modForumSetLockStateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumSetLockStateCall(ModForumSetLockStateRequest modForumSetLockStateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumSetLockStateRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_set_lock_state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumSetLockStateValidateBeforeCall(ModForumSetLockStateRequest modForumSetLockStateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumSetLockStateRequest' is set
        if (modForumSetLockStateRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumSetLockStateRequest' when calling modForumSetLockState(Async)");
        }

        return modForumSetLockStateCall(modForumSetLockStateRequest, _callback);

    }

    /**
     * Set the lock state for the discussion
     * Set the lock state for the discussion
     * @param modForumSetLockStateRequest  (required)
     * @return ModForumSetLockState200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModForumSetLockState200Response modForumSetLockState(ModForumSetLockStateRequest modForumSetLockStateRequest) throws ApiException {
        ApiResponse<ModForumSetLockState200Response> localVarResp = modForumSetLockStateWithHttpInfo(modForumSetLockStateRequest);
        return localVarResp.getData();
    }

    /**
     * Set the lock state for the discussion
     * Set the lock state for the discussion
     * @param modForumSetLockStateRequest  (required)
     * @return ApiResponse&lt;ModForumSetLockState200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModForumSetLockState200Response> modForumSetLockStateWithHttpInfo(ModForumSetLockStateRequest modForumSetLockStateRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumSetLockStateValidateBeforeCall(modForumSetLockStateRequest, null);
        Type localVarReturnType = new TypeToken<ModForumSetLockState200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the lock state for the discussion (asynchronously)
     * Set the lock state for the discussion
     * @param modForumSetLockStateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumSetLockStateAsync(ModForumSetLockStateRequest modForumSetLockStateRequest, final ApiCallback<ModForumSetLockState200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumSetLockStateValidateBeforeCall(modForumSetLockStateRequest, _callback);
        Type localVarReturnType = new TypeToken<ModForumSetLockState200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumSetPinState
     * @param modForumSetPinStateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumSetPinStateCall(ModForumSetPinStateRequest modForumSetPinStateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumSetPinStateRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_set_pin_state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumSetPinStateValidateBeforeCall(ModForumSetPinStateRequest modForumSetPinStateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumSetPinStateRequest' is set
        if (modForumSetPinStateRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumSetPinStateRequest' when calling modForumSetPinState(Async)");
        }

        return modForumSetPinStateCall(modForumSetPinStateRequest, _callback);

    }

    /**
     * Set the pin state
     * Set the pin state
     * @param modForumSetPinStateRequest  (required)
     * @return ModForumSetPinState200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModForumSetPinState200Response modForumSetPinState(ModForumSetPinStateRequest modForumSetPinStateRequest) throws ApiException {
        ApiResponse<ModForumSetPinState200Response> localVarResp = modForumSetPinStateWithHttpInfo(modForumSetPinStateRequest);
        return localVarResp.getData();
    }

    /**
     * Set the pin state
     * Set the pin state
     * @param modForumSetPinStateRequest  (required)
     * @return ApiResponse&lt;ModForumSetPinState200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModForumSetPinState200Response> modForumSetPinStateWithHttpInfo(ModForumSetPinStateRequest modForumSetPinStateRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumSetPinStateValidateBeforeCall(modForumSetPinStateRequest, null);
        Type localVarReturnType = new TypeToken<ModForumSetPinState200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the pin state (asynchronously)
     * Set the pin state
     * @param modForumSetPinStateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumSetPinStateAsync(ModForumSetPinStateRequest modForumSetPinStateRequest, final ApiCallback<ModForumSetPinState200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumSetPinStateValidateBeforeCall(modForumSetPinStateRequest, _callback);
        Type localVarReturnType = new TypeToken<ModForumSetPinState200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumSetSubscriptionState
     * @param modForumSetSubscriptionStateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumSetSubscriptionStateCall(ModForumSetSubscriptionStateRequest modForumSetSubscriptionStateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumSetSubscriptionStateRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_set_subscription_state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumSetSubscriptionStateValidateBeforeCall(ModForumSetSubscriptionStateRequest modForumSetSubscriptionStateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumSetSubscriptionStateRequest' is set
        if (modForumSetSubscriptionStateRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumSetSubscriptionStateRequest' when calling modForumSetSubscriptionState(Async)");
        }

        return modForumSetSubscriptionStateCall(modForumSetSubscriptionStateRequest, _callback);

    }

    /**
     * Set the subscription state
     * Set the subscription state
     * @param modForumSetSubscriptionStateRequest  (required)
     * @return ModForumSetSubscriptionState200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModForumSetSubscriptionState200Response modForumSetSubscriptionState(ModForumSetSubscriptionStateRequest modForumSetSubscriptionStateRequest) throws ApiException {
        ApiResponse<ModForumSetSubscriptionState200Response> localVarResp = modForumSetSubscriptionStateWithHttpInfo(modForumSetSubscriptionStateRequest);
        return localVarResp.getData();
    }

    /**
     * Set the subscription state
     * Set the subscription state
     * @param modForumSetSubscriptionStateRequest  (required)
     * @return ApiResponse&lt;ModForumSetSubscriptionState200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModForumSetSubscriptionState200Response> modForumSetSubscriptionStateWithHttpInfo(ModForumSetSubscriptionStateRequest modForumSetSubscriptionStateRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumSetSubscriptionStateValidateBeforeCall(modForumSetSubscriptionStateRequest, null);
        Type localVarReturnType = new TypeToken<ModForumSetSubscriptionState200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the subscription state (asynchronously)
     * Set the subscription state
     * @param modForumSetSubscriptionStateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumSetSubscriptionStateAsync(ModForumSetSubscriptionStateRequest modForumSetSubscriptionStateRequest, final ApiCallback<ModForumSetSubscriptionState200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumSetSubscriptionStateValidateBeforeCall(modForumSetSubscriptionStateRequest, _callback);
        Type localVarReturnType = new TypeToken<ModForumSetSubscriptionState200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumToggleFavouriteState
     * @param modForumToggleFavouriteStateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumToggleFavouriteStateCall(ModForumToggleFavouriteStateRequest modForumToggleFavouriteStateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumToggleFavouriteStateRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_toggle_favourite_state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumToggleFavouriteStateValidateBeforeCall(ModForumToggleFavouriteStateRequest modForumToggleFavouriteStateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumToggleFavouriteStateRequest' is set
        if (modForumToggleFavouriteStateRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumToggleFavouriteStateRequest' when calling modForumToggleFavouriteState(Async)");
        }

        return modForumToggleFavouriteStateCall(modForumToggleFavouriteStateRequest, _callback);

    }

    /**
     * Toggle the favourite state
     * Toggle the favourite state
     * @param modForumToggleFavouriteStateRequest  (required)
     * @return ModForumSetSubscriptionState200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModForumSetSubscriptionState200Response modForumToggleFavouriteState(ModForumToggleFavouriteStateRequest modForumToggleFavouriteStateRequest) throws ApiException {
        ApiResponse<ModForumSetSubscriptionState200Response> localVarResp = modForumToggleFavouriteStateWithHttpInfo(modForumToggleFavouriteStateRequest);
        return localVarResp.getData();
    }

    /**
     * Toggle the favourite state
     * Toggle the favourite state
     * @param modForumToggleFavouriteStateRequest  (required)
     * @return ApiResponse&lt;ModForumSetSubscriptionState200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModForumSetSubscriptionState200Response> modForumToggleFavouriteStateWithHttpInfo(ModForumToggleFavouriteStateRequest modForumToggleFavouriteStateRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumToggleFavouriteStateValidateBeforeCall(modForumToggleFavouriteStateRequest, null);
        Type localVarReturnType = new TypeToken<ModForumSetSubscriptionState200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Toggle the favourite state (asynchronously)
     * Toggle the favourite state
     * @param modForumToggleFavouriteStateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumToggleFavouriteStateAsync(ModForumToggleFavouriteStateRequest modForumToggleFavouriteStateRequest, final ApiCallback<ModForumSetSubscriptionState200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumToggleFavouriteStateValidateBeforeCall(modForumToggleFavouriteStateRequest, _callback);
        Type localVarReturnType = new TypeToken<ModForumSetSubscriptionState200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumUpdateDiscussionPost
     * @param modForumUpdateDiscussionPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumUpdateDiscussionPostCall(ModForumUpdateDiscussionPostRequest modForumUpdateDiscussionPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumUpdateDiscussionPostRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_update_discussion_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumUpdateDiscussionPostValidateBeforeCall(ModForumUpdateDiscussionPostRequest modForumUpdateDiscussionPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumUpdateDiscussionPostRequest' is set
        if (modForumUpdateDiscussionPostRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumUpdateDiscussionPostRequest' when calling modForumUpdateDiscussionPost(Async)");
        }

        return modForumUpdateDiscussionPostCall(modForumUpdateDiscussionPostRequest, _callback);

    }

    /**
     * Updates a post or a discussion topic post.
     * Updates a post or a discussion topic post.
     * @param modForumUpdateDiscussionPostRequest  (required)
     * @return ModForumUpdateDiscussionPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModForumUpdateDiscussionPost200Response modForumUpdateDiscussionPost(ModForumUpdateDiscussionPostRequest modForumUpdateDiscussionPostRequest) throws ApiException {
        ApiResponse<ModForumUpdateDiscussionPost200Response> localVarResp = modForumUpdateDiscussionPostWithHttpInfo(modForumUpdateDiscussionPostRequest);
        return localVarResp.getData();
    }

    /**
     * Updates a post or a discussion topic post.
     * Updates a post or a discussion topic post.
     * @param modForumUpdateDiscussionPostRequest  (required)
     * @return ApiResponse&lt;ModForumUpdateDiscussionPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModForumUpdateDiscussionPost200Response> modForumUpdateDiscussionPostWithHttpInfo(ModForumUpdateDiscussionPostRequest modForumUpdateDiscussionPostRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumUpdateDiscussionPostValidateBeforeCall(modForumUpdateDiscussionPostRequest, null);
        Type localVarReturnType = new TypeToken<ModForumUpdateDiscussionPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a post or a discussion topic post. (asynchronously)
     * Updates a post or a discussion topic post.
     * @param modForumUpdateDiscussionPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumUpdateDiscussionPostAsync(ModForumUpdateDiscussionPostRequest modForumUpdateDiscussionPostRequest, final ApiCallback<ModForumUpdateDiscussionPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumUpdateDiscussionPostValidateBeforeCall(modForumUpdateDiscussionPostRequest, _callback);
        Type localVarReturnType = new TypeToken<ModForumUpdateDiscussionPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumViewForum
     * @param modForumViewForumRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumViewForumCall(ModForumViewForumRequest modForumViewForumRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumViewForumRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_view_forum";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumViewForumValidateBeforeCall(ModForumViewForumRequest modForumViewForumRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumViewForumRequest' is set
        if (modForumViewForumRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumViewForumRequest' when calling modForumViewForum(Async)");
        }

        return modForumViewForumCall(modForumViewForumRequest, _callback);

    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modForumViewForumRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modForumViewForum(ModForumViewForumRequest modForumViewForumRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modForumViewForumWithHttpInfo(modForumViewForumRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modForumViewForumRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modForumViewForumWithHttpInfo(ModForumViewForumRequest modForumViewForumRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumViewForumValidateBeforeCall(modForumViewForumRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the course module viewed event and update the module completion status. (asynchronously)
     * Trigger the course module viewed event and update the module completion status.
     * @param modForumViewForumRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumViewForumAsync(ModForumViewForumRequest modForumViewForumRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumViewForumValidateBeforeCall(modForumViewForumRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modForumViewForumDiscussion
     * @param modForumViewForumDiscussionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumViewForumDiscussionCall(ModForumViewForumDiscussionRequest modForumViewForumDiscussionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modForumViewForumDiscussionRequest;

        // create path and map variables
        String localVarPath = "/mod_forum_view_forum_discussion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modForumViewForumDiscussionValidateBeforeCall(ModForumViewForumDiscussionRequest modForumViewForumDiscussionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modForumViewForumDiscussionRequest' is set
        if (modForumViewForumDiscussionRequest == null) {
            throw new ApiException("Missing the required parameter 'modForumViewForumDiscussionRequest' when calling modForumViewForumDiscussion(Async)");
        }

        return modForumViewForumDiscussionCall(modForumViewForumDiscussionRequest, _callback);

    }

    /**
     * Trigger the forum discussion viewed event.
     * Trigger the forum discussion viewed event.
     * @param modForumViewForumDiscussionRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modForumViewForumDiscussion(ModForumViewForumDiscussionRequest modForumViewForumDiscussionRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modForumViewForumDiscussionWithHttpInfo(modForumViewForumDiscussionRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the forum discussion viewed event.
     * Trigger the forum discussion viewed event.
     * @param modForumViewForumDiscussionRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modForumViewForumDiscussionWithHttpInfo(ModForumViewForumDiscussionRequest modForumViewForumDiscussionRequest) throws ApiException {
        okhttp3.Call localVarCall = modForumViewForumDiscussionValidateBeforeCall(modForumViewForumDiscussionRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the forum discussion viewed event. (asynchronously)
     * Trigger the forum discussion viewed event.
     * @param modForumViewForumDiscussionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modForumViewForumDiscussionAsync(ModForumViewForumDiscussionRequest modForumViewForumDiscussionRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modForumViewForumDiscussionValidateBeforeCall(modForumViewForumDiscussionRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
