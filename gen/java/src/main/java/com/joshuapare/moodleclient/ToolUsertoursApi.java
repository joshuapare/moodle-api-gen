/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ToolUsertoursCompleteTourRequest;
import org.openapitools.client.model.ToolUsertoursFetchAndStartTour200Response;
import org.openapitools.client.model.ToolUsertoursFetchAndStartTourRequest;
import org.openapitools.client.model.ToolUsertoursResetTour200Response;
import org.openapitools.client.model.ToolUsertoursResetTourRequest;
import org.openapitools.client.model.ToolUsertoursStepShownRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ToolUsertoursApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ToolUsertoursApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ToolUsertoursApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for toolUsertoursCompleteTour
     * @param toolUsertoursCompleteTourRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolUsertoursCompleteTourCall(ToolUsertoursCompleteTourRequest toolUsertoursCompleteTourRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolUsertoursCompleteTourRequest;

        // create path and map variables
        String localVarPath = "/tool_usertours_complete_tour";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolUsertoursCompleteTourValidateBeforeCall(ToolUsertoursCompleteTourRequest toolUsertoursCompleteTourRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolUsertoursCompleteTourRequest' is set
        if (toolUsertoursCompleteTourRequest == null) {
            throw new ApiException("Missing the required parameter 'toolUsertoursCompleteTourRequest' when calling toolUsertoursCompleteTour(Async)");
        }

        return toolUsertoursCompleteTourCall(toolUsertoursCompleteTourRequest, _callback);

    }

    /**
     * Mark the specified tour as completed for the current user
     * Mark the specified tour as completed for the current user
     * @param toolUsertoursCompleteTourRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object toolUsertoursCompleteTour(ToolUsertoursCompleteTourRequest toolUsertoursCompleteTourRequest) throws ApiException {
        ApiResponse<Object> localVarResp = toolUsertoursCompleteTourWithHttpInfo(toolUsertoursCompleteTourRequest);
        return localVarResp.getData();
    }

    /**
     * Mark the specified tour as completed for the current user
     * Mark the specified tour as completed for the current user
     * @param toolUsertoursCompleteTourRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> toolUsertoursCompleteTourWithHttpInfo(ToolUsertoursCompleteTourRequest toolUsertoursCompleteTourRequest) throws ApiException {
        okhttp3.Call localVarCall = toolUsertoursCompleteTourValidateBeforeCall(toolUsertoursCompleteTourRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark the specified tour as completed for the current user (asynchronously)
     * Mark the specified tour as completed for the current user
     * @param toolUsertoursCompleteTourRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolUsertoursCompleteTourAsync(ToolUsertoursCompleteTourRequest toolUsertoursCompleteTourRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolUsertoursCompleteTourValidateBeforeCall(toolUsertoursCompleteTourRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolUsertoursFetchAndStartTour
     * @param toolUsertoursFetchAndStartTourRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolUsertoursFetchAndStartTourCall(ToolUsertoursFetchAndStartTourRequest toolUsertoursFetchAndStartTourRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolUsertoursFetchAndStartTourRequest;

        // create path and map variables
        String localVarPath = "/tool_usertours_fetch_and_start_tour";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolUsertoursFetchAndStartTourValidateBeforeCall(ToolUsertoursFetchAndStartTourRequest toolUsertoursFetchAndStartTourRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolUsertoursFetchAndStartTourRequest' is set
        if (toolUsertoursFetchAndStartTourRequest == null) {
            throw new ApiException("Missing the required parameter 'toolUsertoursFetchAndStartTourRequest' when calling toolUsertoursFetchAndStartTour(Async)");
        }

        return toolUsertoursFetchAndStartTourCall(toolUsertoursFetchAndStartTourRequest, _callback);

    }

    /**
     * Fetch the specified tour
     * Fetch the specified tour
     * @param toolUsertoursFetchAndStartTourRequest  (required)
     * @return ToolUsertoursFetchAndStartTour200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolUsertoursFetchAndStartTour200Response toolUsertoursFetchAndStartTour(ToolUsertoursFetchAndStartTourRequest toolUsertoursFetchAndStartTourRequest) throws ApiException {
        ApiResponse<ToolUsertoursFetchAndStartTour200Response> localVarResp = toolUsertoursFetchAndStartTourWithHttpInfo(toolUsertoursFetchAndStartTourRequest);
        return localVarResp.getData();
    }

    /**
     * Fetch the specified tour
     * Fetch the specified tour
     * @param toolUsertoursFetchAndStartTourRequest  (required)
     * @return ApiResponse&lt;ToolUsertoursFetchAndStartTour200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolUsertoursFetchAndStartTour200Response> toolUsertoursFetchAndStartTourWithHttpInfo(ToolUsertoursFetchAndStartTourRequest toolUsertoursFetchAndStartTourRequest) throws ApiException {
        okhttp3.Call localVarCall = toolUsertoursFetchAndStartTourValidateBeforeCall(toolUsertoursFetchAndStartTourRequest, null);
        Type localVarReturnType = new TypeToken<ToolUsertoursFetchAndStartTour200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch the specified tour (asynchronously)
     * Fetch the specified tour
     * @param toolUsertoursFetchAndStartTourRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolUsertoursFetchAndStartTourAsync(ToolUsertoursFetchAndStartTourRequest toolUsertoursFetchAndStartTourRequest, final ApiCallback<ToolUsertoursFetchAndStartTour200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolUsertoursFetchAndStartTourValidateBeforeCall(toolUsertoursFetchAndStartTourRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolUsertoursFetchAndStartTour200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolUsertoursResetTour
     * @param toolUsertoursResetTourRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolUsertoursResetTourCall(ToolUsertoursResetTourRequest toolUsertoursResetTourRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolUsertoursResetTourRequest;

        // create path and map variables
        String localVarPath = "/tool_usertours_reset_tour";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolUsertoursResetTourValidateBeforeCall(ToolUsertoursResetTourRequest toolUsertoursResetTourRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolUsertoursResetTourRequest' is set
        if (toolUsertoursResetTourRequest == null) {
            throw new ApiException("Missing the required parameter 'toolUsertoursResetTourRequest' when calling toolUsertoursResetTour(Async)");
        }

        return toolUsertoursResetTourCall(toolUsertoursResetTourRequest, _callback);

    }

    /**
     * Remove the specified tour
     * Remove the specified tour
     * @param toolUsertoursResetTourRequest  (required)
     * @return ToolUsertoursResetTour200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ToolUsertoursResetTour200Response toolUsertoursResetTour(ToolUsertoursResetTourRequest toolUsertoursResetTourRequest) throws ApiException {
        ApiResponse<ToolUsertoursResetTour200Response> localVarResp = toolUsertoursResetTourWithHttpInfo(toolUsertoursResetTourRequest);
        return localVarResp.getData();
    }

    /**
     * Remove the specified tour
     * Remove the specified tour
     * @param toolUsertoursResetTourRequest  (required)
     * @return ApiResponse&lt;ToolUsertoursResetTour200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ToolUsertoursResetTour200Response> toolUsertoursResetTourWithHttpInfo(ToolUsertoursResetTourRequest toolUsertoursResetTourRequest) throws ApiException {
        okhttp3.Call localVarCall = toolUsertoursResetTourValidateBeforeCall(toolUsertoursResetTourRequest, null);
        Type localVarReturnType = new TypeToken<ToolUsertoursResetTour200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove the specified tour (asynchronously)
     * Remove the specified tour
     * @param toolUsertoursResetTourRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolUsertoursResetTourAsync(ToolUsertoursResetTourRequest toolUsertoursResetTourRequest, final ApiCallback<ToolUsertoursResetTour200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolUsertoursResetTourValidateBeforeCall(toolUsertoursResetTourRequest, _callback);
        Type localVarReturnType = new TypeToken<ToolUsertoursResetTour200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for toolUsertoursStepShown
     * @param toolUsertoursStepShownRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolUsertoursStepShownCall(ToolUsertoursStepShownRequest toolUsertoursStepShownRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = toolUsertoursStepShownRequest;

        // create path and map variables
        String localVarPath = "/tool_usertours_step_shown";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toolUsertoursStepShownValidateBeforeCall(ToolUsertoursStepShownRequest toolUsertoursStepShownRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'toolUsertoursStepShownRequest' is set
        if (toolUsertoursStepShownRequest == null) {
            throw new ApiException("Missing the required parameter 'toolUsertoursStepShownRequest' when calling toolUsertoursStepShown(Async)");
        }

        return toolUsertoursStepShownCall(toolUsertoursStepShownRequest, _callback);

    }

    /**
     * Mark the specified step as completed for the current user
     * Mark the specified step as completed for the current user
     * @param toolUsertoursStepShownRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object toolUsertoursStepShown(ToolUsertoursStepShownRequest toolUsertoursStepShownRequest) throws ApiException {
        ApiResponse<Object> localVarResp = toolUsertoursStepShownWithHttpInfo(toolUsertoursStepShownRequest);
        return localVarResp.getData();
    }

    /**
     * Mark the specified step as completed for the current user
     * Mark the specified step as completed for the current user
     * @param toolUsertoursStepShownRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> toolUsertoursStepShownWithHttpInfo(ToolUsertoursStepShownRequest toolUsertoursStepShownRequest) throws ApiException {
        okhttp3.Call localVarCall = toolUsertoursStepShownValidateBeforeCall(toolUsertoursStepShownRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mark the specified step as completed for the current user (asynchronously)
     * Mark the specified step as completed for the current user
     * @param toolUsertoursStepShownRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call toolUsertoursStepShownAsync(ToolUsertoursStepShownRequest toolUsertoursStepShownRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = toolUsertoursStepShownValidateBeforeCall(toolUsertoursStepShownRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
