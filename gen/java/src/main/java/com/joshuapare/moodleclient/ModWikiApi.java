/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreH5pGetTrustedH5pFile200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModWikiEditPage200Response;
import org.openapitools.client.model.ModWikiEditPageRequest;
import org.openapitools.client.model.ModWikiGetPageContents200Response;
import org.openapitools.client.model.ModWikiGetPageContentsRequest;
import org.openapitools.client.model.ModWikiGetPageForEditing200Response;
import org.openapitools.client.model.ModWikiGetPageForEditingRequest;
import org.openapitools.client.model.ModWikiGetSubwikiFilesRequest;
import org.openapitools.client.model.ModWikiGetSubwikiPages200Response;
import org.openapitools.client.model.ModWikiGetSubwikiPagesRequest;
import org.openapitools.client.model.ModWikiGetSubwikis200Response;
import org.openapitools.client.model.ModWikiGetSubwikisRequest;
import org.openapitools.client.model.ModWikiGetWikisByCourses200Response;
import org.openapitools.client.model.ModWikiGetWikisByCoursesRequest;
import org.openapitools.client.model.ModWikiNewPage200Response;
import org.openapitools.client.model.ModWikiNewPageRequest;
import org.openapitools.client.model.ModWikiViewPage200Response;
import org.openapitools.client.model.ModWikiViewPageRequest;
import org.openapitools.client.model.ModWikiViewWiki200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModWikiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModWikiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModWikiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modWikiEditPage
     * @param modWikiEditPageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiEditPageCall(ModWikiEditPageRequest modWikiEditPageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWikiEditPageRequest;

        // create path and map variables
        String localVarPath = "/mod_wiki_edit_page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWikiEditPageValidateBeforeCall(ModWikiEditPageRequest modWikiEditPageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWikiEditPageRequest' is set
        if (modWikiEditPageRequest == null) {
            throw new ApiException("Missing the required parameter 'modWikiEditPageRequest' when calling modWikiEditPage(Async)");
        }

        return modWikiEditPageCall(modWikiEditPageRequest, _callback);

    }

    /**
     * Save the contents of a page.
     * Save the contents of a page.
     * @param modWikiEditPageRequest  (required)
     * @return ModWikiEditPage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWikiEditPage200Response modWikiEditPage(ModWikiEditPageRequest modWikiEditPageRequest) throws ApiException {
        ApiResponse<ModWikiEditPage200Response> localVarResp = modWikiEditPageWithHttpInfo(modWikiEditPageRequest);
        return localVarResp.getData();
    }

    /**
     * Save the contents of a page.
     * Save the contents of a page.
     * @param modWikiEditPageRequest  (required)
     * @return ApiResponse&lt;ModWikiEditPage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWikiEditPage200Response> modWikiEditPageWithHttpInfo(ModWikiEditPageRequest modWikiEditPageRequest) throws ApiException {
        okhttp3.Call localVarCall = modWikiEditPageValidateBeforeCall(modWikiEditPageRequest, null);
        Type localVarReturnType = new TypeToken<ModWikiEditPage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Save the contents of a page. (asynchronously)
     * Save the contents of a page.
     * @param modWikiEditPageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiEditPageAsync(ModWikiEditPageRequest modWikiEditPageRequest, final ApiCallback<ModWikiEditPage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWikiEditPageValidateBeforeCall(modWikiEditPageRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWikiEditPage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWikiGetPageContents
     * @param modWikiGetPageContentsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiGetPageContentsCall(ModWikiGetPageContentsRequest modWikiGetPageContentsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWikiGetPageContentsRequest;

        // create path and map variables
        String localVarPath = "/mod_wiki_get_page_contents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWikiGetPageContentsValidateBeforeCall(ModWikiGetPageContentsRequest modWikiGetPageContentsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWikiGetPageContentsRequest' is set
        if (modWikiGetPageContentsRequest == null) {
            throw new ApiException("Missing the required parameter 'modWikiGetPageContentsRequest' when calling modWikiGetPageContents(Async)");
        }

        return modWikiGetPageContentsCall(modWikiGetPageContentsRequest, _callback);

    }

    /**
     * Returns the contents of a page.
     * Returns the contents of a page.
     * @param modWikiGetPageContentsRequest  (required)
     * @return ModWikiGetPageContents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWikiGetPageContents200Response modWikiGetPageContents(ModWikiGetPageContentsRequest modWikiGetPageContentsRequest) throws ApiException {
        ApiResponse<ModWikiGetPageContents200Response> localVarResp = modWikiGetPageContentsWithHttpInfo(modWikiGetPageContentsRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the contents of a page.
     * Returns the contents of a page.
     * @param modWikiGetPageContentsRequest  (required)
     * @return ApiResponse&lt;ModWikiGetPageContents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWikiGetPageContents200Response> modWikiGetPageContentsWithHttpInfo(ModWikiGetPageContentsRequest modWikiGetPageContentsRequest) throws ApiException {
        okhttp3.Call localVarCall = modWikiGetPageContentsValidateBeforeCall(modWikiGetPageContentsRequest, null);
        Type localVarReturnType = new TypeToken<ModWikiGetPageContents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the contents of a page. (asynchronously)
     * Returns the contents of a page.
     * @param modWikiGetPageContentsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiGetPageContentsAsync(ModWikiGetPageContentsRequest modWikiGetPageContentsRequest, final ApiCallback<ModWikiGetPageContents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWikiGetPageContentsValidateBeforeCall(modWikiGetPageContentsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWikiGetPageContents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWikiGetPageForEditing
     * @param modWikiGetPageForEditingRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiGetPageForEditingCall(ModWikiGetPageForEditingRequest modWikiGetPageForEditingRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWikiGetPageForEditingRequest;

        // create path and map variables
        String localVarPath = "/mod_wiki_get_page_for_editing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWikiGetPageForEditingValidateBeforeCall(ModWikiGetPageForEditingRequest modWikiGetPageForEditingRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWikiGetPageForEditingRequest' is set
        if (modWikiGetPageForEditingRequest == null) {
            throw new ApiException("Missing the required parameter 'modWikiGetPageForEditingRequest' when calling modWikiGetPageForEditing(Async)");
        }

        return modWikiGetPageForEditingCall(modWikiGetPageForEditingRequest, _callback);

    }

    /**
     * Locks and retrieves info of page-section to be edited.
     * Locks and retrieves info of page-section to be edited.
     * @param modWikiGetPageForEditingRequest  (required)
     * @return ModWikiGetPageForEditing200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWikiGetPageForEditing200Response modWikiGetPageForEditing(ModWikiGetPageForEditingRequest modWikiGetPageForEditingRequest) throws ApiException {
        ApiResponse<ModWikiGetPageForEditing200Response> localVarResp = modWikiGetPageForEditingWithHttpInfo(modWikiGetPageForEditingRequest);
        return localVarResp.getData();
    }

    /**
     * Locks and retrieves info of page-section to be edited.
     * Locks and retrieves info of page-section to be edited.
     * @param modWikiGetPageForEditingRequest  (required)
     * @return ApiResponse&lt;ModWikiGetPageForEditing200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWikiGetPageForEditing200Response> modWikiGetPageForEditingWithHttpInfo(ModWikiGetPageForEditingRequest modWikiGetPageForEditingRequest) throws ApiException {
        okhttp3.Call localVarCall = modWikiGetPageForEditingValidateBeforeCall(modWikiGetPageForEditingRequest, null);
        Type localVarReturnType = new TypeToken<ModWikiGetPageForEditing200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Locks and retrieves info of page-section to be edited. (asynchronously)
     * Locks and retrieves info of page-section to be edited.
     * @param modWikiGetPageForEditingRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiGetPageForEditingAsync(ModWikiGetPageForEditingRequest modWikiGetPageForEditingRequest, final ApiCallback<ModWikiGetPageForEditing200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWikiGetPageForEditingValidateBeforeCall(modWikiGetPageForEditingRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWikiGetPageForEditing200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWikiGetSubwikiFiles
     * @param modWikiGetSubwikiFilesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiGetSubwikiFilesCall(ModWikiGetSubwikiFilesRequest modWikiGetSubwikiFilesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWikiGetSubwikiFilesRequest;

        // create path and map variables
        String localVarPath = "/mod_wiki_get_subwiki_files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWikiGetSubwikiFilesValidateBeforeCall(ModWikiGetSubwikiFilesRequest modWikiGetSubwikiFilesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWikiGetSubwikiFilesRequest' is set
        if (modWikiGetSubwikiFilesRequest == null) {
            throw new ApiException("Missing the required parameter 'modWikiGetSubwikiFilesRequest' when calling modWikiGetSubwikiFiles(Async)");
        }

        return modWikiGetSubwikiFilesCall(modWikiGetSubwikiFilesRequest, _callback);

    }

    /**
     * Returns the list of files for a specific subwiki.
     * Returns the list of files for a specific subwiki.
     * @param modWikiGetSubwikiFilesRequest  (required)
     * @return CoreH5pGetTrustedH5pFile200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreH5pGetTrustedH5pFile200Response modWikiGetSubwikiFiles(ModWikiGetSubwikiFilesRequest modWikiGetSubwikiFilesRequest) throws ApiException {
        ApiResponse<CoreH5pGetTrustedH5pFile200Response> localVarResp = modWikiGetSubwikiFilesWithHttpInfo(modWikiGetSubwikiFilesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the list of files for a specific subwiki.
     * Returns the list of files for a specific subwiki.
     * @param modWikiGetSubwikiFilesRequest  (required)
     * @return ApiResponse&lt;CoreH5pGetTrustedH5pFile200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreH5pGetTrustedH5pFile200Response> modWikiGetSubwikiFilesWithHttpInfo(ModWikiGetSubwikiFilesRequest modWikiGetSubwikiFilesRequest) throws ApiException {
        okhttp3.Call localVarCall = modWikiGetSubwikiFilesValidateBeforeCall(modWikiGetSubwikiFilesRequest, null);
        Type localVarReturnType = new TypeToken<CoreH5pGetTrustedH5pFile200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the list of files for a specific subwiki. (asynchronously)
     * Returns the list of files for a specific subwiki.
     * @param modWikiGetSubwikiFilesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiGetSubwikiFilesAsync(ModWikiGetSubwikiFilesRequest modWikiGetSubwikiFilesRequest, final ApiCallback<CoreH5pGetTrustedH5pFile200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWikiGetSubwikiFilesValidateBeforeCall(modWikiGetSubwikiFilesRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreH5pGetTrustedH5pFile200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWikiGetSubwikiPages
     * @param modWikiGetSubwikiPagesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiGetSubwikiPagesCall(ModWikiGetSubwikiPagesRequest modWikiGetSubwikiPagesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWikiGetSubwikiPagesRequest;

        // create path and map variables
        String localVarPath = "/mod_wiki_get_subwiki_pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWikiGetSubwikiPagesValidateBeforeCall(ModWikiGetSubwikiPagesRequest modWikiGetSubwikiPagesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWikiGetSubwikiPagesRequest' is set
        if (modWikiGetSubwikiPagesRequest == null) {
            throw new ApiException("Missing the required parameter 'modWikiGetSubwikiPagesRequest' when calling modWikiGetSubwikiPages(Async)");
        }

        return modWikiGetSubwikiPagesCall(modWikiGetSubwikiPagesRequest, _callback);

    }

    /**
     * Returns the list of pages for a specific subwiki.
     * Returns the list of pages for a specific subwiki.
     * @param modWikiGetSubwikiPagesRequest  (required)
     * @return ModWikiGetSubwikiPages200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWikiGetSubwikiPages200Response modWikiGetSubwikiPages(ModWikiGetSubwikiPagesRequest modWikiGetSubwikiPagesRequest) throws ApiException {
        ApiResponse<ModWikiGetSubwikiPages200Response> localVarResp = modWikiGetSubwikiPagesWithHttpInfo(modWikiGetSubwikiPagesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the list of pages for a specific subwiki.
     * Returns the list of pages for a specific subwiki.
     * @param modWikiGetSubwikiPagesRequest  (required)
     * @return ApiResponse&lt;ModWikiGetSubwikiPages200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWikiGetSubwikiPages200Response> modWikiGetSubwikiPagesWithHttpInfo(ModWikiGetSubwikiPagesRequest modWikiGetSubwikiPagesRequest) throws ApiException {
        okhttp3.Call localVarCall = modWikiGetSubwikiPagesValidateBeforeCall(modWikiGetSubwikiPagesRequest, null);
        Type localVarReturnType = new TypeToken<ModWikiGetSubwikiPages200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the list of pages for a specific subwiki. (asynchronously)
     * Returns the list of pages for a specific subwiki.
     * @param modWikiGetSubwikiPagesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiGetSubwikiPagesAsync(ModWikiGetSubwikiPagesRequest modWikiGetSubwikiPagesRequest, final ApiCallback<ModWikiGetSubwikiPages200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWikiGetSubwikiPagesValidateBeforeCall(modWikiGetSubwikiPagesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWikiGetSubwikiPages200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWikiGetSubwikis
     * @param modWikiGetSubwikisRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiGetSubwikisCall(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWikiGetSubwikisRequest;

        // create path and map variables
        String localVarPath = "/mod_wiki_get_subwikis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWikiGetSubwikisValidateBeforeCall(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWikiGetSubwikisRequest' is set
        if (modWikiGetSubwikisRequest == null) {
            throw new ApiException("Missing the required parameter 'modWikiGetSubwikisRequest' when calling modWikiGetSubwikis(Async)");
        }

        return modWikiGetSubwikisCall(modWikiGetSubwikisRequest, _callback);

    }

    /**
     * Returns the list of subwikis the user can see in a specific wiki.
     * Returns the list of subwikis the user can see in a specific wiki.
     * @param modWikiGetSubwikisRequest  (required)
     * @return ModWikiGetSubwikis200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWikiGetSubwikis200Response modWikiGetSubwikis(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest) throws ApiException {
        ApiResponse<ModWikiGetSubwikis200Response> localVarResp = modWikiGetSubwikisWithHttpInfo(modWikiGetSubwikisRequest);
        return localVarResp.getData();
    }

    /**
     * Returns the list of subwikis the user can see in a specific wiki.
     * Returns the list of subwikis the user can see in a specific wiki.
     * @param modWikiGetSubwikisRequest  (required)
     * @return ApiResponse&lt;ModWikiGetSubwikis200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWikiGetSubwikis200Response> modWikiGetSubwikisWithHttpInfo(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest) throws ApiException {
        okhttp3.Call localVarCall = modWikiGetSubwikisValidateBeforeCall(modWikiGetSubwikisRequest, null);
        Type localVarReturnType = new TypeToken<ModWikiGetSubwikis200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the list of subwikis the user can see in a specific wiki. (asynchronously)
     * Returns the list of subwikis the user can see in a specific wiki.
     * @param modWikiGetSubwikisRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiGetSubwikisAsync(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, final ApiCallback<ModWikiGetSubwikis200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWikiGetSubwikisValidateBeforeCall(modWikiGetSubwikisRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWikiGetSubwikis200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWikiGetWikisByCourses
     * @param modWikiGetWikisByCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiGetWikisByCoursesCall(ModWikiGetWikisByCoursesRequest modWikiGetWikisByCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWikiGetWikisByCoursesRequest;

        // create path and map variables
        String localVarPath = "/mod_wiki_get_wikis_by_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWikiGetWikisByCoursesValidateBeforeCall(ModWikiGetWikisByCoursesRequest modWikiGetWikisByCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWikiGetWikisByCoursesRequest' is set
        if (modWikiGetWikisByCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'modWikiGetWikisByCoursesRequest' when calling modWikiGetWikisByCourses(Async)");
        }

        return modWikiGetWikisByCoursesCall(modWikiGetWikisByCoursesRequest, _callback);

    }

    /**
     * Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
     * Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
     * @param modWikiGetWikisByCoursesRequest  (required)
     * @return ModWikiGetWikisByCourses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWikiGetWikisByCourses200Response modWikiGetWikisByCourses(ModWikiGetWikisByCoursesRequest modWikiGetWikisByCoursesRequest) throws ApiException {
        ApiResponse<ModWikiGetWikisByCourses200Response> localVarResp = modWikiGetWikisByCoursesWithHttpInfo(modWikiGetWikisByCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
     * Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
     * @param modWikiGetWikisByCoursesRequest  (required)
     * @return ApiResponse&lt;ModWikiGetWikisByCourses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWikiGetWikisByCourses200Response> modWikiGetWikisByCoursesWithHttpInfo(ModWikiGetWikisByCoursesRequest modWikiGetWikisByCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = modWikiGetWikisByCoursesValidateBeforeCall(modWikiGetWikisByCoursesRequest, null);
        Type localVarReturnType = new TypeToken<ModWikiGetWikisByCourses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned. (asynchronously)
     * Returns a list of wiki instances in a provided set of courses, if no courses are provided then all the wiki instances the user has access to will be returned.
     * @param modWikiGetWikisByCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiGetWikisByCoursesAsync(ModWikiGetWikisByCoursesRequest modWikiGetWikisByCoursesRequest, final ApiCallback<ModWikiGetWikisByCourses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWikiGetWikisByCoursesValidateBeforeCall(modWikiGetWikisByCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWikiGetWikisByCourses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWikiNewPage
     * @param modWikiNewPageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiNewPageCall(ModWikiNewPageRequest modWikiNewPageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWikiNewPageRequest;

        // create path and map variables
        String localVarPath = "/mod_wiki_new_page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWikiNewPageValidateBeforeCall(ModWikiNewPageRequest modWikiNewPageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWikiNewPageRequest' is set
        if (modWikiNewPageRequest == null) {
            throw new ApiException("Missing the required parameter 'modWikiNewPageRequest' when calling modWikiNewPage(Async)");
        }

        return modWikiNewPageCall(modWikiNewPageRequest, _callback);

    }

    /**
     * Create a new page in a subwiki.
     * Create a new page in a subwiki.
     * @param modWikiNewPageRequest  (required)
     * @return ModWikiNewPage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWikiNewPage200Response modWikiNewPage(ModWikiNewPageRequest modWikiNewPageRequest) throws ApiException {
        ApiResponse<ModWikiNewPage200Response> localVarResp = modWikiNewPageWithHttpInfo(modWikiNewPageRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new page in a subwiki.
     * Create a new page in a subwiki.
     * @param modWikiNewPageRequest  (required)
     * @return ApiResponse&lt;ModWikiNewPage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWikiNewPage200Response> modWikiNewPageWithHttpInfo(ModWikiNewPageRequest modWikiNewPageRequest) throws ApiException {
        okhttp3.Call localVarCall = modWikiNewPageValidateBeforeCall(modWikiNewPageRequest, null);
        Type localVarReturnType = new TypeToken<ModWikiNewPage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new page in a subwiki. (asynchronously)
     * Create a new page in a subwiki.
     * @param modWikiNewPageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiNewPageAsync(ModWikiNewPageRequest modWikiNewPageRequest, final ApiCallback<ModWikiNewPage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWikiNewPageValidateBeforeCall(modWikiNewPageRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWikiNewPage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWikiViewPage
     * @param modWikiViewPageRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiViewPageCall(ModWikiViewPageRequest modWikiViewPageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWikiViewPageRequest;

        // create path and map variables
        String localVarPath = "/mod_wiki_view_page";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWikiViewPageValidateBeforeCall(ModWikiViewPageRequest modWikiViewPageRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWikiViewPageRequest' is set
        if (modWikiViewPageRequest == null) {
            throw new ApiException("Missing the required parameter 'modWikiViewPageRequest' when calling modWikiViewPage(Async)");
        }

        return modWikiViewPageCall(modWikiViewPageRequest, _callback);

    }

    /**
     * Trigger the page viewed event and update the module completion status.
     * Trigger the page viewed event and update the module completion status.
     * @param modWikiViewPageRequest  (required)
     * @return ModWikiViewPage200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWikiViewPage200Response modWikiViewPage(ModWikiViewPageRequest modWikiViewPageRequest) throws ApiException {
        ApiResponse<ModWikiViewPage200Response> localVarResp = modWikiViewPageWithHttpInfo(modWikiViewPageRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the page viewed event and update the module completion status.
     * Trigger the page viewed event and update the module completion status.
     * @param modWikiViewPageRequest  (required)
     * @return ApiResponse&lt;ModWikiViewPage200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWikiViewPage200Response> modWikiViewPageWithHttpInfo(ModWikiViewPageRequest modWikiViewPageRequest) throws ApiException {
        okhttp3.Call localVarCall = modWikiViewPageValidateBeforeCall(modWikiViewPageRequest, null);
        Type localVarReturnType = new TypeToken<ModWikiViewPage200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the page viewed event and update the module completion status. (asynchronously)
     * Trigger the page viewed event and update the module completion status.
     * @param modWikiViewPageRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiViewPageAsync(ModWikiViewPageRequest modWikiViewPageRequest, final ApiCallback<ModWikiViewPage200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWikiViewPageValidateBeforeCall(modWikiViewPageRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWikiViewPage200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modWikiViewWiki
     * @param modWikiGetSubwikisRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiViewWikiCall(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modWikiGetSubwikisRequest;

        // create path and map variables
        String localVarPath = "/mod_wiki_view_wiki";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modWikiViewWikiValidateBeforeCall(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modWikiGetSubwikisRequest' is set
        if (modWikiGetSubwikisRequest == null) {
            throw new ApiException("Missing the required parameter 'modWikiGetSubwikisRequest' when calling modWikiViewWiki(Async)");
        }

        return modWikiViewWikiCall(modWikiGetSubwikisRequest, _callback);

    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modWikiGetSubwikisRequest  (required)
     * @return ModWikiViewWiki200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModWikiViewWiki200Response modWikiViewWiki(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest) throws ApiException {
        ApiResponse<ModWikiViewWiki200Response> localVarResp = modWikiViewWikiWithHttpInfo(modWikiGetSubwikisRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modWikiGetSubwikisRequest  (required)
     * @return ApiResponse&lt;ModWikiViewWiki200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModWikiViewWiki200Response> modWikiViewWikiWithHttpInfo(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest) throws ApiException {
        okhttp3.Call localVarCall = modWikiViewWikiValidateBeforeCall(modWikiGetSubwikisRequest, null);
        Type localVarReturnType = new TypeToken<ModWikiViewWiki200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the course module viewed event and update the module completion status. (asynchronously)
     * Trigger the course module viewed event and update the module completion status.
     * @param modWikiGetSubwikisRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modWikiViewWikiAsync(ModWikiGetSubwikisRequest modWikiGetSubwikisRequest, final ApiCallback<ModWikiViewWiki200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modWikiViewWikiValidateBeforeCall(modWikiGetSubwikisRequest, _callback);
        Type localVarReturnType = new TypeToken<ModWikiViewWiki200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
