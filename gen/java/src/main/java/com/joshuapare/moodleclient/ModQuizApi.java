/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreCalendarDeleteSubscription200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModChatGetChatsByCoursesRequest;
import org.openapitools.client.model.ModQuizAddRandomQuestions200Response;
import org.openapitools.client.model.ModQuizAddRandomQuestionsRequest;
import org.openapitools.client.model.ModQuizGetAttemptAccessInformation200Response;
import org.openapitools.client.model.ModQuizGetAttemptAccessInformationRequest;
import org.openapitools.client.model.ModQuizGetAttemptData200Response;
import org.openapitools.client.model.ModQuizGetAttemptDataRequest;
import org.openapitools.client.model.ModQuizGetAttemptReview200Response;
import org.openapitools.client.model.ModQuizGetAttemptReviewRequest;
import org.openapitools.client.model.ModQuizGetAttemptSummary200Response;
import org.openapitools.client.model.ModQuizGetAttemptSummaryRequest;
import org.openapitools.client.model.ModQuizGetCombinedReviewOptions200Response;
import org.openapitools.client.model.ModQuizGetCombinedReviewOptionsRequest;
import org.openapitools.client.model.ModQuizGetQuizAccessInformation200Response;
import org.openapitools.client.model.ModQuizGetQuizAccessInformationRequest;
import org.openapitools.client.model.ModQuizGetQuizFeedbackForGrade200Response;
import org.openapitools.client.model.ModQuizGetQuizFeedbackForGradeRequest;
import org.openapitools.client.model.ModQuizGetQuizRequiredQtypes200Response;
import org.openapitools.client.model.ModQuizGetQuizzesByCourses200Response;
import org.openapitools.client.model.ModQuizGetReopenAttemptConfirmationRequest;
import org.openapitools.client.model.ModQuizGetUserAttempts200Response;
import org.openapitools.client.model.ModQuizGetUserAttemptsRequest;
import org.openapitools.client.model.ModQuizGetUserBestGrade200Response;
import org.openapitools.client.model.ModQuizGetUserBestGradeRequest;
import org.openapitools.client.model.ModQuizProcessAttempt200Response;
import org.openapitools.client.model.ModQuizProcessAttemptRequest;
import org.openapitools.client.model.ModQuizReopenAttemptRequest;
import org.openapitools.client.model.ModQuizSaveAttemptRequest;
import org.openapitools.client.model.ModQuizSetQuestionVersion200Response;
import org.openapitools.client.model.ModQuizSetQuestionVersionRequest;
import org.openapitools.client.model.ModQuizStartAttempt200Response;
import org.openapitools.client.model.ModQuizStartAttemptRequest;
import org.openapitools.client.model.ModQuizUpdateFilterConditionRequest;
import org.openapitools.client.model.ModQuizViewAttemptRequest;
import org.openapitools.client.model.ModQuizViewAttemptReviewRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModQuizApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModQuizApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModQuizApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modQuizAddRandomQuestions
     * @param modQuizAddRandomQuestionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizAddRandomQuestionsCall(ModQuizAddRandomQuestionsRequest modQuizAddRandomQuestionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizAddRandomQuestionsRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_add_random_questions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizAddRandomQuestionsValidateBeforeCall(ModQuizAddRandomQuestionsRequest modQuizAddRandomQuestionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizAddRandomQuestionsRequest' is set
        if (modQuizAddRandomQuestionsRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizAddRandomQuestionsRequest' when calling modQuizAddRandomQuestions(Async)");
        }

        return modQuizAddRandomQuestionsCall(modQuizAddRandomQuestionsRequest, _callback);

    }

    /**
     * Add a number of random questions to a quiz.
     * Add a number of random questions to a quiz.
     * @param modQuizAddRandomQuestionsRequest  (required)
     * @return ModQuizAddRandomQuestions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModQuizAddRandomQuestions200Response modQuizAddRandomQuestions(ModQuizAddRandomQuestionsRequest modQuizAddRandomQuestionsRequest) throws ApiException {
        ApiResponse<ModQuizAddRandomQuestions200Response> localVarResp = modQuizAddRandomQuestionsWithHttpInfo(modQuizAddRandomQuestionsRequest);
        return localVarResp.getData();
    }

    /**
     * Add a number of random questions to a quiz.
     * Add a number of random questions to a quiz.
     * @param modQuizAddRandomQuestionsRequest  (required)
     * @return ApiResponse&lt;ModQuizAddRandomQuestions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModQuizAddRandomQuestions200Response> modQuizAddRandomQuestionsWithHttpInfo(ModQuizAddRandomQuestionsRequest modQuizAddRandomQuestionsRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizAddRandomQuestionsValidateBeforeCall(modQuizAddRandomQuestionsRequest, null);
        Type localVarReturnType = new TypeToken<ModQuizAddRandomQuestions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a number of random questions to a quiz. (asynchronously)
     * Add a number of random questions to a quiz.
     * @param modQuizAddRandomQuestionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizAddRandomQuestionsAsync(ModQuizAddRandomQuestionsRequest modQuizAddRandomQuestionsRequest, final ApiCallback<ModQuizAddRandomQuestions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizAddRandomQuestionsValidateBeforeCall(modQuizAddRandomQuestionsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModQuizAddRandomQuestions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizGetAttemptAccessInformation
     * @param modQuizGetAttemptAccessInformationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetAttemptAccessInformationCall(ModQuizGetAttemptAccessInformationRequest modQuizGetAttemptAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizGetAttemptAccessInformationRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_get_attempt_access_information";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizGetAttemptAccessInformationValidateBeforeCall(ModQuizGetAttemptAccessInformationRequest modQuizGetAttemptAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizGetAttemptAccessInformationRequest' is set
        if (modQuizGetAttemptAccessInformationRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizGetAttemptAccessInformationRequest' when calling modQuizGetAttemptAccessInformation(Async)");
        }

        return modQuizGetAttemptAccessInformationCall(modQuizGetAttemptAccessInformationRequest, _callback);

    }

    /**
     * Return access information for a given attempt in a quiz.
     * Return access information for a given attempt in a quiz.
     * @param modQuizGetAttemptAccessInformationRequest  (required)
     * @return ModQuizGetAttemptAccessInformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModQuizGetAttemptAccessInformation200Response modQuizGetAttemptAccessInformation(ModQuizGetAttemptAccessInformationRequest modQuizGetAttemptAccessInformationRequest) throws ApiException {
        ApiResponse<ModQuizGetAttemptAccessInformation200Response> localVarResp = modQuizGetAttemptAccessInformationWithHttpInfo(modQuizGetAttemptAccessInformationRequest);
        return localVarResp.getData();
    }

    /**
     * Return access information for a given attempt in a quiz.
     * Return access information for a given attempt in a quiz.
     * @param modQuizGetAttemptAccessInformationRequest  (required)
     * @return ApiResponse&lt;ModQuizGetAttemptAccessInformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModQuizGetAttemptAccessInformation200Response> modQuizGetAttemptAccessInformationWithHttpInfo(ModQuizGetAttemptAccessInformationRequest modQuizGetAttemptAccessInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizGetAttemptAccessInformationValidateBeforeCall(modQuizGetAttemptAccessInformationRequest, null);
        Type localVarReturnType = new TypeToken<ModQuizGetAttemptAccessInformation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return access information for a given attempt in a quiz. (asynchronously)
     * Return access information for a given attempt in a quiz.
     * @param modQuizGetAttemptAccessInformationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetAttemptAccessInformationAsync(ModQuizGetAttemptAccessInformationRequest modQuizGetAttemptAccessInformationRequest, final ApiCallback<ModQuizGetAttemptAccessInformation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizGetAttemptAccessInformationValidateBeforeCall(modQuizGetAttemptAccessInformationRequest, _callback);
        Type localVarReturnType = new TypeToken<ModQuizGetAttemptAccessInformation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizGetAttemptData
     * @param modQuizGetAttemptDataRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetAttemptDataCall(ModQuizGetAttemptDataRequest modQuizGetAttemptDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizGetAttemptDataRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_get_attempt_data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizGetAttemptDataValidateBeforeCall(ModQuizGetAttemptDataRequest modQuizGetAttemptDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizGetAttemptDataRequest' is set
        if (modQuizGetAttemptDataRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizGetAttemptDataRequest' when calling modQuizGetAttemptData(Async)");
        }

        return modQuizGetAttemptDataCall(modQuizGetAttemptDataRequest, _callback);

    }

    /**
     * Returns information for the given attempt page for a quiz attempt in progress.
     * Returns information for the given attempt page for a quiz attempt in progress.
     * @param modQuizGetAttemptDataRequest  (required)
     * @return ModQuizGetAttemptData200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModQuizGetAttemptData200Response modQuizGetAttemptData(ModQuizGetAttemptDataRequest modQuizGetAttemptDataRequest) throws ApiException {
        ApiResponse<ModQuizGetAttemptData200Response> localVarResp = modQuizGetAttemptDataWithHttpInfo(modQuizGetAttemptDataRequest);
        return localVarResp.getData();
    }

    /**
     * Returns information for the given attempt page for a quiz attempt in progress.
     * Returns information for the given attempt page for a quiz attempt in progress.
     * @param modQuizGetAttemptDataRequest  (required)
     * @return ApiResponse&lt;ModQuizGetAttemptData200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModQuizGetAttemptData200Response> modQuizGetAttemptDataWithHttpInfo(ModQuizGetAttemptDataRequest modQuizGetAttemptDataRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizGetAttemptDataValidateBeforeCall(modQuizGetAttemptDataRequest, null);
        Type localVarReturnType = new TypeToken<ModQuizGetAttemptData200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns information for the given attempt page for a quiz attempt in progress. (asynchronously)
     * Returns information for the given attempt page for a quiz attempt in progress.
     * @param modQuizGetAttemptDataRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetAttemptDataAsync(ModQuizGetAttemptDataRequest modQuizGetAttemptDataRequest, final ApiCallback<ModQuizGetAttemptData200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizGetAttemptDataValidateBeforeCall(modQuizGetAttemptDataRequest, _callback);
        Type localVarReturnType = new TypeToken<ModQuizGetAttemptData200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizGetAttemptReview
     * @param modQuizGetAttemptReviewRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetAttemptReviewCall(ModQuizGetAttemptReviewRequest modQuizGetAttemptReviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizGetAttemptReviewRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_get_attempt_review";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizGetAttemptReviewValidateBeforeCall(ModQuizGetAttemptReviewRequest modQuizGetAttemptReviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizGetAttemptReviewRequest' is set
        if (modQuizGetAttemptReviewRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizGetAttemptReviewRequest' when calling modQuizGetAttemptReview(Async)");
        }

        return modQuizGetAttemptReviewCall(modQuizGetAttemptReviewRequest, _callback);

    }

    /**
     * Returns review information for the given finished attempt, can be used by users or teachers.
     * Returns review information for the given finished attempt, can be used by users or teachers.
     * @param modQuizGetAttemptReviewRequest  (required)
     * @return ModQuizGetAttemptReview200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModQuizGetAttemptReview200Response modQuizGetAttemptReview(ModQuizGetAttemptReviewRequest modQuizGetAttemptReviewRequest) throws ApiException {
        ApiResponse<ModQuizGetAttemptReview200Response> localVarResp = modQuizGetAttemptReviewWithHttpInfo(modQuizGetAttemptReviewRequest);
        return localVarResp.getData();
    }

    /**
     * Returns review information for the given finished attempt, can be used by users or teachers.
     * Returns review information for the given finished attempt, can be used by users or teachers.
     * @param modQuizGetAttemptReviewRequest  (required)
     * @return ApiResponse&lt;ModQuizGetAttemptReview200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModQuizGetAttemptReview200Response> modQuizGetAttemptReviewWithHttpInfo(ModQuizGetAttemptReviewRequest modQuizGetAttemptReviewRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizGetAttemptReviewValidateBeforeCall(modQuizGetAttemptReviewRequest, null);
        Type localVarReturnType = new TypeToken<ModQuizGetAttemptReview200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns review information for the given finished attempt, can be used by users or teachers. (asynchronously)
     * Returns review information for the given finished attempt, can be used by users or teachers.
     * @param modQuizGetAttemptReviewRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetAttemptReviewAsync(ModQuizGetAttemptReviewRequest modQuizGetAttemptReviewRequest, final ApiCallback<ModQuizGetAttemptReview200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizGetAttemptReviewValidateBeforeCall(modQuizGetAttemptReviewRequest, _callback);
        Type localVarReturnType = new TypeToken<ModQuizGetAttemptReview200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizGetAttemptSummary
     * @param modQuizGetAttemptSummaryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetAttemptSummaryCall(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizGetAttemptSummaryRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_get_attempt_summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizGetAttemptSummaryValidateBeforeCall(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizGetAttemptSummaryRequest' is set
        if (modQuizGetAttemptSummaryRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizGetAttemptSummaryRequest' when calling modQuizGetAttemptSummary(Async)");
        }

        return modQuizGetAttemptSummaryCall(modQuizGetAttemptSummaryRequest, _callback);

    }

    /**
     * Returns a summary of a quiz attempt before it is submitted.
     * Returns a summary of a quiz attempt before it is submitted.
     * @param modQuizGetAttemptSummaryRequest  (required)
     * @return ModQuizGetAttemptSummary200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModQuizGetAttemptSummary200Response modQuizGetAttemptSummary(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest) throws ApiException {
        ApiResponse<ModQuizGetAttemptSummary200Response> localVarResp = modQuizGetAttemptSummaryWithHttpInfo(modQuizGetAttemptSummaryRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a summary of a quiz attempt before it is submitted.
     * Returns a summary of a quiz attempt before it is submitted.
     * @param modQuizGetAttemptSummaryRequest  (required)
     * @return ApiResponse&lt;ModQuizGetAttemptSummary200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModQuizGetAttemptSummary200Response> modQuizGetAttemptSummaryWithHttpInfo(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizGetAttemptSummaryValidateBeforeCall(modQuizGetAttemptSummaryRequest, null);
        Type localVarReturnType = new TypeToken<ModQuizGetAttemptSummary200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a summary of a quiz attempt before it is submitted. (asynchronously)
     * Returns a summary of a quiz attempt before it is submitted.
     * @param modQuizGetAttemptSummaryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetAttemptSummaryAsync(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, final ApiCallback<ModQuizGetAttemptSummary200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizGetAttemptSummaryValidateBeforeCall(modQuizGetAttemptSummaryRequest, _callback);
        Type localVarReturnType = new TypeToken<ModQuizGetAttemptSummary200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizGetCombinedReviewOptions
     * @param modQuizGetCombinedReviewOptionsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetCombinedReviewOptionsCall(ModQuizGetCombinedReviewOptionsRequest modQuizGetCombinedReviewOptionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizGetCombinedReviewOptionsRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_get_combined_review_options";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizGetCombinedReviewOptionsValidateBeforeCall(ModQuizGetCombinedReviewOptionsRequest modQuizGetCombinedReviewOptionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizGetCombinedReviewOptionsRequest' is set
        if (modQuizGetCombinedReviewOptionsRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizGetCombinedReviewOptionsRequest' when calling modQuizGetCombinedReviewOptions(Async)");
        }

        return modQuizGetCombinedReviewOptionsCall(modQuizGetCombinedReviewOptionsRequest, _callback);

    }

    /**
     * Combines the review options from a number of different quiz attempts.
     * Combines the review options from a number of different quiz attempts.
     * @param modQuizGetCombinedReviewOptionsRequest  (required)
     * @return ModQuizGetCombinedReviewOptions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModQuizGetCombinedReviewOptions200Response modQuizGetCombinedReviewOptions(ModQuizGetCombinedReviewOptionsRequest modQuizGetCombinedReviewOptionsRequest) throws ApiException {
        ApiResponse<ModQuizGetCombinedReviewOptions200Response> localVarResp = modQuizGetCombinedReviewOptionsWithHttpInfo(modQuizGetCombinedReviewOptionsRequest);
        return localVarResp.getData();
    }

    /**
     * Combines the review options from a number of different quiz attempts.
     * Combines the review options from a number of different quiz attempts.
     * @param modQuizGetCombinedReviewOptionsRequest  (required)
     * @return ApiResponse&lt;ModQuizGetCombinedReviewOptions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModQuizGetCombinedReviewOptions200Response> modQuizGetCombinedReviewOptionsWithHttpInfo(ModQuizGetCombinedReviewOptionsRequest modQuizGetCombinedReviewOptionsRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizGetCombinedReviewOptionsValidateBeforeCall(modQuizGetCombinedReviewOptionsRequest, null);
        Type localVarReturnType = new TypeToken<ModQuizGetCombinedReviewOptions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Combines the review options from a number of different quiz attempts. (asynchronously)
     * Combines the review options from a number of different quiz attempts.
     * @param modQuizGetCombinedReviewOptionsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetCombinedReviewOptionsAsync(ModQuizGetCombinedReviewOptionsRequest modQuizGetCombinedReviewOptionsRequest, final ApiCallback<ModQuizGetCombinedReviewOptions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizGetCombinedReviewOptionsValidateBeforeCall(modQuizGetCombinedReviewOptionsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModQuizGetCombinedReviewOptions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizGetQuizAccessInformation
     * @param modQuizGetQuizAccessInformationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetQuizAccessInformationCall(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizGetQuizAccessInformationRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_get_quiz_access_information";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizGetQuizAccessInformationValidateBeforeCall(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizGetQuizAccessInformationRequest' is set
        if (modQuizGetQuizAccessInformationRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizGetQuizAccessInformationRequest' when calling modQuizGetQuizAccessInformation(Async)");
        }

        return modQuizGetQuizAccessInformationCall(modQuizGetQuizAccessInformationRequest, _callback);

    }

    /**
     * Return access information for a given quiz.
     * Return access information for a given quiz.
     * @param modQuizGetQuizAccessInformationRequest  (required)
     * @return ModQuizGetQuizAccessInformation200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModQuizGetQuizAccessInformation200Response modQuizGetQuizAccessInformation(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest) throws ApiException {
        ApiResponse<ModQuizGetQuizAccessInformation200Response> localVarResp = modQuizGetQuizAccessInformationWithHttpInfo(modQuizGetQuizAccessInformationRequest);
        return localVarResp.getData();
    }

    /**
     * Return access information for a given quiz.
     * Return access information for a given quiz.
     * @param modQuizGetQuizAccessInformationRequest  (required)
     * @return ApiResponse&lt;ModQuizGetQuizAccessInformation200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModQuizGetQuizAccessInformation200Response> modQuizGetQuizAccessInformationWithHttpInfo(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizGetQuizAccessInformationValidateBeforeCall(modQuizGetQuizAccessInformationRequest, null);
        Type localVarReturnType = new TypeToken<ModQuizGetQuizAccessInformation200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return access information for a given quiz. (asynchronously)
     * Return access information for a given quiz.
     * @param modQuizGetQuizAccessInformationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetQuizAccessInformationAsync(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, final ApiCallback<ModQuizGetQuizAccessInformation200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizGetQuizAccessInformationValidateBeforeCall(modQuizGetQuizAccessInformationRequest, _callback);
        Type localVarReturnType = new TypeToken<ModQuizGetQuizAccessInformation200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizGetQuizFeedbackForGrade
     * @param modQuizGetQuizFeedbackForGradeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetQuizFeedbackForGradeCall(ModQuizGetQuizFeedbackForGradeRequest modQuizGetQuizFeedbackForGradeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizGetQuizFeedbackForGradeRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_get_quiz_feedback_for_grade";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizGetQuizFeedbackForGradeValidateBeforeCall(ModQuizGetQuizFeedbackForGradeRequest modQuizGetQuizFeedbackForGradeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizGetQuizFeedbackForGradeRequest' is set
        if (modQuizGetQuizFeedbackForGradeRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizGetQuizFeedbackForGradeRequest' when calling modQuizGetQuizFeedbackForGrade(Async)");
        }

        return modQuizGetQuizFeedbackForGradeCall(modQuizGetQuizFeedbackForGradeRequest, _callback);

    }

    /**
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     * @param modQuizGetQuizFeedbackForGradeRequest  (required)
     * @return ModQuizGetQuizFeedbackForGrade200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModQuizGetQuizFeedbackForGrade200Response modQuizGetQuizFeedbackForGrade(ModQuizGetQuizFeedbackForGradeRequest modQuizGetQuizFeedbackForGradeRequest) throws ApiException {
        ApiResponse<ModQuizGetQuizFeedbackForGrade200Response> localVarResp = modQuizGetQuizFeedbackForGradeWithHttpInfo(modQuizGetQuizFeedbackForGradeRequest);
        return localVarResp.getData();
    }

    /**
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     * @param modQuizGetQuizFeedbackForGradeRequest  (required)
     * @return ApiResponse&lt;ModQuizGetQuizFeedbackForGrade200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModQuizGetQuizFeedbackForGrade200Response> modQuizGetQuizFeedbackForGradeWithHttpInfo(ModQuizGetQuizFeedbackForGradeRequest modQuizGetQuizFeedbackForGradeRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizGetQuizFeedbackForGradeValidateBeforeCall(modQuizGetQuizFeedbackForGradeRequest, null);
        Type localVarReturnType = new TypeToken<ModQuizGetQuizFeedbackForGrade200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the feedback text that should be show to a student who got the given grade in the given quiz. (asynchronously)
     * Get the feedback text that should be show to a student who got the given grade in the given quiz.
     * @param modQuizGetQuizFeedbackForGradeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetQuizFeedbackForGradeAsync(ModQuizGetQuizFeedbackForGradeRequest modQuizGetQuizFeedbackForGradeRequest, final ApiCallback<ModQuizGetQuizFeedbackForGrade200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizGetQuizFeedbackForGradeValidateBeforeCall(modQuizGetQuizFeedbackForGradeRequest, _callback);
        Type localVarReturnType = new TypeToken<ModQuizGetQuizFeedbackForGrade200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizGetQuizRequiredQtypes
     * @param modQuizGetQuizAccessInformationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetQuizRequiredQtypesCall(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizGetQuizAccessInformationRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_get_quiz_required_qtypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizGetQuizRequiredQtypesValidateBeforeCall(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizGetQuizAccessInformationRequest' is set
        if (modQuizGetQuizAccessInformationRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizGetQuizAccessInformationRequest' when calling modQuizGetQuizRequiredQtypes(Async)");
        }

        return modQuizGetQuizRequiredQtypesCall(modQuizGetQuizAccessInformationRequest, _callback);

    }

    /**
     * Return the potential question types that would be required for a given quiz.
     * Return the potential question types that would be required for a given quiz.
     * @param modQuizGetQuizAccessInformationRequest  (required)
     * @return ModQuizGetQuizRequiredQtypes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModQuizGetQuizRequiredQtypes200Response modQuizGetQuizRequiredQtypes(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest) throws ApiException {
        ApiResponse<ModQuizGetQuizRequiredQtypes200Response> localVarResp = modQuizGetQuizRequiredQtypesWithHttpInfo(modQuizGetQuizAccessInformationRequest);
        return localVarResp.getData();
    }

    /**
     * Return the potential question types that would be required for a given quiz.
     * Return the potential question types that would be required for a given quiz.
     * @param modQuizGetQuizAccessInformationRequest  (required)
     * @return ApiResponse&lt;ModQuizGetQuizRequiredQtypes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModQuizGetQuizRequiredQtypes200Response> modQuizGetQuizRequiredQtypesWithHttpInfo(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizGetQuizRequiredQtypesValidateBeforeCall(modQuizGetQuizAccessInformationRequest, null);
        Type localVarReturnType = new TypeToken<ModQuizGetQuizRequiredQtypes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return the potential question types that would be required for a given quiz. (asynchronously)
     * Return the potential question types that would be required for a given quiz.
     * @param modQuizGetQuizAccessInformationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetQuizRequiredQtypesAsync(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, final ApiCallback<ModQuizGetQuizRequiredQtypes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizGetQuizRequiredQtypesValidateBeforeCall(modQuizGetQuizAccessInformationRequest, _callback);
        Type localVarReturnType = new TypeToken<ModQuizGetQuizRequiredQtypes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizGetQuizzesByCourses
     * @param modChatGetChatsByCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetQuizzesByCoursesCall(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChatGetChatsByCoursesRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_get_quizzes_by_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizGetQuizzesByCoursesValidateBeforeCall(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
        if (modChatGetChatsByCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'modChatGetChatsByCoursesRequest' when calling modQuizGetQuizzesByCourses(Async)");
        }

        return modQuizGetQuizzesByCoursesCall(modChatGetChatsByCoursesRequest, _callback);

    }

    /**
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @return ModQuizGetQuizzesByCourses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModQuizGetQuizzesByCourses200Response modQuizGetQuizzesByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest) throws ApiException {
        ApiResponse<ModQuizGetQuizzesByCourses200Response> localVarResp = modQuizGetQuizzesByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @return ApiResponse&lt;ModQuizGetQuizzesByCourses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModQuizGetQuizzesByCourses200Response> modQuizGetQuizzesByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizGetQuizzesByCoursesValidateBeforeCall(modChatGetChatsByCoursesRequest, null);
        Type localVarReturnType = new TypeToken<ModQuizGetQuizzesByCourses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned. (asynchronously)
     * Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetQuizzesByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback<ModQuizGetQuizzesByCourses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizGetQuizzesByCoursesValidateBeforeCall(modChatGetChatsByCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModQuizGetQuizzesByCourses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizGetReopenAttemptConfirmation
     * @param modQuizGetReopenAttemptConfirmationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation to show the user before the attempt is reopened. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetReopenAttemptConfirmationCall(ModQuizGetReopenAttemptConfirmationRequest modQuizGetReopenAttemptConfirmationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizGetReopenAttemptConfirmationRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_get_reopen_attempt_confirmation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizGetReopenAttemptConfirmationValidateBeforeCall(ModQuizGetReopenAttemptConfirmationRequest modQuizGetReopenAttemptConfirmationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizGetReopenAttemptConfirmationRequest' is set
        if (modQuizGetReopenAttemptConfirmationRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizGetReopenAttemptConfirmationRequest' when calling modQuizGetReopenAttemptConfirmation(Async)");
        }

        return modQuizGetReopenAttemptConfirmationCall(modQuizGetReopenAttemptConfirmationRequest, _callback);

    }

    /**
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     * @param modQuizGetReopenAttemptConfirmationRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation to show the user before the attempt is reopened. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modQuizGetReopenAttemptConfirmation(ModQuizGetReopenAttemptConfirmationRequest modQuizGetReopenAttemptConfirmationRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modQuizGetReopenAttemptConfirmationWithHttpInfo(modQuizGetReopenAttemptConfirmationRequest);
        return localVarResp.getData();
    }

    /**
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     * @param modQuizGetReopenAttemptConfirmationRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation to show the user before the attempt is reopened. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modQuizGetReopenAttemptConfirmationWithHttpInfo(ModQuizGetReopenAttemptConfirmationRequest modQuizGetReopenAttemptConfirmationRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizGetReopenAttemptConfirmationValidateBeforeCall(modQuizGetReopenAttemptConfirmationRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message. (asynchronously)
     * Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
     * @param modQuizGetReopenAttemptConfirmationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmation to show the user before the attempt is reopened. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetReopenAttemptConfirmationAsync(ModQuizGetReopenAttemptConfirmationRequest modQuizGetReopenAttemptConfirmationRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizGetReopenAttemptConfirmationValidateBeforeCall(modQuizGetReopenAttemptConfirmationRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizGetUserAttempts
     * @param modQuizGetUserAttemptsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetUserAttemptsCall(ModQuizGetUserAttemptsRequest modQuizGetUserAttemptsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizGetUserAttemptsRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_get_user_attempts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizGetUserAttemptsValidateBeforeCall(ModQuizGetUserAttemptsRequest modQuizGetUserAttemptsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizGetUserAttemptsRequest' is set
        if (modQuizGetUserAttemptsRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizGetUserAttemptsRequest' when calling modQuizGetUserAttempts(Async)");
        }

        return modQuizGetUserAttemptsCall(modQuizGetUserAttemptsRequest, _callback);

    }

    /**
     * Return a list of attempts for the given quiz and user.
     * Return a list of attempts for the given quiz and user.
     * @param modQuizGetUserAttemptsRequest  (required)
     * @return ModQuizGetUserAttempts200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModQuizGetUserAttempts200Response modQuizGetUserAttempts(ModQuizGetUserAttemptsRequest modQuizGetUserAttemptsRequest) throws ApiException {
        ApiResponse<ModQuizGetUserAttempts200Response> localVarResp = modQuizGetUserAttemptsWithHttpInfo(modQuizGetUserAttemptsRequest);
        return localVarResp.getData();
    }

    /**
     * Return a list of attempts for the given quiz and user.
     * Return a list of attempts for the given quiz and user.
     * @param modQuizGetUserAttemptsRequest  (required)
     * @return ApiResponse&lt;ModQuizGetUserAttempts200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModQuizGetUserAttempts200Response> modQuizGetUserAttemptsWithHttpInfo(ModQuizGetUserAttemptsRequest modQuizGetUserAttemptsRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizGetUserAttemptsValidateBeforeCall(modQuizGetUserAttemptsRequest, null);
        Type localVarReturnType = new TypeToken<ModQuizGetUserAttempts200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Return a list of attempts for the given quiz and user. (asynchronously)
     * Return a list of attempts for the given quiz and user.
     * @param modQuizGetUserAttemptsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetUserAttemptsAsync(ModQuizGetUserAttemptsRequest modQuizGetUserAttemptsRequest, final ApiCallback<ModQuizGetUserAttempts200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizGetUserAttemptsValidateBeforeCall(modQuizGetUserAttemptsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModQuizGetUserAttempts200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizGetUserBestGrade
     * @param modQuizGetUserBestGradeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetUserBestGradeCall(ModQuizGetUserBestGradeRequest modQuizGetUserBestGradeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizGetUserBestGradeRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_get_user_best_grade";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizGetUserBestGradeValidateBeforeCall(ModQuizGetUserBestGradeRequest modQuizGetUserBestGradeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizGetUserBestGradeRequest' is set
        if (modQuizGetUserBestGradeRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizGetUserBestGradeRequest' when calling modQuizGetUserBestGrade(Async)");
        }

        return modQuizGetUserBestGradeCall(modQuizGetUserBestGradeRequest, _callback);

    }

    /**
     * Get the best current grade for the given user on a quiz.
     * Get the best current grade for the given user on a quiz.
     * @param modQuizGetUserBestGradeRequest  (required)
     * @return ModQuizGetUserBestGrade200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModQuizGetUserBestGrade200Response modQuizGetUserBestGrade(ModQuizGetUserBestGradeRequest modQuizGetUserBestGradeRequest) throws ApiException {
        ApiResponse<ModQuizGetUserBestGrade200Response> localVarResp = modQuizGetUserBestGradeWithHttpInfo(modQuizGetUserBestGradeRequest);
        return localVarResp.getData();
    }

    /**
     * Get the best current grade for the given user on a quiz.
     * Get the best current grade for the given user on a quiz.
     * @param modQuizGetUserBestGradeRequest  (required)
     * @return ApiResponse&lt;ModQuizGetUserBestGrade200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModQuizGetUserBestGrade200Response> modQuizGetUserBestGradeWithHttpInfo(ModQuizGetUserBestGradeRequest modQuizGetUserBestGradeRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizGetUserBestGradeValidateBeforeCall(modQuizGetUserBestGradeRequest, null);
        Type localVarReturnType = new TypeToken<ModQuizGetUserBestGrade200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the best current grade for the given user on a quiz. (asynchronously)
     * Get the best current grade for the given user on a quiz.
     * @param modQuizGetUserBestGradeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizGetUserBestGradeAsync(ModQuizGetUserBestGradeRequest modQuizGetUserBestGradeRequest, final ApiCallback<ModQuizGetUserBestGrade200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizGetUserBestGradeValidateBeforeCall(modQuizGetUserBestGradeRequest, _callback);
        Type localVarReturnType = new TypeToken<ModQuizGetUserBestGrade200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizProcessAttempt
     * @param modQuizProcessAttemptRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizProcessAttemptCall(ModQuizProcessAttemptRequest modQuizProcessAttemptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizProcessAttemptRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_process_attempt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizProcessAttemptValidateBeforeCall(ModQuizProcessAttemptRequest modQuizProcessAttemptRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizProcessAttemptRequest' is set
        if (modQuizProcessAttemptRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizProcessAttemptRequest' when calling modQuizProcessAttempt(Async)");
        }

        return modQuizProcessAttemptCall(modQuizProcessAttemptRequest, _callback);

    }

    /**
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     * @param modQuizProcessAttemptRequest  (required)
     * @return ModQuizProcessAttempt200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModQuizProcessAttempt200Response modQuizProcessAttempt(ModQuizProcessAttemptRequest modQuizProcessAttemptRequest) throws ApiException {
        ApiResponse<ModQuizProcessAttempt200Response> localVarResp = modQuizProcessAttemptWithHttpInfo(modQuizProcessAttemptRequest);
        return localVarResp.getData();
    }

    /**
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     * @param modQuizProcessAttemptRequest  (required)
     * @return ApiResponse&lt;ModQuizProcessAttempt200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModQuizProcessAttempt200Response> modQuizProcessAttemptWithHttpInfo(ModQuizProcessAttemptRequest modQuizProcessAttemptRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizProcessAttemptValidateBeforeCall(modQuizProcessAttemptRequest, null);
        Type localVarReturnType = new TypeToken<ModQuizProcessAttempt200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Process responses during an attempt at a quiz and also deals with attempts finishing. (asynchronously)
     * Process responses during an attempt at a quiz and also deals with attempts finishing.
     * @param modQuizProcessAttemptRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizProcessAttemptAsync(ModQuizProcessAttemptRequest modQuizProcessAttemptRequest, final ApiCallback<ModQuizProcessAttempt200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizProcessAttemptValidateBeforeCall(modQuizProcessAttemptRequest, _callback);
        Type localVarReturnType = new TypeToken<ModQuizProcessAttempt200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizReopenAttempt
     * @param modQuizReopenAttemptRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizReopenAttemptCall(ModQuizReopenAttemptRequest modQuizReopenAttemptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizReopenAttemptRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_reopen_attempt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizReopenAttemptValidateBeforeCall(ModQuizReopenAttemptRequest modQuizReopenAttemptRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizReopenAttemptRequest' is set
        if (modQuizReopenAttemptRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizReopenAttemptRequest' when calling modQuizReopenAttempt(Async)");
        }

        return modQuizReopenAttemptCall(modQuizReopenAttemptRequest, _callback);

    }

    /**
     * Re-open an attempt that is currently in the never submitted state.
     * Re-open an attempt that is currently in the never submitted state.
     * @param modQuizReopenAttemptRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public Object modQuizReopenAttempt(ModQuizReopenAttemptRequest modQuizReopenAttemptRequest) throws ApiException {
        ApiResponse<Object> localVarResp = modQuizReopenAttemptWithHttpInfo(modQuizReopenAttemptRequest);
        return localVarResp.getData();
    }

    /**
     * Re-open an attempt that is currently in the never submitted state.
     * Re-open an attempt that is currently in the never submitted state.
     * @param modQuizReopenAttemptRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> modQuizReopenAttemptWithHttpInfo(ModQuizReopenAttemptRequest modQuizReopenAttemptRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizReopenAttemptValidateBeforeCall(modQuizReopenAttemptRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Re-open an attempt that is currently in the never submitted state. (asynchronously)
     * Re-open an attempt that is currently in the never submitted state.
     * @param modQuizReopenAttemptRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizReopenAttemptAsync(ModQuizReopenAttemptRequest modQuizReopenAttemptRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizReopenAttemptValidateBeforeCall(modQuizReopenAttemptRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizSaveAttempt
     * @param modQuizSaveAttemptRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizSaveAttemptCall(ModQuizSaveAttemptRequest modQuizSaveAttemptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizSaveAttemptRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_save_attempt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizSaveAttemptValidateBeforeCall(ModQuizSaveAttemptRequest modQuizSaveAttemptRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizSaveAttemptRequest' is set
        if (modQuizSaveAttemptRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizSaveAttemptRequest' when calling modQuizSaveAttempt(Async)");
        }

        return modQuizSaveAttemptCall(modQuizSaveAttemptRequest, _callback);

    }

    /**
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     * @param modQuizSaveAttemptRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modQuizSaveAttempt(ModQuizSaveAttemptRequest modQuizSaveAttemptRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modQuizSaveAttemptWithHttpInfo(modQuizSaveAttemptRequest);
        return localVarResp.getData();
    }

    /**
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     * @param modQuizSaveAttemptRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modQuizSaveAttemptWithHttpInfo(ModQuizSaveAttemptRequest modQuizSaveAttemptRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizSaveAttemptValidateBeforeCall(modQuizSaveAttemptRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature. (asynchronously)
     * Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
     * @param modQuizSaveAttemptRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizSaveAttemptAsync(ModQuizSaveAttemptRequest modQuizSaveAttemptRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizSaveAttemptValidateBeforeCall(modQuizSaveAttemptRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizSetQuestionVersion
     * @param modQuizSetQuestionVersionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizSetQuestionVersionCall(ModQuizSetQuestionVersionRequest modQuizSetQuestionVersionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizSetQuestionVersionRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_set_question_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizSetQuestionVersionValidateBeforeCall(ModQuizSetQuestionVersionRequest modQuizSetQuestionVersionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizSetQuestionVersionRequest' is set
        if (modQuizSetQuestionVersionRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizSetQuestionVersionRequest' when calling modQuizSetQuestionVersion(Async)");
        }

        return modQuizSetQuestionVersionCall(modQuizSetQuestionVersionRequest, _callback);

    }

    /**
     * Set the version of question that would be required for a given quiz.
     * Set the version of question that would be required for a given quiz.
     * @param modQuizSetQuestionVersionRequest  (required)
     * @return ModQuizSetQuestionVersion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModQuizSetQuestionVersion200Response modQuizSetQuestionVersion(ModQuizSetQuestionVersionRequest modQuizSetQuestionVersionRequest) throws ApiException {
        ApiResponse<ModQuizSetQuestionVersion200Response> localVarResp = modQuizSetQuestionVersionWithHttpInfo(modQuizSetQuestionVersionRequest);
        return localVarResp.getData();
    }

    /**
     * Set the version of question that would be required for a given quiz.
     * Set the version of question that would be required for a given quiz.
     * @param modQuizSetQuestionVersionRequest  (required)
     * @return ApiResponse&lt;ModQuizSetQuestionVersion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModQuizSetQuestionVersion200Response> modQuizSetQuestionVersionWithHttpInfo(ModQuizSetQuestionVersionRequest modQuizSetQuestionVersionRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizSetQuestionVersionValidateBeforeCall(modQuizSetQuestionVersionRequest, null);
        Type localVarReturnType = new TypeToken<ModQuizSetQuestionVersion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set the version of question that would be required for a given quiz. (asynchronously)
     * Set the version of question that would be required for a given quiz.
     * @param modQuizSetQuestionVersionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizSetQuestionVersionAsync(ModQuizSetQuestionVersionRequest modQuizSetQuestionVersionRequest, final ApiCallback<ModQuizSetQuestionVersion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizSetQuestionVersionValidateBeforeCall(modQuizSetQuestionVersionRequest, _callback);
        Type localVarReturnType = new TypeToken<ModQuizSetQuestionVersion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizStartAttempt
     * @param modQuizStartAttemptRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizStartAttemptCall(ModQuizStartAttemptRequest modQuizStartAttemptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizStartAttemptRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_start_attempt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizStartAttemptValidateBeforeCall(ModQuizStartAttemptRequest modQuizStartAttemptRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizStartAttemptRequest' is set
        if (modQuizStartAttemptRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizStartAttemptRequest' when calling modQuizStartAttempt(Async)");
        }

        return modQuizStartAttemptCall(modQuizStartAttemptRequest, _callback);

    }

    /**
     * Starts a new attempt at a quiz.
     * Starts a new attempt at a quiz.
     * @param modQuizStartAttemptRequest  (required)
     * @return ModQuizStartAttempt200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModQuizStartAttempt200Response modQuizStartAttempt(ModQuizStartAttemptRequest modQuizStartAttemptRequest) throws ApiException {
        ApiResponse<ModQuizStartAttempt200Response> localVarResp = modQuizStartAttemptWithHttpInfo(modQuizStartAttemptRequest);
        return localVarResp.getData();
    }

    /**
     * Starts a new attempt at a quiz.
     * Starts a new attempt at a quiz.
     * @param modQuizStartAttemptRequest  (required)
     * @return ApiResponse&lt;ModQuizStartAttempt200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModQuizStartAttempt200Response> modQuizStartAttemptWithHttpInfo(ModQuizStartAttemptRequest modQuizStartAttemptRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizStartAttemptValidateBeforeCall(modQuizStartAttemptRequest, null);
        Type localVarReturnType = new TypeToken<ModQuizStartAttempt200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Starts a new attempt at a quiz. (asynchronously)
     * Starts a new attempt at a quiz.
     * @param modQuizStartAttemptRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizStartAttemptAsync(ModQuizStartAttemptRequest modQuizStartAttemptRequest, final ApiCallback<ModQuizStartAttempt200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizStartAttemptValidateBeforeCall(modQuizStartAttemptRequest, _callback);
        Type localVarReturnType = new TypeToken<ModQuizStartAttempt200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizUpdateFilterCondition
     * @param modQuizUpdateFilterConditionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizUpdateFilterConditionCall(ModQuizUpdateFilterConditionRequest modQuizUpdateFilterConditionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizUpdateFilterConditionRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_update_filter_condition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizUpdateFilterConditionValidateBeforeCall(ModQuizUpdateFilterConditionRequest modQuizUpdateFilterConditionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizUpdateFilterConditionRequest' is set
        if (modQuizUpdateFilterConditionRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizUpdateFilterConditionRequest' when calling modQuizUpdateFilterCondition(Async)");
        }

        return modQuizUpdateFilterConditionCall(modQuizUpdateFilterConditionRequest, _callback);

    }

    /**
     * Update filter condition for a random question slot.
     * Update filter condition for a random question slot.
     * @param modQuizUpdateFilterConditionRequest  (required)
     * @return ModQuizAddRandomQuestions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModQuizAddRandomQuestions200Response modQuizUpdateFilterCondition(ModQuizUpdateFilterConditionRequest modQuizUpdateFilterConditionRequest) throws ApiException {
        ApiResponse<ModQuizAddRandomQuestions200Response> localVarResp = modQuizUpdateFilterConditionWithHttpInfo(modQuizUpdateFilterConditionRequest);
        return localVarResp.getData();
    }

    /**
     * Update filter condition for a random question slot.
     * Update filter condition for a random question slot.
     * @param modQuizUpdateFilterConditionRequest  (required)
     * @return ApiResponse&lt;ModQuizAddRandomQuestions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModQuizAddRandomQuestions200Response> modQuizUpdateFilterConditionWithHttpInfo(ModQuizUpdateFilterConditionRequest modQuizUpdateFilterConditionRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizUpdateFilterConditionValidateBeforeCall(modQuizUpdateFilterConditionRequest, null);
        Type localVarReturnType = new TypeToken<ModQuizAddRandomQuestions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update filter condition for a random question slot. (asynchronously)
     * Update filter condition for a random question slot.
     * @param modQuizUpdateFilterConditionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizUpdateFilterConditionAsync(ModQuizUpdateFilterConditionRequest modQuizUpdateFilterConditionRequest, final ApiCallback<ModQuizAddRandomQuestions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizUpdateFilterConditionValidateBeforeCall(modQuizUpdateFilterConditionRequest, _callback);
        Type localVarReturnType = new TypeToken<ModQuizAddRandomQuestions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizViewAttempt
     * @param modQuizViewAttemptRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizViewAttemptCall(ModQuizViewAttemptRequest modQuizViewAttemptRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizViewAttemptRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_view_attempt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizViewAttemptValidateBeforeCall(ModQuizViewAttemptRequest modQuizViewAttemptRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizViewAttemptRequest' is set
        if (modQuizViewAttemptRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizViewAttemptRequest' when calling modQuizViewAttempt(Async)");
        }

        return modQuizViewAttemptCall(modQuizViewAttemptRequest, _callback);

    }

    /**
     * Trigger the attempt viewed event.
     * Trigger the attempt viewed event.
     * @param modQuizViewAttemptRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modQuizViewAttempt(ModQuizViewAttemptRequest modQuizViewAttemptRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modQuizViewAttemptWithHttpInfo(modQuizViewAttemptRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the attempt viewed event.
     * Trigger the attempt viewed event.
     * @param modQuizViewAttemptRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modQuizViewAttemptWithHttpInfo(ModQuizViewAttemptRequest modQuizViewAttemptRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizViewAttemptValidateBeforeCall(modQuizViewAttemptRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the attempt viewed event. (asynchronously)
     * Trigger the attempt viewed event.
     * @param modQuizViewAttemptRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizViewAttemptAsync(ModQuizViewAttemptRequest modQuizViewAttemptRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizViewAttemptValidateBeforeCall(modQuizViewAttemptRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizViewAttemptReview
     * @param modQuizViewAttemptReviewRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizViewAttemptReviewCall(ModQuizViewAttemptReviewRequest modQuizViewAttemptReviewRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizViewAttemptReviewRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_view_attempt_review";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizViewAttemptReviewValidateBeforeCall(ModQuizViewAttemptReviewRequest modQuizViewAttemptReviewRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizViewAttemptReviewRequest' is set
        if (modQuizViewAttemptReviewRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizViewAttemptReviewRequest' when calling modQuizViewAttemptReview(Async)");
        }

        return modQuizViewAttemptReviewCall(modQuizViewAttemptReviewRequest, _callback);

    }

    /**
     * Trigger the attempt reviewed event.
     * Trigger the attempt reviewed event.
     * @param modQuizViewAttemptReviewRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modQuizViewAttemptReview(ModQuizViewAttemptReviewRequest modQuizViewAttemptReviewRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modQuizViewAttemptReviewWithHttpInfo(modQuizViewAttemptReviewRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the attempt reviewed event.
     * Trigger the attempt reviewed event.
     * @param modQuizViewAttemptReviewRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modQuizViewAttemptReviewWithHttpInfo(ModQuizViewAttemptReviewRequest modQuizViewAttemptReviewRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizViewAttemptReviewValidateBeforeCall(modQuizViewAttemptReviewRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the attempt reviewed event. (asynchronously)
     * Trigger the attempt reviewed event.
     * @param modQuizViewAttemptReviewRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizViewAttemptReviewAsync(ModQuizViewAttemptReviewRequest modQuizViewAttemptReviewRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizViewAttemptReviewValidateBeforeCall(modQuizViewAttemptReviewRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizViewAttemptSummary
     * @param modQuizGetAttemptSummaryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizViewAttemptSummaryCall(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizGetAttemptSummaryRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_view_attempt_summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizViewAttemptSummaryValidateBeforeCall(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizGetAttemptSummaryRequest' is set
        if (modQuizGetAttemptSummaryRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizGetAttemptSummaryRequest' when calling modQuizViewAttemptSummary(Async)");
        }

        return modQuizViewAttemptSummaryCall(modQuizGetAttemptSummaryRequest, _callback);

    }

    /**
     * Trigger the attempt summary viewed event.
     * Trigger the attempt summary viewed event.
     * @param modQuizGetAttemptSummaryRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modQuizViewAttemptSummary(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modQuizViewAttemptSummaryWithHttpInfo(modQuizGetAttemptSummaryRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the attempt summary viewed event.
     * Trigger the attempt summary viewed event.
     * @param modQuizGetAttemptSummaryRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modQuizViewAttemptSummaryWithHttpInfo(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizViewAttemptSummaryValidateBeforeCall(modQuizGetAttemptSummaryRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the attempt summary viewed event. (asynchronously)
     * Trigger the attempt summary viewed event.
     * @param modQuizGetAttemptSummaryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizViewAttemptSummaryAsync(ModQuizGetAttemptSummaryRequest modQuizGetAttemptSummaryRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizViewAttemptSummaryValidateBeforeCall(modQuizGetAttemptSummaryRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modQuizViewQuiz
     * @param modQuizGetQuizAccessInformationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizViewQuizCall(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modQuizGetQuizAccessInformationRequest;

        // create path and map variables
        String localVarPath = "/mod_quiz_view_quiz";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modQuizViewQuizValidateBeforeCall(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modQuizGetQuizAccessInformationRequest' is set
        if (modQuizGetQuizAccessInformationRequest == null) {
            throw new ApiException("Missing the required parameter 'modQuizGetQuizAccessInformationRequest' when calling modQuizViewQuiz(Async)");
        }

        return modQuizViewQuizCall(modQuizGetQuizAccessInformationRequest, _callback);

    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modQuizGetQuizAccessInformationRequest  (required)
     * @return CoreCalendarDeleteSubscription200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreCalendarDeleteSubscription200Response modQuizViewQuiz(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest) throws ApiException {
        ApiResponse<CoreCalendarDeleteSubscription200Response> localVarResp = modQuizViewQuizWithHttpInfo(modQuizGetQuizAccessInformationRequest);
        return localVarResp.getData();
    }

    /**
     * Trigger the course module viewed event and update the module completion status.
     * Trigger the course module viewed event and update the module completion status.
     * @param modQuizGetQuizAccessInformationRequest  (required)
     * @return ApiResponse&lt;CoreCalendarDeleteSubscription200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreCalendarDeleteSubscription200Response> modQuizViewQuizWithHttpInfo(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest) throws ApiException {
        okhttp3.Call localVarCall = modQuizViewQuizValidateBeforeCall(modQuizGetQuizAccessInformationRequest, null);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trigger the course module viewed event and update the module completion status. (asynchronously)
     * Trigger the course module viewed event and update the module completion status.
     * @param modQuizGetQuizAccessInformationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modQuizViewQuizAsync(ModQuizGetQuizAccessInformationRequest modQuizGetQuizAccessInformationRequest, final ApiCallback<CoreCalendarDeleteSubscription200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modQuizViewQuizValidateBeforeCall(modQuizGetQuizAccessInformationRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreCalendarDeleteSubscription200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
