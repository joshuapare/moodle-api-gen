/*
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.joshuapare.moodleclient;

import com.joshuapare.ApiCallback;
import com.joshuapare.ApiClient;
import com.joshuapare.ApiException;
import com.joshuapare.ApiResponse;
import com.joshuapare.Configuration;
import com.joshuapare.Pair;
import com.joshuapare.ProgressRequestBody;
import com.joshuapare.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CoreContentbankRenameContent200Response;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ModChatGetChatsByCoursesRequest;
import org.openapitools.client.model.ModGlossaryAddEntry200Response;
import org.openapitools.client.model.ModGlossaryAddEntryRequest;
import org.openapitools.client.model.ModGlossaryDeleteEntryRequest;
import org.openapitools.client.model.ModGlossaryGetAuthors200Response;
import org.openapitools.client.model.ModGlossaryGetAuthorsRequest;
import org.openapitools.client.model.ModGlossaryGetCategories200Response;
import org.openapitools.client.model.ModGlossaryGetCategoriesRequest;
import org.openapitools.client.model.ModGlossaryGetEntriesByAuthor200Response;
import org.openapitools.client.model.ModGlossaryGetEntriesByAuthorId200Response;
import org.openapitools.client.model.ModGlossaryGetEntriesByAuthorIdRequest;
import org.openapitools.client.model.ModGlossaryGetEntriesByAuthorRequest;
import org.openapitools.client.model.ModGlossaryGetEntriesByCategory200Response;
import org.openapitools.client.model.ModGlossaryGetEntriesByCategoryRequest;
import org.openapitools.client.model.ModGlossaryGetEntriesByDateRequest;
import org.openapitools.client.model.ModGlossaryGetEntriesByLetterRequest;
import org.openapitools.client.model.ModGlossaryGetEntriesBySearchRequest;
import org.openapitools.client.model.ModGlossaryGetEntriesByTermRequest;
import org.openapitools.client.model.ModGlossaryGetEntriesToApproveRequest;
import org.openapitools.client.model.ModGlossaryGetEntryById200Response;
import org.openapitools.client.model.ModGlossaryGetEntryByIdRequest;
import org.openapitools.client.model.ModGlossaryGetGlossariesByCourses200Response;
import org.openapitools.client.model.ModGlossaryPrepareEntryForEdition200Response;
import org.openapitools.client.model.ModGlossaryPrepareEntryForEditionRequest;
import org.openapitools.client.model.ModGlossaryUpdateEntry200Response;
import org.openapitools.client.model.ModGlossaryUpdateEntryRequest;
import org.openapitools.client.model.ModGlossaryViewEntry200Response;
import org.openapitools.client.model.ModGlossaryViewGlossary200Response;
import org.openapitools.client.model.ModGlossaryViewGlossaryRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModGlossaryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ModGlossaryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModGlossaryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modGlossaryAddEntry
     * @param modGlossaryAddEntryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryAddEntryCall(ModGlossaryAddEntryRequest modGlossaryAddEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryAddEntryRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_add_entry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryAddEntryValidateBeforeCall(ModGlossaryAddEntryRequest modGlossaryAddEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryAddEntryRequest' is set
        if (modGlossaryAddEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryAddEntryRequest' when calling modGlossaryAddEntry(Async)");
        }

        return modGlossaryAddEntryCall(modGlossaryAddEntryRequest, _callback);

    }

    /**
     * Add a new entry to a given glossary
     * Add a new entry to a given glossary
     * @param modGlossaryAddEntryRequest  (required)
     * @return ModGlossaryAddEntry200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryAddEntry200Response modGlossaryAddEntry(ModGlossaryAddEntryRequest modGlossaryAddEntryRequest) throws ApiException {
        ApiResponse<ModGlossaryAddEntry200Response> localVarResp = modGlossaryAddEntryWithHttpInfo(modGlossaryAddEntryRequest);
        return localVarResp.getData();
    }

    /**
     * Add a new entry to a given glossary
     * Add a new entry to a given glossary
     * @param modGlossaryAddEntryRequest  (required)
     * @return ApiResponse&lt;ModGlossaryAddEntry200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryAddEntry200Response> modGlossaryAddEntryWithHttpInfo(ModGlossaryAddEntryRequest modGlossaryAddEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryAddEntryValidateBeforeCall(modGlossaryAddEntryRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryAddEntry200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new entry to a given glossary (asynchronously)
     * Add a new entry to a given glossary
     * @param modGlossaryAddEntryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryAddEntryAsync(ModGlossaryAddEntryRequest modGlossaryAddEntryRequest, final ApiCallback<ModGlossaryAddEntry200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryAddEntryValidateBeforeCall(modGlossaryAddEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryAddEntry200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryDeleteEntry
     * @param modGlossaryDeleteEntryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryDeleteEntryCall(ModGlossaryDeleteEntryRequest modGlossaryDeleteEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryDeleteEntryRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_delete_entry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryDeleteEntryValidateBeforeCall(ModGlossaryDeleteEntryRequest modGlossaryDeleteEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryDeleteEntryRequest' is set
        if (modGlossaryDeleteEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryDeleteEntryRequest' when calling modGlossaryDeleteEntry(Async)");
        }

        return modGlossaryDeleteEntryCall(modGlossaryDeleteEntryRequest, _callback);

    }

    /**
     * Delete the given entry from the glossary.
     * Delete the given entry from the glossary.
     * @param modGlossaryDeleteEntryRequest  (required)
     * @return CoreContentbankRenameContent200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public CoreContentbankRenameContent200Response modGlossaryDeleteEntry(ModGlossaryDeleteEntryRequest modGlossaryDeleteEntryRequest) throws ApiException {
        ApiResponse<CoreContentbankRenameContent200Response> localVarResp = modGlossaryDeleteEntryWithHttpInfo(modGlossaryDeleteEntryRequest);
        return localVarResp.getData();
    }

    /**
     * Delete the given entry from the glossary.
     * Delete the given entry from the glossary.
     * @param modGlossaryDeleteEntryRequest  (required)
     * @return ApiResponse&lt;CoreContentbankRenameContent200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CoreContentbankRenameContent200Response> modGlossaryDeleteEntryWithHttpInfo(ModGlossaryDeleteEntryRequest modGlossaryDeleteEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryDeleteEntryValidateBeforeCall(modGlossaryDeleteEntryRequest, null);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the given entry from the glossary. (asynchronously)
     * Delete the given entry from the glossary.
     * @param modGlossaryDeleteEntryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryDeleteEntryAsync(ModGlossaryDeleteEntryRequest modGlossaryDeleteEntryRequest, final ApiCallback<CoreContentbankRenameContent200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryDeleteEntryValidateBeforeCall(modGlossaryDeleteEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<CoreContentbankRenameContent200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryGetAuthors
     * @param modGlossaryGetAuthorsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetAuthorsCall(ModGlossaryGetAuthorsRequest modGlossaryGetAuthorsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryGetAuthorsRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_get_authors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryGetAuthorsValidateBeforeCall(ModGlossaryGetAuthorsRequest modGlossaryGetAuthorsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryGetAuthorsRequest' is set
        if (modGlossaryGetAuthorsRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryGetAuthorsRequest' when calling modGlossaryGetAuthors(Async)");
        }

        return modGlossaryGetAuthorsCall(modGlossaryGetAuthorsRequest, _callback);

    }

    /**
     * Get the authors.
     * Get the authors.
     * @param modGlossaryGetAuthorsRequest  (required)
     * @return ModGlossaryGetAuthors200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryGetAuthors200Response modGlossaryGetAuthors(ModGlossaryGetAuthorsRequest modGlossaryGetAuthorsRequest) throws ApiException {
        ApiResponse<ModGlossaryGetAuthors200Response> localVarResp = modGlossaryGetAuthorsWithHttpInfo(modGlossaryGetAuthorsRequest);
        return localVarResp.getData();
    }

    /**
     * Get the authors.
     * Get the authors.
     * @param modGlossaryGetAuthorsRequest  (required)
     * @return ApiResponse&lt;ModGlossaryGetAuthors200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryGetAuthors200Response> modGlossaryGetAuthorsWithHttpInfo(ModGlossaryGetAuthorsRequest modGlossaryGetAuthorsRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryGetAuthorsValidateBeforeCall(modGlossaryGetAuthorsRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryGetAuthors200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the authors. (asynchronously)
     * Get the authors.
     * @param modGlossaryGetAuthorsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetAuthorsAsync(ModGlossaryGetAuthorsRequest modGlossaryGetAuthorsRequest, final ApiCallback<ModGlossaryGetAuthors200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryGetAuthorsValidateBeforeCall(modGlossaryGetAuthorsRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryGetAuthors200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryGetCategories
     * @param modGlossaryGetCategoriesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetCategoriesCall(ModGlossaryGetCategoriesRequest modGlossaryGetCategoriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryGetCategoriesRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_get_categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryGetCategoriesValidateBeforeCall(ModGlossaryGetCategoriesRequest modGlossaryGetCategoriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryGetCategoriesRequest' is set
        if (modGlossaryGetCategoriesRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryGetCategoriesRequest' when calling modGlossaryGetCategories(Async)");
        }

        return modGlossaryGetCategoriesCall(modGlossaryGetCategoriesRequest, _callback);

    }

    /**
     * Get the categories.
     * Get the categories.
     * @param modGlossaryGetCategoriesRequest  (required)
     * @return ModGlossaryGetCategories200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryGetCategories200Response modGlossaryGetCategories(ModGlossaryGetCategoriesRequest modGlossaryGetCategoriesRequest) throws ApiException {
        ApiResponse<ModGlossaryGetCategories200Response> localVarResp = modGlossaryGetCategoriesWithHttpInfo(modGlossaryGetCategoriesRequest);
        return localVarResp.getData();
    }

    /**
     * Get the categories.
     * Get the categories.
     * @param modGlossaryGetCategoriesRequest  (required)
     * @return ApiResponse&lt;ModGlossaryGetCategories200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryGetCategories200Response> modGlossaryGetCategoriesWithHttpInfo(ModGlossaryGetCategoriesRequest modGlossaryGetCategoriesRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryGetCategoriesValidateBeforeCall(modGlossaryGetCategoriesRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryGetCategories200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the categories. (asynchronously)
     * Get the categories.
     * @param modGlossaryGetCategoriesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetCategoriesAsync(ModGlossaryGetCategoriesRequest modGlossaryGetCategoriesRequest, final ApiCallback<ModGlossaryGetCategories200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryGetCategoriesValidateBeforeCall(modGlossaryGetCategoriesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryGetCategories200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryGetEntriesByAuthor
     * @param modGlossaryGetEntriesByAuthorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntriesByAuthorCall(ModGlossaryGetEntriesByAuthorRequest modGlossaryGetEntriesByAuthorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryGetEntriesByAuthorRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_get_entries_by_author";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryGetEntriesByAuthorValidateBeforeCall(ModGlossaryGetEntriesByAuthorRequest modGlossaryGetEntriesByAuthorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryGetEntriesByAuthorRequest' is set
        if (modGlossaryGetEntriesByAuthorRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryGetEntriesByAuthorRequest' when calling modGlossaryGetEntriesByAuthor(Async)");
        }

        return modGlossaryGetEntriesByAuthorCall(modGlossaryGetEntriesByAuthorRequest, _callback);

    }

    /**
     * Browse entries by author.
     * Browse entries by author.
     * @param modGlossaryGetEntriesByAuthorRequest  (required)
     * @return ModGlossaryGetEntriesByAuthor200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryGetEntriesByAuthor200Response modGlossaryGetEntriesByAuthor(ModGlossaryGetEntriesByAuthorRequest modGlossaryGetEntriesByAuthorRequest) throws ApiException {
        ApiResponse<ModGlossaryGetEntriesByAuthor200Response> localVarResp = modGlossaryGetEntriesByAuthorWithHttpInfo(modGlossaryGetEntriesByAuthorRequest);
        return localVarResp.getData();
    }

    /**
     * Browse entries by author.
     * Browse entries by author.
     * @param modGlossaryGetEntriesByAuthorRequest  (required)
     * @return ApiResponse&lt;ModGlossaryGetEntriesByAuthor200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryGetEntriesByAuthor200Response> modGlossaryGetEntriesByAuthorWithHttpInfo(ModGlossaryGetEntriesByAuthorRequest modGlossaryGetEntriesByAuthorRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryGetEntriesByAuthorValidateBeforeCall(modGlossaryGetEntriesByAuthorRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntriesByAuthor200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Browse entries by author. (asynchronously)
     * Browse entries by author.
     * @param modGlossaryGetEntriesByAuthorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntriesByAuthorAsync(ModGlossaryGetEntriesByAuthorRequest modGlossaryGetEntriesByAuthorRequest, final ApiCallback<ModGlossaryGetEntriesByAuthor200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryGetEntriesByAuthorValidateBeforeCall(modGlossaryGetEntriesByAuthorRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntriesByAuthor200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryGetEntriesByAuthorId
     * @param modGlossaryGetEntriesByAuthorIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntriesByAuthorIdCall(ModGlossaryGetEntriesByAuthorIdRequest modGlossaryGetEntriesByAuthorIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryGetEntriesByAuthorIdRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_get_entries_by_author_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryGetEntriesByAuthorIdValidateBeforeCall(ModGlossaryGetEntriesByAuthorIdRequest modGlossaryGetEntriesByAuthorIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryGetEntriesByAuthorIdRequest' is set
        if (modGlossaryGetEntriesByAuthorIdRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryGetEntriesByAuthorIdRequest' when calling modGlossaryGetEntriesByAuthorId(Async)");
        }

        return modGlossaryGetEntriesByAuthorIdCall(modGlossaryGetEntriesByAuthorIdRequest, _callback);

    }

    /**
     * Browse entries by author ID.
     * Browse entries by author ID.
     * @param modGlossaryGetEntriesByAuthorIdRequest  (required)
     * @return ModGlossaryGetEntriesByAuthorId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryGetEntriesByAuthorId200Response modGlossaryGetEntriesByAuthorId(ModGlossaryGetEntriesByAuthorIdRequest modGlossaryGetEntriesByAuthorIdRequest) throws ApiException {
        ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResp = modGlossaryGetEntriesByAuthorIdWithHttpInfo(modGlossaryGetEntriesByAuthorIdRequest);
        return localVarResp.getData();
    }

    /**
     * Browse entries by author ID.
     * Browse entries by author ID.
     * @param modGlossaryGetEntriesByAuthorIdRequest  (required)
     * @return ApiResponse&lt;ModGlossaryGetEntriesByAuthorId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> modGlossaryGetEntriesByAuthorIdWithHttpInfo(ModGlossaryGetEntriesByAuthorIdRequest modGlossaryGetEntriesByAuthorIdRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryGetEntriesByAuthorIdValidateBeforeCall(modGlossaryGetEntriesByAuthorIdRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntriesByAuthorId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Browse entries by author ID. (asynchronously)
     * Browse entries by author ID.
     * @param modGlossaryGetEntriesByAuthorIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntriesByAuthorIdAsync(ModGlossaryGetEntriesByAuthorIdRequest modGlossaryGetEntriesByAuthorIdRequest, final ApiCallback<ModGlossaryGetEntriesByAuthorId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryGetEntriesByAuthorIdValidateBeforeCall(modGlossaryGetEntriesByAuthorIdRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntriesByAuthorId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryGetEntriesByCategory
     * @param modGlossaryGetEntriesByCategoryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntriesByCategoryCall(ModGlossaryGetEntriesByCategoryRequest modGlossaryGetEntriesByCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryGetEntriesByCategoryRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_get_entries_by_category";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryGetEntriesByCategoryValidateBeforeCall(ModGlossaryGetEntriesByCategoryRequest modGlossaryGetEntriesByCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryGetEntriesByCategoryRequest' is set
        if (modGlossaryGetEntriesByCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryGetEntriesByCategoryRequest' when calling modGlossaryGetEntriesByCategory(Async)");
        }

        return modGlossaryGetEntriesByCategoryCall(modGlossaryGetEntriesByCategoryRequest, _callback);

    }

    /**
     * Browse entries by category.
     * Browse entries by category.
     * @param modGlossaryGetEntriesByCategoryRequest  (required)
     * @return ModGlossaryGetEntriesByCategory200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryGetEntriesByCategory200Response modGlossaryGetEntriesByCategory(ModGlossaryGetEntriesByCategoryRequest modGlossaryGetEntriesByCategoryRequest) throws ApiException {
        ApiResponse<ModGlossaryGetEntriesByCategory200Response> localVarResp = modGlossaryGetEntriesByCategoryWithHttpInfo(modGlossaryGetEntriesByCategoryRequest);
        return localVarResp.getData();
    }

    /**
     * Browse entries by category.
     * Browse entries by category.
     * @param modGlossaryGetEntriesByCategoryRequest  (required)
     * @return ApiResponse&lt;ModGlossaryGetEntriesByCategory200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryGetEntriesByCategory200Response> modGlossaryGetEntriesByCategoryWithHttpInfo(ModGlossaryGetEntriesByCategoryRequest modGlossaryGetEntriesByCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryGetEntriesByCategoryValidateBeforeCall(modGlossaryGetEntriesByCategoryRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntriesByCategory200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Browse entries by category. (asynchronously)
     * Browse entries by category.
     * @param modGlossaryGetEntriesByCategoryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntriesByCategoryAsync(ModGlossaryGetEntriesByCategoryRequest modGlossaryGetEntriesByCategoryRequest, final ApiCallback<ModGlossaryGetEntriesByCategory200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryGetEntriesByCategoryValidateBeforeCall(modGlossaryGetEntriesByCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntriesByCategory200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryGetEntriesByDate
     * @param modGlossaryGetEntriesByDateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntriesByDateCall(ModGlossaryGetEntriesByDateRequest modGlossaryGetEntriesByDateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryGetEntriesByDateRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_get_entries_by_date";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryGetEntriesByDateValidateBeforeCall(ModGlossaryGetEntriesByDateRequest modGlossaryGetEntriesByDateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryGetEntriesByDateRequest' is set
        if (modGlossaryGetEntriesByDateRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryGetEntriesByDateRequest' when calling modGlossaryGetEntriesByDate(Async)");
        }

        return modGlossaryGetEntriesByDateCall(modGlossaryGetEntriesByDateRequest, _callback);

    }

    /**
     * Browse entries by date.
     * Browse entries by date.
     * @param modGlossaryGetEntriesByDateRequest  (required)
     * @return ModGlossaryGetEntriesByAuthorId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryGetEntriesByAuthorId200Response modGlossaryGetEntriesByDate(ModGlossaryGetEntriesByDateRequest modGlossaryGetEntriesByDateRequest) throws ApiException {
        ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResp = modGlossaryGetEntriesByDateWithHttpInfo(modGlossaryGetEntriesByDateRequest);
        return localVarResp.getData();
    }

    /**
     * Browse entries by date.
     * Browse entries by date.
     * @param modGlossaryGetEntriesByDateRequest  (required)
     * @return ApiResponse&lt;ModGlossaryGetEntriesByAuthorId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> modGlossaryGetEntriesByDateWithHttpInfo(ModGlossaryGetEntriesByDateRequest modGlossaryGetEntriesByDateRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryGetEntriesByDateValidateBeforeCall(modGlossaryGetEntriesByDateRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntriesByAuthorId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Browse entries by date. (asynchronously)
     * Browse entries by date.
     * @param modGlossaryGetEntriesByDateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntriesByDateAsync(ModGlossaryGetEntriesByDateRequest modGlossaryGetEntriesByDateRequest, final ApiCallback<ModGlossaryGetEntriesByAuthorId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryGetEntriesByDateValidateBeforeCall(modGlossaryGetEntriesByDateRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntriesByAuthorId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryGetEntriesByLetter
     * @param modGlossaryGetEntriesByLetterRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntriesByLetterCall(ModGlossaryGetEntriesByLetterRequest modGlossaryGetEntriesByLetterRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryGetEntriesByLetterRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_get_entries_by_letter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryGetEntriesByLetterValidateBeforeCall(ModGlossaryGetEntriesByLetterRequest modGlossaryGetEntriesByLetterRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryGetEntriesByLetterRequest' is set
        if (modGlossaryGetEntriesByLetterRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryGetEntriesByLetterRequest' when calling modGlossaryGetEntriesByLetter(Async)");
        }

        return modGlossaryGetEntriesByLetterCall(modGlossaryGetEntriesByLetterRequest, _callback);

    }

    /**
     * Browse entries by letter.
     * Browse entries by letter.
     * @param modGlossaryGetEntriesByLetterRequest  (required)
     * @return ModGlossaryGetEntriesByAuthorId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryGetEntriesByAuthorId200Response modGlossaryGetEntriesByLetter(ModGlossaryGetEntriesByLetterRequest modGlossaryGetEntriesByLetterRequest) throws ApiException {
        ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResp = modGlossaryGetEntriesByLetterWithHttpInfo(modGlossaryGetEntriesByLetterRequest);
        return localVarResp.getData();
    }

    /**
     * Browse entries by letter.
     * Browse entries by letter.
     * @param modGlossaryGetEntriesByLetterRequest  (required)
     * @return ApiResponse&lt;ModGlossaryGetEntriesByAuthorId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> modGlossaryGetEntriesByLetterWithHttpInfo(ModGlossaryGetEntriesByLetterRequest modGlossaryGetEntriesByLetterRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryGetEntriesByLetterValidateBeforeCall(modGlossaryGetEntriesByLetterRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntriesByAuthorId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Browse entries by letter. (asynchronously)
     * Browse entries by letter.
     * @param modGlossaryGetEntriesByLetterRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntriesByLetterAsync(ModGlossaryGetEntriesByLetterRequest modGlossaryGetEntriesByLetterRequest, final ApiCallback<ModGlossaryGetEntriesByAuthorId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryGetEntriesByLetterValidateBeforeCall(modGlossaryGetEntriesByLetterRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntriesByAuthorId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryGetEntriesBySearch
     * @param modGlossaryGetEntriesBySearchRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntriesBySearchCall(ModGlossaryGetEntriesBySearchRequest modGlossaryGetEntriesBySearchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryGetEntriesBySearchRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_get_entries_by_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryGetEntriesBySearchValidateBeforeCall(ModGlossaryGetEntriesBySearchRequest modGlossaryGetEntriesBySearchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryGetEntriesBySearchRequest' is set
        if (modGlossaryGetEntriesBySearchRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryGetEntriesBySearchRequest' when calling modGlossaryGetEntriesBySearch(Async)");
        }

        return modGlossaryGetEntriesBySearchCall(modGlossaryGetEntriesBySearchRequest, _callback);

    }

    /**
     * Browse entries by search query.
     * Browse entries by search query.
     * @param modGlossaryGetEntriesBySearchRequest  (required)
     * @return ModGlossaryGetEntriesByAuthorId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryGetEntriesByAuthorId200Response modGlossaryGetEntriesBySearch(ModGlossaryGetEntriesBySearchRequest modGlossaryGetEntriesBySearchRequest) throws ApiException {
        ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResp = modGlossaryGetEntriesBySearchWithHttpInfo(modGlossaryGetEntriesBySearchRequest);
        return localVarResp.getData();
    }

    /**
     * Browse entries by search query.
     * Browse entries by search query.
     * @param modGlossaryGetEntriesBySearchRequest  (required)
     * @return ApiResponse&lt;ModGlossaryGetEntriesByAuthorId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> modGlossaryGetEntriesBySearchWithHttpInfo(ModGlossaryGetEntriesBySearchRequest modGlossaryGetEntriesBySearchRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryGetEntriesBySearchValidateBeforeCall(modGlossaryGetEntriesBySearchRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntriesByAuthorId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Browse entries by search query. (asynchronously)
     * Browse entries by search query.
     * @param modGlossaryGetEntriesBySearchRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntriesBySearchAsync(ModGlossaryGetEntriesBySearchRequest modGlossaryGetEntriesBySearchRequest, final ApiCallback<ModGlossaryGetEntriesByAuthorId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryGetEntriesBySearchValidateBeforeCall(modGlossaryGetEntriesBySearchRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntriesByAuthorId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryGetEntriesByTerm
     * @param modGlossaryGetEntriesByTermRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntriesByTermCall(ModGlossaryGetEntriesByTermRequest modGlossaryGetEntriesByTermRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryGetEntriesByTermRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_get_entries_by_term";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryGetEntriesByTermValidateBeforeCall(ModGlossaryGetEntriesByTermRequest modGlossaryGetEntriesByTermRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryGetEntriesByTermRequest' is set
        if (modGlossaryGetEntriesByTermRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryGetEntriesByTermRequest' when calling modGlossaryGetEntriesByTerm(Async)");
        }

        return modGlossaryGetEntriesByTermCall(modGlossaryGetEntriesByTermRequest, _callback);

    }

    /**
     * Browse entries by term (concept or alias).
     * Browse entries by term (concept or alias).
     * @param modGlossaryGetEntriesByTermRequest  (required)
     * @return ModGlossaryGetEntriesByAuthorId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryGetEntriesByAuthorId200Response modGlossaryGetEntriesByTerm(ModGlossaryGetEntriesByTermRequest modGlossaryGetEntriesByTermRequest) throws ApiException {
        ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResp = modGlossaryGetEntriesByTermWithHttpInfo(modGlossaryGetEntriesByTermRequest);
        return localVarResp.getData();
    }

    /**
     * Browse entries by term (concept or alias).
     * Browse entries by term (concept or alias).
     * @param modGlossaryGetEntriesByTermRequest  (required)
     * @return ApiResponse&lt;ModGlossaryGetEntriesByAuthorId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> modGlossaryGetEntriesByTermWithHttpInfo(ModGlossaryGetEntriesByTermRequest modGlossaryGetEntriesByTermRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryGetEntriesByTermValidateBeforeCall(modGlossaryGetEntriesByTermRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntriesByAuthorId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Browse entries by term (concept or alias). (asynchronously)
     * Browse entries by term (concept or alias).
     * @param modGlossaryGetEntriesByTermRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntriesByTermAsync(ModGlossaryGetEntriesByTermRequest modGlossaryGetEntriesByTermRequest, final ApiCallback<ModGlossaryGetEntriesByAuthorId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryGetEntriesByTermValidateBeforeCall(modGlossaryGetEntriesByTermRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntriesByAuthorId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryGetEntriesToApprove
     * @param modGlossaryGetEntriesToApproveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntriesToApproveCall(ModGlossaryGetEntriesToApproveRequest modGlossaryGetEntriesToApproveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryGetEntriesToApproveRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_get_entries_to_approve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryGetEntriesToApproveValidateBeforeCall(ModGlossaryGetEntriesToApproveRequest modGlossaryGetEntriesToApproveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryGetEntriesToApproveRequest' is set
        if (modGlossaryGetEntriesToApproveRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryGetEntriesToApproveRequest' when calling modGlossaryGetEntriesToApprove(Async)");
        }

        return modGlossaryGetEntriesToApproveCall(modGlossaryGetEntriesToApproveRequest, _callback);

    }

    /**
     * Browse entries to be approved.
     * Browse entries to be approved.
     * @param modGlossaryGetEntriesToApproveRequest  (required)
     * @return ModGlossaryGetEntriesByAuthorId200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryGetEntriesByAuthorId200Response modGlossaryGetEntriesToApprove(ModGlossaryGetEntriesToApproveRequest modGlossaryGetEntriesToApproveRequest) throws ApiException {
        ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> localVarResp = modGlossaryGetEntriesToApproveWithHttpInfo(modGlossaryGetEntriesToApproveRequest);
        return localVarResp.getData();
    }

    /**
     * Browse entries to be approved.
     * Browse entries to be approved.
     * @param modGlossaryGetEntriesToApproveRequest  (required)
     * @return ApiResponse&lt;ModGlossaryGetEntriesByAuthorId200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryGetEntriesByAuthorId200Response> modGlossaryGetEntriesToApproveWithHttpInfo(ModGlossaryGetEntriesToApproveRequest modGlossaryGetEntriesToApproveRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryGetEntriesToApproveValidateBeforeCall(modGlossaryGetEntriesToApproveRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntriesByAuthorId200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Browse entries to be approved. (asynchronously)
     * Browse entries to be approved.
     * @param modGlossaryGetEntriesToApproveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntriesToApproveAsync(ModGlossaryGetEntriesToApproveRequest modGlossaryGetEntriesToApproveRequest, final ApiCallback<ModGlossaryGetEntriesByAuthorId200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryGetEntriesToApproveValidateBeforeCall(modGlossaryGetEntriesToApproveRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntriesByAuthorId200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryGetEntryById
     * @param modGlossaryGetEntryByIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntryByIdCall(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryGetEntryByIdRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_get_entry_by_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryGetEntryByIdValidateBeforeCall(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryGetEntryByIdRequest' is set
        if (modGlossaryGetEntryByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryGetEntryByIdRequest' when calling modGlossaryGetEntryById(Async)");
        }

        return modGlossaryGetEntryByIdCall(modGlossaryGetEntryByIdRequest, _callback);

    }

    /**
     * Get an entry by ID
     * Get an entry by ID
     * @param modGlossaryGetEntryByIdRequest  (required)
     * @return ModGlossaryGetEntryById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryGetEntryById200Response modGlossaryGetEntryById(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest) throws ApiException {
        ApiResponse<ModGlossaryGetEntryById200Response> localVarResp = modGlossaryGetEntryByIdWithHttpInfo(modGlossaryGetEntryByIdRequest);
        return localVarResp.getData();
    }

    /**
     * Get an entry by ID
     * Get an entry by ID
     * @param modGlossaryGetEntryByIdRequest  (required)
     * @return ApiResponse&lt;ModGlossaryGetEntryById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryGetEntryById200Response> modGlossaryGetEntryByIdWithHttpInfo(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryGetEntryByIdValidateBeforeCall(modGlossaryGetEntryByIdRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntryById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an entry by ID (asynchronously)
     * Get an entry by ID
     * @param modGlossaryGetEntryByIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetEntryByIdAsync(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, final ApiCallback<ModGlossaryGetEntryById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryGetEntryByIdValidateBeforeCall(modGlossaryGetEntryByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryGetEntryById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryGetGlossariesByCourses
     * @param modChatGetChatsByCoursesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetGlossariesByCoursesCall(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modChatGetChatsByCoursesRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_get_glossaries_by_courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryGetGlossariesByCoursesValidateBeforeCall(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modChatGetChatsByCoursesRequest' is set
        if (modChatGetChatsByCoursesRequest == null) {
            throw new ApiException("Missing the required parameter 'modChatGetChatsByCoursesRequest' when calling modGlossaryGetGlossariesByCourses(Async)");
        }

        return modGlossaryGetGlossariesByCoursesCall(modChatGetChatsByCoursesRequest, _callback);

    }

    /**
     * Retrieve a list of glossaries from several courses.
     * Retrieve a list of glossaries from several courses.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @return ModGlossaryGetGlossariesByCourses200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryGetGlossariesByCourses200Response modGlossaryGetGlossariesByCourses(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest) throws ApiException {
        ApiResponse<ModGlossaryGetGlossariesByCourses200Response> localVarResp = modGlossaryGetGlossariesByCoursesWithHttpInfo(modChatGetChatsByCoursesRequest);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of glossaries from several courses.
     * Retrieve a list of glossaries from several courses.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @return ApiResponse&lt;ModGlossaryGetGlossariesByCourses200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryGetGlossariesByCourses200Response> modGlossaryGetGlossariesByCoursesWithHttpInfo(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryGetGlossariesByCoursesValidateBeforeCall(modChatGetChatsByCoursesRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryGetGlossariesByCourses200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of glossaries from several courses. (asynchronously)
     * Retrieve a list of glossaries from several courses.
     * @param modChatGetChatsByCoursesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryGetGlossariesByCoursesAsync(ModChatGetChatsByCoursesRequest modChatGetChatsByCoursesRequest, final ApiCallback<ModGlossaryGetGlossariesByCourses200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryGetGlossariesByCoursesValidateBeforeCall(modChatGetChatsByCoursesRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryGetGlossariesByCourses200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryPrepareEntryForEdition
     * @param modGlossaryPrepareEntryForEditionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryPrepareEntryForEditionCall(ModGlossaryPrepareEntryForEditionRequest modGlossaryPrepareEntryForEditionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryPrepareEntryForEditionRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_prepare_entry_for_edition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryPrepareEntryForEditionValidateBeforeCall(ModGlossaryPrepareEntryForEditionRequest modGlossaryPrepareEntryForEditionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryPrepareEntryForEditionRequest' is set
        if (modGlossaryPrepareEntryForEditionRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryPrepareEntryForEditionRequest' when calling modGlossaryPrepareEntryForEdition(Async)");
        }

        return modGlossaryPrepareEntryForEditionCall(modGlossaryPrepareEntryForEditionRequest, _callback);

    }

    /**
     * Prepares the given entry for edition returning draft item areas and file areas information.
     * Prepares the given entry for edition returning draft item areas and file areas information.
     * @param modGlossaryPrepareEntryForEditionRequest  (required)
     * @return ModGlossaryPrepareEntryForEdition200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryPrepareEntryForEdition200Response modGlossaryPrepareEntryForEdition(ModGlossaryPrepareEntryForEditionRequest modGlossaryPrepareEntryForEditionRequest) throws ApiException {
        ApiResponse<ModGlossaryPrepareEntryForEdition200Response> localVarResp = modGlossaryPrepareEntryForEditionWithHttpInfo(modGlossaryPrepareEntryForEditionRequest);
        return localVarResp.getData();
    }

    /**
     * Prepares the given entry for edition returning draft item areas and file areas information.
     * Prepares the given entry for edition returning draft item areas and file areas information.
     * @param modGlossaryPrepareEntryForEditionRequest  (required)
     * @return ApiResponse&lt;ModGlossaryPrepareEntryForEdition200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryPrepareEntryForEdition200Response> modGlossaryPrepareEntryForEditionWithHttpInfo(ModGlossaryPrepareEntryForEditionRequest modGlossaryPrepareEntryForEditionRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryPrepareEntryForEditionValidateBeforeCall(modGlossaryPrepareEntryForEditionRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryPrepareEntryForEdition200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Prepares the given entry for edition returning draft item areas and file areas information. (asynchronously)
     * Prepares the given entry for edition returning draft item areas and file areas information.
     * @param modGlossaryPrepareEntryForEditionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryPrepareEntryForEditionAsync(ModGlossaryPrepareEntryForEditionRequest modGlossaryPrepareEntryForEditionRequest, final ApiCallback<ModGlossaryPrepareEntryForEdition200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryPrepareEntryForEditionValidateBeforeCall(modGlossaryPrepareEntryForEditionRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryPrepareEntryForEdition200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryUpdateEntry
     * @param modGlossaryUpdateEntryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryUpdateEntryCall(ModGlossaryUpdateEntryRequest modGlossaryUpdateEntryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryUpdateEntryRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_update_entry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryUpdateEntryValidateBeforeCall(ModGlossaryUpdateEntryRequest modGlossaryUpdateEntryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryUpdateEntryRequest' is set
        if (modGlossaryUpdateEntryRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryUpdateEntryRequest' when calling modGlossaryUpdateEntry(Async)");
        }

        return modGlossaryUpdateEntryCall(modGlossaryUpdateEntryRequest, _callback);

    }

    /**
     * Updates the given glossary entry.
     * Updates the given glossary entry.
     * @param modGlossaryUpdateEntryRequest  (required)
     * @return ModGlossaryUpdateEntry200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryUpdateEntry200Response modGlossaryUpdateEntry(ModGlossaryUpdateEntryRequest modGlossaryUpdateEntryRequest) throws ApiException {
        ApiResponse<ModGlossaryUpdateEntry200Response> localVarResp = modGlossaryUpdateEntryWithHttpInfo(modGlossaryUpdateEntryRequest);
        return localVarResp.getData();
    }

    /**
     * Updates the given glossary entry.
     * Updates the given glossary entry.
     * @param modGlossaryUpdateEntryRequest  (required)
     * @return ApiResponse&lt;ModGlossaryUpdateEntry200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryUpdateEntry200Response> modGlossaryUpdateEntryWithHttpInfo(ModGlossaryUpdateEntryRequest modGlossaryUpdateEntryRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryUpdateEntryValidateBeforeCall(modGlossaryUpdateEntryRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryUpdateEntry200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the given glossary entry. (asynchronously)
     * Updates the given glossary entry.
     * @param modGlossaryUpdateEntryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryUpdateEntryAsync(ModGlossaryUpdateEntryRequest modGlossaryUpdateEntryRequest, final ApiCallback<ModGlossaryUpdateEntry200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryUpdateEntryValidateBeforeCall(modGlossaryUpdateEntryRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryUpdateEntry200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryViewEntry
     * @param modGlossaryGetEntryByIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryViewEntryCall(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryGetEntryByIdRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_view_entry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryViewEntryValidateBeforeCall(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryGetEntryByIdRequest' is set
        if (modGlossaryGetEntryByIdRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryGetEntryByIdRequest' when calling modGlossaryViewEntry(Async)");
        }

        return modGlossaryViewEntryCall(modGlossaryGetEntryByIdRequest, _callback);

    }

    /**
     * Notify a glossary entry as being viewed.
     * Notify a glossary entry as being viewed.
     * @param modGlossaryGetEntryByIdRequest  (required)
     * @return ModGlossaryViewEntry200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryViewEntry200Response modGlossaryViewEntry(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest) throws ApiException {
        ApiResponse<ModGlossaryViewEntry200Response> localVarResp = modGlossaryViewEntryWithHttpInfo(modGlossaryGetEntryByIdRequest);
        return localVarResp.getData();
    }

    /**
     * Notify a glossary entry as being viewed.
     * Notify a glossary entry as being viewed.
     * @param modGlossaryGetEntryByIdRequest  (required)
     * @return ApiResponse&lt;ModGlossaryViewEntry200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryViewEntry200Response> modGlossaryViewEntryWithHttpInfo(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryViewEntryValidateBeforeCall(modGlossaryGetEntryByIdRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryViewEntry200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Notify a glossary entry as being viewed. (asynchronously)
     * Notify a glossary entry as being viewed.
     * @param modGlossaryGetEntryByIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryViewEntryAsync(ModGlossaryGetEntryByIdRequest modGlossaryGetEntryByIdRequest, final ApiCallback<ModGlossaryViewEntry200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryViewEntryValidateBeforeCall(modGlossaryGetEntryByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryViewEntry200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modGlossaryViewGlossary
     * @param modGlossaryViewGlossaryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryViewGlossaryCall(ModGlossaryViewGlossaryRequest modGlossaryViewGlossaryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modGlossaryViewGlossaryRequest;

        // create path and map variables
        String localVarPath = "/mod_glossary_view_glossary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modGlossaryViewGlossaryValidateBeforeCall(ModGlossaryViewGlossaryRequest modGlossaryViewGlossaryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'modGlossaryViewGlossaryRequest' is set
        if (modGlossaryViewGlossaryRequest == null) {
            throw new ApiException("Missing the required parameter 'modGlossaryViewGlossaryRequest' when calling modGlossaryViewGlossary(Async)");
        }

        return modGlossaryViewGlossaryCall(modGlossaryViewGlossaryRequest, _callback);

    }

    /**
     * Notify the glossary as being viewed.
     * Notify the glossary as being viewed.
     * @param modGlossaryViewGlossaryRequest  (required)
     * @return ModGlossaryViewGlossary200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ModGlossaryViewGlossary200Response modGlossaryViewGlossary(ModGlossaryViewGlossaryRequest modGlossaryViewGlossaryRequest) throws ApiException {
        ApiResponse<ModGlossaryViewGlossary200Response> localVarResp = modGlossaryViewGlossaryWithHttpInfo(modGlossaryViewGlossaryRequest);
        return localVarResp.getData();
    }

    /**
     * Notify the glossary as being viewed.
     * Notify the glossary as being viewed.
     * @param modGlossaryViewGlossaryRequest  (required)
     * @return ApiResponse&lt;ModGlossaryViewGlossary200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModGlossaryViewGlossary200Response> modGlossaryViewGlossaryWithHttpInfo(ModGlossaryViewGlossaryRequest modGlossaryViewGlossaryRequest) throws ApiException {
        okhttp3.Call localVarCall = modGlossaryViewGlossaryValidateBeforeCall(modGlossaryViewGlossaryRequest, null);
        Type localVarReturnType = new TypeToken<ModGlossaryViewGlossary200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Notify the glossary as being viewed. (asynchronously)
     * Notify the glossary as being viewed.
     * @param modGlossaryViewGlossaryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter value detected </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modGlossaryViewGlossaryAsync(ModGlossaryViewGlossaryRequest modGlossaryViewGlossaryRequest, final ApiCallback<ModGlossaryViewGlossary200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = modGlossaryViewGlossaryValidateBeforeCall(modGlossaryViewGlossaryRequest, _callback);
        Type localVarReturnType = new TypeToken<ModGlossaryViewGlossary200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
