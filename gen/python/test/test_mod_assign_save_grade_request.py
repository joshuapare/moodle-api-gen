# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.mod_assign_save_grade_request import ModAssignSaveGradeRequest

class TestModAssignSaveGradeRequest(unittest.TestCase):
    """ModAssignSaveGradeRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ModAssignSaveGradeRequest:
        """Test ModAssignSaveGradeRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ModAssignSaveGradeRequest`
        """
        model = ModAssignSaveGradeRequest()
        if include_optional:
            return ModAssignSaveGradeRequest(
                addattempt = True,
                advancedgradingdata = openapi_client.models.mod_assign_save_grade_request_advancedgradingdata.mod_assign_save_grade_request_advancedgradingdata(
                    guide = openapi_client.models.mod_assign_save_grade_request_advancedgradingdata_guide.mod_assign_save_grade_request_advancedgradingdata_guide(
                        criteria = [
                            openapi_client.models.mod_assign_save_grade_request_advancedgradingdata_guide_criteria_inner.mod_assign_save_grade_request_advancedgradingdata_guide_criteria_inner(
                                criterionid = 56, 
                                fillings = [
                                    openapi_client.models.mod_assign_save_grade_request_advancedgradingdata_guide_criteria_inner_fillings_inner.mod_assign_save_grade_request_advancedgradingdata_guide_criteria_inner_fillings_inner(
                                        criterionid = 56, 
                                        levelid = 56, 
                                        remark = '', 
                                        remarkformat = 56, 
                                        score = 1.337, )
                                    ], )
                            ], ), 
                    rubric = openapi_client.models.mod_assign_save_grade_request_advancedgradingdata_rubric.mod_assign_save_grade_request_advancedgradingdata_rubric(
                        criteria = [
                            openapi_client.models.mod_assign_save_grade_request_advancedgradingdata_rubric_criteria_inner.mod_assign_save_grade_request_advancedgradingdata_rubric_criteria_inner(
                                criterionid = 56, )
                            ], ), ),
                applytoall = True,
                assignmentid = 56,
                attemptnumber = 56,
                grade = 1.337,
                plugindata = openapi_client.models.mod_assign_save_grade_request_plugindata.mod_assign_save_grade_request_plugindata(
                    assignfeedbackcomments_editor = openapi_client.models.mod_assign_save_grade_request_plugindata_assignfeedbackcomments_editor.mod_assign_save_grade_request_plugindata_assignfeedbackcomments_editor(
                        format = 56, 
                        text = 'null', ), 
                    files_filemanager = 56, ),
                userid = 56,
                workflowstate = 'null'
            )
        else:
            return ModAssignSaveGradeRequest(
                addattempt = True,
                applytoall = True,
                assignmentid = 56,
                attemptnumber = 56,
                grade = 1.337,
                userid = 56,
                workflowstate = 'null',
        )
        """

    def testModAssignSaveGradeRequest(self):
        """Test ModAssignSaveGradeRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
