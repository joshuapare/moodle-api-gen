# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.core_badges_get_user_badge_by_hash200_response_badge_inner import CoreBadgesGetUserBadgeByHash200ResponseBadgeInner

class TestCoreBadgesGetUserBadgeByHash200ResponseBadgeInner(unittest.TestCase):
    """CoreBadgesGetUserBadgeByHash200ResponseBadgeInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CoreBadgesGetUserBadgeByHash200ResponseBadgeInner:
        """Test CoreBadgesGetUserBadgeByHash200ResponseBadgeInner
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CoreBadgesGetUserBadgeByHash200ResponseBadgeInner`
        """
        model = CoreBadgesGetUserBadgeByHash200ResponseBadgeInner()
        if include_optional:
            return CoreBadgesGetUserBadgeByHash200ResponseBadgeInner(
                alignment = [
                    openapi_client.models.core_badges_get_user_badge_by_hash_200_response_badge_inner_alignment_inner.core_badges_get_user_badge_by_hash_200_response_badge_inner_alignment_inner(
                        badgeid = 56, 
                        id = 56, 
                        target_code = 'null', 
                        target_description = 'null', 
                        target_framework = 'null', 
                        target_name = 'null', 
                        target_url = 'null', )
                    ],
                attachment = 56,
                badgeurl = 'null',
                courseid = 56,
                dateexpire = 56,
                dateissued = 56,
                description = 'null',
                email = 'null',
                endorsement = openapi_client.models.core_badges_get_user_badge_by_hash_200_response_badge_inner_endorsement.core_badges_get_user_badge_by_hash_200_response_badge_inner_endorsement(
                    badgeid = 56, 
                    claimcomment = 'null', 
                    claimid = 'null', 
                    dateissued = 56, 
                    id = 56, 
                    issueremail = 'null', 
                    issuername = 'null', 
                    issuerurl = 'null', ),
                expiredate = 56,
                expireperiod = 56,
                id = 56,
                imageauthoremail = 'null',
                imageauthorname = 'null',
                imageauthorurl = 'null',
                imagecaption = 'null',
                issuedid = 56,
                issuercontact = 'null',
                issuername = 'null',
                issuerurl = 'null',
                language = 'null',
                message = 'null',
                messagesubject = 'null',
                name = 'null',
                nextcron = 56,
                notification = 56,
                relatedbadges = [
                    openapi_client.models.core_badges_get_user_badge_by_hash_200_response_badge_inner_relatedbadges_inner.core_badges_get_user_badge_by_hash_200_response_badge_inner_relatedbadges_inner(
                        id = 56, 
                        language = '', 
                        name = '', 
                        type = 56, 
                        version = 'null', )
                    ],
                status = 56,
                timecreated = 56,
                timemodified = 56,
                type = 56,
                uniquehash = 'null',
                usercreated = 56,
                usermodified = 56,
                version = '',
                visible = 56
            )
        else:
            return CoreBadgesGetUserBadgeByHash200ResponseBadgeInner(
        )
        """

    def testCoreBadgesGetUserBadgeByHash200ResponseBadgeInner(self):
        """Test CoreBadgesGetUserBadgeByHash200ResponseBadgeInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
