# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.gradingform_guide_grader_gradingpanel_store200_response_grade import GradingformGuideGraderGradingpanelStore200ResponseGrade

class TestGradingformGuideGraderGradingpanelStore200ResponseGrade(unittest.TestCase):
    """GradingformGuideGraderGradingpanelStore200ResponseGrade unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GradingformGuideGraderGradingpanelStore200ResponseGrade:
        """Test GradingformGuideGraderGradingpanelStore200ResponseGrade
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GradingformGuideGraderGradingpanelStore200ResponseGrade`
        """
        model = GradingformGuideGraderGradingpanelStore200ResponseGrade()
        if include_optional:
            return GradingformGuideGraderGradingpanelStore200ResponseGrade(
                comments = [
                    openapi_client.models.gradingform_guide_grader_gradingpanel_store_200_response_grade_comments_inner.gradingform_guide_grader_gradingpanel_store_200_response_grade_comments_inner(
                        description = '', 
                        id = 56, 
                        sortorder = 56, )
                    ],
                criterion = [
                    openapi_client.models.gradingform_guide_grader_gradingpanel_store_200_response_grade_criterion_inner.gradingform_guide_grader_gradingpanel_store_200_response_grade_criterion_inner(
                        description = '', 
                        descriptionmarkers = '', 
                        id = 56, 
                        maxscore = 1.337, 
                        name = '', 
                        remark = '', 
                        score = 1.337, )
                    ],
                gradedby = '',
                hascomments = True,
                instanceid = 56,
                maxgrade = '',
                timecreated = 56,
                timemodified = 56,
                usergrade = ''
            )
        else:
            return GradingformGuideGraderGradingpanelStore200ResponseGrade(
                comments = [
                    openapi_client.models.gradingform_guide_grader_gradingpanel_store_200_response_grade_comments_inner.gradingform_guide_grader_gradingpanel_store_200_response_grade_comments_inner(
                        description = '', 
                        id = 56, 
                        sortorder = 56, )
                    ],
                criterion = [
                    openapi_client.models.gradingform_guide_grader_gradingpanel_store_200_response_grade_criterion_inner.gradingform_guide_grader_gradingpanel_store_200_response_grade_criterion_inner(
                        description = '', 
                        descriptionmarkers = '', 
                        id = 56, 
                        maxscore = 1.337, 
                        name = '', 
                        remark = '', 
                        score = 1.337, )
                    ],
                gradedby = '',
                hascomments = True,
                instanceid = 56,
                maxgrade = '',
                timecreated = 56,
                timemodified = 56,
                usergrade = '',
        )
        """

    def testGradingformGuideGraderGradingpanelStore200ResponseGrade(self):
        """Test GradingformGuideGraderGradingpanelStore200ResponseGrade"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
