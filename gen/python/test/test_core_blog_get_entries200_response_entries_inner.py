# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.core_blog_get_entries200_response_entries_inner import CoreBlogGetEntries200ResponseEntriesInner

class TestCoreBlogGetEntries200ResponseEntriesInner(unittest.TestCase):
    """CoreBlogGetEntries200ResponseEntriesInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CoreBlogGetEntries200ResponseEntriesInner:
        """Test CoreBlogGetEntries200ResponseEntriesInner
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CoreBlogGetEntries200ResponseEntriesInner`
        """
        model = CoreBlogGetEntries200ResponseEntriesInner()
        if include_optional:
            return CoreBlogGetEntries200ResponseEntriesInner(
                attachment = 'null',
                attachmentfiles = [
                    openapi_client.models.core_blog_get_entries_200_response_entries_inner_attachmentfiles_inner.core_blog_get_entries_200_response_entries_inner_attachmentfiles_inner(
                        filename = 'null', 
                        filepath = 'null', 
                        filesize = 56, 
                        fileurl = 'null', 
                        isexternalfile = True, 
                        mimetype = 'null', 
                        repositorytype = 'null', 
                        timemodified = 56, )
                    ],
                content = 'null',
                courseid = 56,
                coursemoduleid = 56,
                created = 56,
                format = 56,
                groupid = 56,
                id = 56,
                lastmodified = 56,
                module = 'null',
                moduleid = 56,
                publishstate = 'draft',
                rating = 56,
                subject = 'null',
                summary = 'null',
                summaryfiles = [
                    openapi_client.models.core_blog_get_entries_200_response_entries_inner_summaryfiles_inner.core_blog_get_entries_200_response_entries_inner_summaryfiles_inner(
                        filename = '', 
                        filepath = '', 
                        filesize = 56, 
                        fileurl = '', 
                        isexternalfile = True, 
                        mimetype = '', 
                        repositorytype = '', 
                        timemodified = 56, )
                    ],
                summaryformat = 56,
                tags = [
                    openapi_client.models.core_blog_get_entries_200_response_entries_inner_tags_inner.core_blog_get_entries_200_response_entries_inner_tags_inner(
                        flag = 56, 
                        id = 56, 
                        isstandard = True, 
                        itemid = 56, 
                        name = 'null', 
                        ordering = 56, 
                        rawname = 'null', 
                        tagcollid = 56, 
                        taginstancecontextid = 56, 
                        taginstanceid = 56, )
                    ],
                uniquehash = 'null',
                userid = 56,
                usermodified = 56
            )
        else:
            return CoreBlogGetEntries200ResponseEntriesInner(
        )
        """

    def testCoreBlogGetEntries200ResponseEntriesInner(self):
        """Test CoreBlogGetEntries200ResponseEntriesInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
