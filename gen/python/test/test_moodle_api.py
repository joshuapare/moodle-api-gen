# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.moodle_api import MoodleApi


class TestMoodleApi(unittest.TestCase):
    """MoodleApi unit test stubs"""

    def setUp(self) -> None:
        self.api = MoodleApi()

    def tearDown(self) -> None:
        pass

    def test_core_admin_set_block_protection(self) -> None:
        """Test case for core_admin_set_block_protection

        Set the protection state for a block plugin
        """
        pass

    def test_core_admin_set_plugin_order(self) -> None:
        """Test case for core_admin_set_plugin_order

        Set the order of a plugin
        """
        pass

    def test_core_admin_set_plugin_state(self) -> None:
        """Test case for core_admin_set_plugin_state

        Set the state of a plugin
        """
        pass

    def test_core_auth_confirm_user(self) -> None:
        """Test case for core_auth_confirm_user

        Confirm a user account.
        """
        pass

    def test_core_auth_is_age_digital_consent_verification_enabled(self) -> None:
        """Test case for core_auth_is_age_digital_consent_verification_enabled

        Checks if age digital consent verification is enabled.
        """
        pass

    def test_core_auth_is_minor(self) -> None:
        """Test case for core_auth_is_minor

        Requests a check if a user is a digital minor.
        """
        pass

    def test_core_auth_request_password_reset(self) -> None:
        """Test case for core_auth_request_password_reset

        Requests a password reset.
        """
        pass

    def test_core_auth_resend_confirmation_email(self) -> None:
        """Test case for core_auth_resend_confirmation_email

        Resend confirmation email.
        """
        pass

    def test_core_backup_get_async_backup_links_backup(self) -> None:
        """Test case for core_backup_get_async_backup_links_backup

        Gets the data to use when updating the status table row in the UI for when an async backup completes.
        """
        pass

    def test_core_backup_get_async_backup_links_restore(self) -> None:
        """Test case for core_backup_get_async_backup_links_restore

        Gets the data to use when updating the status table row in the UI for when an async restore completes.
        """
        pass

    def test_core_backup_get_async_backup_progress(self) -> None:
        """Test case for core_backup_get_async_backup_progress

        Get the progress of an Asyncronhous backup.
        """
        pass

    def test_core_backup_get_copy_progress(self) -> None:
        """Test case for core_backup_get_copy_progress

        Gets the progress of course copy operations.
        """
        pass

    def test_core_backup_submit_copy_form(self) -> None:
        """Test case for core_backup_submit_copy_form

        Handles ajax submission of course copy form.
        """
        pass

    def test_core_badges_get_user_badge_by_hash(self) -> None:
        """Test case for core_badges_get_user_badge_by_hash

        Returns the badge awarded to a user by hash.
        """
        pass

    def test_core_badges_get_user_badges(self) -> None:
        """Test case for core_badges_get_user_badges

        Returns the list of badges awarded to a user.
        """
        pass

    def test_core_block_fetch_addable_blocks(self) -> None:
        """Test case for core_block_fetch_addable_blocks

        Returns all addable blocks in a given page.
        """
        pass

    def test_core_block_get_course_blocks(self) -> None:
        """Test case for core_block_get_course_blocks

        Returns blocks information for a course.
        """
        pass

    def test_core_block_get_dashboard_blocks(self) -> None:
        """Test case for core_block_get_dashboard_blocks

        Returns blocks information for the given user dashboard.
        """
        pass

    def test_core_blog_get_entries(self) -> None:
        """Test case for core_blog_get_entries

        Returns blog entries.
        """
        pass

    def test_core_blog_view_entries(self) -> None:
        """Test case for core_blog_view_entries

        Trigger the blog_entries_viewed event.
        """
        pass

    def test_core_calendar_create_calendar_events(self) -> None:
        """Test case for core_calendar_create_calendar_events

        Create calendar events
        """
        pass

    def test_core_calendar_delete_calendar_events(self) -> None:
        """Test case for core_calendar_delete_calendar_events

        Delete calendar events
        """
        pass

    def test_core_calendar_delete_subscription(self) -> None:
        """Test case for core_calendar_delete_subscription

        Delete the calendar subscription
        """
        pass

    def test_core_calendar_get_action_events_by_course(self) -> None:
        """Test case for core_calendar_get_action_events_by_course

        Get calendar action events by course
        """
        pass

    def test_core_calendar_get_action_events_by_courses(self) -> None:
        """Test case for core_calendar_get_action_events_by_courses

        Get calendar action events by courses
        """
        pass

    def test_core_calendar_get_action_events_by_timesort(self) -> None:
        """Test case for core_calendar_get_action_events_by_timesort

        Get calendar action events by tiemsort
        """
        pass

    def test_core_calendar_get_allowed_event_types(self) -> None:
        """Test case for core_calendar_get_allowed_event_types

        Get the type of events a user can create in the given course.
        """
        pass

    def test_core_calendar_get_calendar_access_information(self) -> None:
        """Test case for core_calendar_get_calendar_access_information

        Convenience function to retrieve some permissions/access information for the given course calendar.
        """
        pass

    def test_core_calendar_get_calendar_day_view(self) -> None:
        """Test case for core_calendar_get_calendar_day_view

        Fetch the day view data for a calendar
        """
        pass

    def test_core_calendar_get_calendar_event_by_id(self) -> None:
        """Test case for core_calendar_get_calendar_event_by_id

        Get calendar event by id
        """
        pass

    def test_core_calendar_get_calendar_events(self) -> None:
        """Test case for core_calendar_get_calendar_events

        Get calendar events
        """
        pass

    def test_core_calendar_get_calendar_export_token(self) -> None:
        """Test case for core_calendar_get_calendar_export_token

        Return the auth token required for exporting a calendar.
        """
        pass

    def test_core_calendar_get_calendar_monthly_view(self) -> None:
        """Test case for core_calendar_get_calendar_monthly_view

        Fetch the monthly view data for a calendar
        """
        pass

    def test_core_calendar_get_calendar_upcoming_view(self) -> None:
        """Test case for core_calendar_get_calendar_upcoming_view

        Fetch the upcoming view data for a calendar
        """
        pass

    def test_core_calendar_get_timestamps(self) -> None:
        """Test case for core_calendar_get_timestamps

        Fetch unix timestamps for given date times.
        """
        pass

    def test_core_calendar_submit_create_update_form(self) -> None:
        """Test case for core_calendar_submit_create_update_form

        Submit form data for event form
        """
        pass

    def test_core_calendar_update_event_start_day(self) -> None:
        """Test case for core_calendar_update_event_start_day

        Update the start day (but not time) for an event.
        """
        pass

    def test_core_change_editmode(self) -> None:
        """Test case for core_change_editmode

        Change the editing mode
        """
        pass

    def test_core_cohort_add_cohort_members(self) -> None:
        """Test case for core_cohort_add_cohort_members

        Adds cohort members.
        """
        pass

    def test_core_cohort_create_cohorts(self) -> None:
        """Test case for core_cohort_create_cohorts

        Creates new cohorts.
        """
        pass

    def test_core_cohort_delete_cohort_members(self) -> None:
        """Test case for core_cohort_delete_cohort_members

        Deletes cohort members.
        """
        pass

    def test_core_cohort_delete_cohorts(self) -> None:
        """Test case for core_cohort_delete_cohorts

        Deletes all specified cohorts.
        """
        pass

    def test_core_cohort_get_cohort_members(self) -> None:
        """Test case for core_cohort_get_cohort_members

        Returns cohort members.
        """
        pass

    def test_core_cohort_get_cohorts(self) -> None:
        """Test case for core_cohort_get_cohorts

        Returns cohort details.
        """
        pass

    def test_core_cohort_search_cohorts(self) -> None:
        """Test case for core_cohort_search_cohorts

        Search for cohorts.
        """
        pass

    def test_core_cohort_update_cohorts(self) -> None:
        """Test case for core_cohort_update_cohorts

        Updates existing cohorts.
        """
        pass

    def test_core_comment_add_comments(self) -> None:
        """Test case for core_comment_add_comments

        Adds a comment or comments.
        """
        pass

    def test_core_comment_delete_comments(self) -> None:
        """Test case for core_comment_delete_comments

        Deletes a comment or comments.
        """
        pass

    def test_core_comment_get_comments(self) -> None:
        """Test case for core_comment_get_comments

        Returns comments.
        """
        pass

    def test_core_competency_add_competency_to_course(self) -> None:
        """Test case for core_competency_add_competency_to_course

        Add the competency to a course
        """
        pass

    def test_core_competency_add_competency_to_plan(self) -> None:
        """Test case for core_competency_add_competency_to_plan

        Add the competency to a learning plan
        """
        pass

    def test_core_competency_add_competency_to_template(self) -> None:
        """Test case for core_competency_add_competency_to_template

        Add the competency to a template
        """
        pass

    def test_core_competency_add_related_competency(self) -> None:
        """Test case for core_competency_add_related_competency

        Adds a related competency
        """
        pass

    def test_core_competency_approve_plan(self) -> None:
        """Test case for core_competency_approve_plan

        Approve a plan.
        """
        pass

    def test_core_competency_competency_framework_viewed(self) -> None:
        """Test case for core_competency_competency_framework_viewed

        Log event competency framework viewed
        """
        pass

    def test_core_competency_competency_viewed(self) -> None:
        """Test case for core_competency_competency_viewed

        Log event competency viewed
        """
        pass

    def test_core_competency_complete_plan(self) -> None:
        """Test case for core_competency_complete_plan

        Complete learning plan.
        """
        pass

    def test_core_competency_count_competencies(self) -> None:
        """Test case for core_competency_count_competencies

        Count a list of a competencies.
        """
        pass

    def test_core_competency_count_competencies_in_course(self) -> None:
        """Test case for core_competency_count_competencies_in_course

        List the competencies in a course
        """
        pass

    def test_core_competency_count_competencies_in_template(self) -> None:
        """Test case for core_competency_count_competencies_in_template

        Count a list of a competencies for a given template.
        """
        pass

    def test_core_competency_count_competency_frameworks(self) -> None:
        """Test case for core_competency_count_competency_frameworks

        Count a list of a competency frameworks.
        """
        pass

    def test_core_competency_count_course_module_competencies(self) -> None:
        """Test case for core_competency_count_course_module_competencies

        Count the competencies in a course module
        """
        pass

    def test_core_competency_count_courses_using_competency(self) -> None:
        """Test case for core_competency_count_courses_using_competency

        List the courses using a competency
        """
        pass

    def test_core_competency_count_templates(self) -> None:
        """Test case for core_competency_count_templates

        Count a list of a learning plan templates.
        """
        pass

    def test_core_competency_count_templates_using_competency(self) -> None:
        """Test case for core_competency_count_templates_using_competency

        Count a list of a learning plan templates for a given competency.
        """
        pass

    def test_core_competency_create_competency(self) -> None:
        """Test case for core_competency_create_competency

        Creates new competencies.
        """
        pass

    def test_core_competency_create_competency_framework(self) -> None:
        """Test case for core_competency_create_competency_framework

        Creates new competency frameworks.
        """
        pass

    def test_core_competency_create_plan(self) -> None:
        """Test case for core_competency_create_plan

        Creates a learning plan.
        """
        pass

    def test_core_competency_create_template(self) -> None:
        """Test case for core_competency_create_template

        Creates new learning plan templates.
        """
        pass

    def test_core_competency_create_user_evidence_competency(self) -> None:
        """Test case for core_competency_create_user_evidence_competency

        Create an evidence of prior learning relationship with a competency.
        """
        pass

    def test_core_competency_delete_competency(self) -> None:
        """Test case for core_competency_delete_competency

        Delete a competency.
        """
        pass

    def test_core_competency_delete_competency_framework(self) -> None:
        """Test case for core_competency_delete_competency_framework

        Delete a competency framework.
        """
        pass

    def test_core_competency_delete_evidence(self) -> None:
        """Test case for core_competency_delete_evidence

        Delete an evidence
        """
        pass

    def test_core_competency_delete_plan(self) -> None:
        """Test case for core_competency_delete_plan

        Delete a learning plan.
        """
        pass

    def test_core_competency_delete_template(self) -> None:
        """Test case for core_competency_delete_template

        Delete a learning plan template.
        """
        pass

    def test_core_competency_delete_user_evidence(self) -> None:
        """Test case for core_competency_delete_user_evidence

        Delete an evidence of prior learning.
        """
        pass

    def test_core_competency_delete_user_evidence_competency(self) -> None:
        """Test case for core_competency_delete_user_evidence_competency

        Delete an evidence of prior learning relationship with a competency.
        """
        pass

    def test_core_competency_duplicate_competency_framework(self) -> None:
        """Test case for core_competency_duplicate_competency_framework

        Duplicate a competency framework.
        """
        pass

    def test_core_competency_duplicate_template(self) -> None:
        """Test case for core_competency_duplicate_template

        Duplicate learning plan template.
        """
        pass

    def test_core_competency_get_scale_values(self) -> None:
        """Test case for core_competency_get_scale_values

        Fetch the values for a specific scale
        """
        pass

    def test_core_competency_grade_competency(self) -> None:
        """Test case for core_competency_grade_competency

        Grade a competency.
        """
        pass

    def test_core_competency_grade_competency_in_course(self) -> None:
        """Test case for core_competency_grade_competency_in_course

        Grade a competency from the course page.
        """
        pass

    def test_core_competency_grade_competency_in_plan(self) -> None:
        """Test case for core_competency_grade_competency_in_plan

        Grade a competency from the user plan page.
        """
        pass

    def test_core_competency_list_competencies(self) -> None:
        """Test case for core_competency_list_competencies

        Load a list of a competencies.
        """
        pass

    def test_core_competency_list_competencies_in_template(self) -> None:
        """Test case for core_competency_list_competencies_in_template

        Load a list of a competencies for a given template.
        """
        pass

    def test_core_competency_list_competency_frameworks(self) -> None:
        """Test case for core_competency_list_competency_frameworks

        Load a list of a competency frameworks.
        """
        pass

    def test_core_competency_list_course_competencies(self) -> None:
        """Test case for core_competency_list_course_competencies

        List the competencies in a course
        """
        pass

    def test_core_competency_list_course_module_competencies(self) -> None:
        """Test case for core_competency_list_course_module_competencies

        List the competencies in a course module
        """
        pass

    def test_core_competency_list_plan_competencies(self) -> None:
        """Test case for core_competency_list_plan_competencies

        List the competencies in a plan
        """
        pass

    def test_core_competency_list_templates(self) -> None:
        """Test case for core_competency_list_templates

        Load a list of a learning plan templates.
        """
        pass

    def test_core_competency_list_templates_using_competency(self) -> None:
        """Test case for core_competency_list_templates_using_competency

        Load a list of a learning plan templates for a given competency.
        """
        pass

    def test_core_competency_list_user_plans(self) -> None:
        """Test case for core_competency_list_user_plans

        List a user's learning plans.
        """
        pass

    def test_core_competency_move_down_competency(self) -> None:
        """Test case for core_competency_move_down_competency

        Re-order a competency.
        """
        pass

    def test_core_competency_move_up_competency(self) -> None:
        """Test case for core_competency_move_up_competency

        Re-order a competency.
        """
        pass

    def test_core_competency_plan_cancel_review_request(self) -> None:
        """Test case for core_competency_plan_cancel_review_request

        Cancel the review of a plan.
        """
        pass

    def test_core_competency_plan_request_review(self) -> None:
        """Test case for core_competency_plan_request_review

        Request for a plan to be reviewed.
        """
        pass

    def test_core_competency_plan_start_review(self) -> None:
        """Test case for core_competency_plan_start_review

        Start the review of a plan.
        """
        pass

    def test_core_competency_plan_stop_review(self) -> None:
        """Test case for core_competency_plan_stop_review

        Stop the review of a plan.
        """
        pass

    def test_core_competency_read_competency(self) -> None:
        """Test case for core_competency_read_competency

        Load a summary of a competency.
        """
        pass

    def test_core_competency_read_competency_framework(self) -> None:
        """Test case for core_competency_read_competency_framework

        Load a summary of a competency framework.
        """
        pass

    def test_core_competency_read_plan(self) -> None:
        """Test case for core_competency_read_plan

        Load a learning plan.
        """
        pass

    def test_core_competency_read_template(self) -> None:
        """Test case for core_competency_read_template

        Load a summary of a learning plan template.
        """
        pass

    def test_core_competency_read_user_evidence(self) -> None:
        """Test case for core_competency_read_user_evidence

        Read an evidence of prior learning.
        """
        pass

    def test_core_competency_remove_competency_from_course(self) -> None:
        """Test case for core_competency_remove_competency_from_course

        Remove a competency from a course
        """
        pass

    def test_core_competency_remove_competency_from_plan(self) -> None:
        """Test case for core_competency_remove_competency_from_plan

        Remove the competency from a learning plan
        """
        pass

    def test_core_competency_remove_competency_from_template(self) -> None:
        """Test case for core_competency_remove_competency_from_template

        Remove a competency from a template
        """
        pass

    def test_core_competency_remove_related_competency(self) -> None:
        """Test case for core_competency_remove_related_competency

        Remove a related competency
        """
        pass

    def test_core_competency_reopen_plan(self) -> None:
        """Test case for core_competency_reopen_plan

        Reopen learning plan.
        """
        pass

    def test_core_competency_reorder_course_competency(self) -> None:
        """Test case for core_competency_reorder_course_competency

        Move a course competency to a new relative sort order.
        """
        pass

    def test_core_competency_reorder_plan_competency(self) -> None:
        """Test case for core_competency_reorder_plan_competency

        Move a plan competency to a new relative sort order.
        """
        pass

    def test_core_competency_reorder_template_competency(self) -> None:
        """Test case for core_competency_reorder_template_competency

        Move a template competency to a new relative sort order.
        """
        pass

    def test_core_competency_request_review_of_user_evidence_linked_competencies(self) -> None:
        """Test case for core_competency_request_review_of_user_evidence_linked_competencies

        Send user evidence competencies in review
        """
        pass

    def test_core_competency_search_competencies(self) -> None:
        """Test case for core_competency_search_competencies

        Search a list of a competencies.
        """
        pass

    def test_core_competency_set_course_competency_ruleoutcome(self) -> None:
        """Test case for core_competency_set_course_competency_ruleoutcome

        Modify the ruleoutcome value for course competency
        """
        pass

    def test_core_competency_set_parent_competency(self) -> None:
        """Test case for core_competency_set_parent_competency

        Set a new parent for a competency.
        """
        pass

    def test_core_competency_template_has_related_data(self) -> None:
        """Test case for core_competency_template_has_related_data

        Check if a template has related data
        """
        pass

    def test_core_competency_template_viewed(self) -> None:
        """Test case for core_competency_template_viewed

        Log event template viewed
        """
        pass

    def test_core_competency_unapprove_plan(self) -> None:
        """Test case for core_competency_unapprove_plan

        Unapprove a plan.
        """
        pass

    def test_core_competency_unlink_plan_from_template(self) -> None:
        """Test case for core_competency_unlink_plan_from_template

        Unlink a plan form it template.
        """
        pass

    def test_core_competency_update_competency(self) -> None:
        """Test case for core_competency_update_competency

        Update a competency.
        """
        pass

    def test_core_competency_update_competency_framework(self) -> None:
        """Test case for core_competency_update_competency_framework

        Update a competency framework.
        """
        pass

    def test_core_competency_update_course_competency_settings(self) -> None:
        """Test case for core_competency_update_course_competency_settings

        Update the course competency settings
        """
        pass

    def test_core_competency_update_plan(self) -> None:
        """Test case for core_competency_update_plan

        Updates a learning plan.
        """
        pass

    def test_core_competency_update_template(self) -> None:
        """Test case for core_competency_update_template

        Update a learning plan template.
        """
        pass

    def test_core_competency_user_competency_cancel_review_request(self) -> None:
        """Test case for core_competency_user_competency_cancel_review_request

        Cancel a review request.
        """
        pass

    def test_core_competency_user_competency_plan_viewed(self) -> None:
        """Test case for core_competency_user_competency_plan_viewed

        Log the user competency plan viewed event.
        """
        pass

    def test_core_competency_user_competency_request_review(self) -> None:
        """Test case for core_competency_user_competency_request_review

        Request a review.
        """
        pass

    def test_core_competency_user_competency_start_review(self) -> None:
        """Test case for core_competency_user_competency_start_review

        Start a review.
        """
        pass

    def test_core_competency_user_competency_stop_review(self) -> None:
        """Test case for core_competency_user_competency_stop_review

        Stop a review.
        """
        pass

    def test_core_competency_user_competency_viewed(self) -> None:
        """Test case for core_competency_user_competency_viewed

        Log the user competency viewed event.
        """
        pass

    def test_core_competency_user_competency_viewed_in_course(self) -> None:
        """Test case for core_competency_user_competency_viewed_in_course

        Log the user competency viewed in course event
        """
        pass

    def test_core_competency_user_competency_viewed_in_plan(self) -> None:
        """Test case for core_competency_user_competency_viewed_in_plan

        Log the user competency viewed in plan event.
        """
        pass

    def test_core_completion_get_activities_completion_status(self) -> None:
        """Test case for core_completion_get_activities_completion_status

        Return the activities completion status for a user in a course.
        """
        pass

    def test_core_completion_get_course_completion_status(self) -> None:
        """Test case for core_completion_get_course_completion_status

        Returns course completion status.
        """
        pass

    def test_core_completion_mark_course_self_completed(self) -> None:
        """Test case for core_completion_mark_course_self_completed

        Update the course completion status for the current user (if course self-completion is enabled).
        """
        pass

    def test_core_completion_override_activity_completion_status(self) -> None:
        """Test case for core_completion_override_activity_completion_status

        Update completion status for a user in an activity by overriding it.
        """
        pass

    def test_core_completion_update_activity_completion_status_manually(self) -> None:
        """Test case for core_completion_update_activity_completion_status_manually

        Update completion status for the current user in an activity, only for activities with manual tracking.
        """
        pass

    def test_core_contentbank_copy_content(self) -> None:
        """Test case for core_contentbank_copy_content

        Copy a content in the content bank.
        """
        pass

    def test_core_contentbank_delete_content(self) -> None:
        """Test case for core_contentbank_delete_content

        Delete a content from the content bank.
        """
        pass

    def test_core_contentbank_rename_content(self) -> None:
        """Test case for core_contentbank_rename_content

        Rename a content in the content bank.
        """
        pass

    def test_core_contentbank_set_content_visibility(self) -> None:
        """Test case for core_contentbank_set_content_visibility

        Set the visibility of a content in the content bank.
        """
        pass

    def test_core_course_add_content_item_to_user_favourites(self) -> None:
        """Test case for core_course_add_content_item_to_user_favourites

        Adds a content item (activity, resource or their subtypes) to the favourites for the user.
        """
        pass

    def test_core_course_check_updates(self) -> None:
        """Test case for core_course_check_updates

        Check if there is updates affecting the user for the given course and contexts.
        """
        pass

    def test_core_course_create_categories(self) -> None:
        """Test case for core_course_create_categories

        Create course categories
        """
        pass

    def test_core_course_create_courses(self) -> None:
        """Test case for core_course_create_courses

        Create new courses
        """
        pass

    def test_core_course_delete_categories(self) -> None:
        """Test case for core_course_delete_categories

        Delete course categories
        """
        pass

    def test_core_course_delete_courses(self) -> None:
        """Test case for core_course_delete_courses

        Deletes all specified courses
        """
        pass

    def test_core_course_delete_modules(self) -> None:
        """Test case for core_course_delete_modules

        Deletes all specified module instances
        """
        pass

    def test_core_course_duplicate_course(self) -> None:
        """Test case for core_course_duplicate_course

        Duplicate an existing course (creating a new one).
        """
        pass

    def test_core_course_edit_module(self) -> None:
        """Test case for core_course_edit_module

        Performs an action on course module (change visibility, duplicate, delete, etc.)
        """
        pass

    def test_core_course_edit_section(self) -> None:
        """Test case for core_course_edit_section

        Performs an action on course section (change visibility, set marker, delete)
        """
        pass

    def test_core_course_get_activity_chooser_footer(self) -> None:
        """Test case for core_course_get_activity_chooser_footer

        Fetch the data for the activity chooser footer.
        """
        pass

    def test_core_course_get_categories(self) -> None:
        """Test case for core_course_get_categories

        Return category details
        """
        pass

    def test_core_course_get_contents(self) -> None:
        """Test case for core_course_get_contents

        Get course contents
        """
        pass

    def test_core_course_get_course_content_items(self) -> None:
        """Test case for core_course_get_course_content_items

        Fetch all the content items (activities, resources and their subtypes) for the activity picker
        """
        pass

    def test_core_course_get_course_module(self) -> None:
        """Test case for core_course_get_course_module

        Return information about a course module
        """
        pass

    def test_core_course_get_course_module_by_instance(self) -> None:
        """Test case for core_course_get_course_module_by_instance

        Return information about a given module name and instance id
        """
        pass

    def test_core_course_get_courses(self) -> None:
        """Test case for core_course_get_courses

        Return course details
        """
        pass

    def test_core_course_get_courses_by_field(self) -> None:
        """Test case for core_course_get_courses_by_field

        Get courses matching a specific field (id/s, shortname, idnumber, category)
        """
        pass

    def test_core_course_get_enrolled_courses_by_timeline_classification(self) -> None:
        """Test case for core_course_get_enrolled_courses_by_timeline_classification

        List of enrolled courses for the given timeline classification (past, inprogress, or future).
        """
        pass

    def test_core_course_get_enrolled_courses_with_action_events_by_timeline_classification(self) -> None:
        """Test case for core_course_get_enrolled_courses_with_action_events_by_timeline_classification

        List of enrolled courses with action events in a given timeframe, for the given timeline classification.
        """
        pass

    def test_core_course_get_enrolled_users_by_cmid(self) -> None:
        """Test case for core_course_get_enrolled_users_by_cmid

        List users by course module id, filter by group and active enrolment status.
        """
        pass

    def test_core_course_get_module(self) -> None:
        """Test case for core_course_get_module

        Returns html with one activity module on course page
        """
        pass

    def test_core_course_get_recent_courses(self) -> None:
        """Test case for core_course_get_recent_courses

        List of courses a user has accessed most recently.
        """
        pass

    def test_core_course_get_updates_since(self) -> None:
        """Test case for core_course_get_updates_since

        Check if there are updates affecting the user for the given course since the given time stamp.
        """
        pass

    def test_core_course_get_user_administration_options(self) -> None:
        """Test case for core_course_get_user_administration_options

        Return a list of administration options in a set of courses that are avaialable or not for the current                             user.
        """
        pass

    def test_core_course_get_user_navigation_options(self) -> None:
        """Test case for core_course_get_user_navigation_options

        Return a list of navigation options in a set of courses that are avaialable or not for the current user.
        """
        pass

    def test_core_course_import_course(self) -> None:
        """Test case for core_course_import_course

        Import course data from a course into another course. Does not include any user data.
        """
        pass

    def test_core_course_remove_content_item_from_user_favourites(self) -> None:
        """Test case for core_course_remove_content_item_from_user_favourites

        Removes a content item (activity, resource or their subtypes) from the favourites for the user.
        """
        pass

    def test_core_course_search_courses(self) -> None:
        """Test case for core_course_search_courses

        Search courses by (name, module, block, tag)
        """
        pass

    def test_core_course_set_favourite_courses(self) -> None:
        """Test case for core_course_set_favourite_courses

        Add a list of courses to the list of favourite courses.
        """
        pass

    def test_core_course_toggle_activity_recommendation(self) -> None:
        """Test case for core_course_toggle_activity_recommendation

        Adds or removes an activity as a recommendation in the activity chooser.
        """
        pass

    def test_core_course_update_categories(self) -> None:
        """Test case for core_course_update_categories

        Update categories
        """
        pass

    def test_core_course_update_courses(self) -> None:
        """Test case for core_course_update_courses

        Update courses
        """
        pass

    def test_core_course_view_course(self) -> None:
        """Test case for core_course_view_course

        Log that the course was viewed
        """
        pass

    def test_core_courseformat_file_handlers(self) -> None:
        """Test case for core_courseformat_file_handlers

        Get the current course file hanlders.
        """
        pass

    def test_core_courseformat_get_state(self) -> None:
        """Test case for core_courseformat_get_state

        Get the current course state.
        """
        pass

    def test_core_courseformat_update_course(self) -> None:
        """Test case for core_courseformat_update_course

        Update course contents.
        """
        pass

    def test_core_create_userfeedback_action_record(self) -> None:
        """Test case for core_create_userfeedback_action_record

        Record the action that the user takes in the user feedback notification for future use.
        """
        pass

    def test_core_customfield_create_category(self) -> None:
        """Test case for core_customfield_create_category

        Creates a new category
        """
        pass

    def test_core_customfield_delete_category(self) -> None:
        """Test case for core_customfield_delete_category

        Deletes a category
        """
        pass

    def test_core_customfield_delete_field(self) -> None:
        """Test case for core_customfield_delete_field

        Deletes an entry
        """
        pass

    def test_core_customfield_move_category(self) -> None:
        """Test case for core_customfield_move_category

        Drag and drop categories
        """
        pass

    def test_core_customfield_move_field(self) -> None:
        """Test case for core_customfield_move_field

        Drag and drop
        """
        pass

    def test_core_customfield_reload_template(self) -> None:
        """Test case for core_customfield_reload_template

        Reloads template
        """
        pass

    def test_core_dynamic_tabs_get_content(self) -> None:
        """Test case for core_dynamic_tabs_get_content

        Returns the content for a dynamic tab
        """
        pass

    def test_core_enrol_get_course_enrolment_methods(self) -> None:
        """Test case for core_enrol_get_course_enrolment_methods

        Get the list of course enrolment methods
        """
        pass

    def test_core_enrol_get_enrolled_users(self) -> None:
        """Test case for core_enrol_get_enrolled_users

        Get enrolled users by course id.
        """
        pass

    def test_core_enrol_get_enrolled_users_with_capability(self) -> None:
        """Test case for core_enrol_get_enrolled_users_with_capability

        For each course and capability specified, return a list of the users that are enrolled in the course                                   and have that capability
        """
        pass

    def test_core_enrol_get_potential_users(self) -> None:
        """Test case for core_enrol_get_potential_users

        Get the list of potential users to enrol
        """
        pass

    def test_core_enrol_get_users_courses(self) -> None:
        """Test case for core_enrol_get_users_courses

        Get the list of courses where a user is enrolled in
        """
        pass

    def test_core_enrol_search_users(self) -> None:
        """Test case for core_enrol_search_users

        Search within the list of course participants
        """
        pass

    def test_core_enrol_submit_user_enrolment_form(self) -> None:
        """Test case for core_enrol_submit_user_enrolment_form

        Submit form data for enrolment form
        """
        pass

    def test_core_enrol_unenrol_user_enrolment(self) -> None:
        """Test case for core_enrol_unenrol_user_enrolment

        External function that unenrols a given user enrolment
        """
        pass

    def test_core_fetch_notifications(self) -> None:
        """Test case for core_fetch_notifications

        Return a list of notifications for the current session
        """
        pass

    def test_core_files_delete_draft_files(self) -> None:
        """Test case for core_files_delete_draft_files

        Delete the indicated files (or directories) from a user draft file area.
        """
        pass

    def test_core_files_get_files(self) -> None:
        """Test case for core_files_get_files

        browse moodle files
        """
        pass

    def test_core_files_get_unused_draft_itemid(self) -> None:
        """Test case for core_files_get_unused_draft_itemid

        Generate a new draft itemid for the current user.
        """
        pass

    def test_core_files_upload(self) -> None:
        """Test case for core_files_upload

        upload a file to moodle
        """
        pass

    def test_core_filters_get_available_in_context(self) -> None:
        """Test case for core_filters_get_available_in_context

        Returns the filters available in the given contexts.
        """
        pass

    def test_core_form_dynamic_form(self) -> None:
        """Test case for core_form_dynamic_form

        Process submission of a dynamic (modal) form
        """
        pass

    def test_core_form_get_filetypes_browser_data(self) -> None:
        """Test case for core_form_get_filetypes_browser_data

        Provides data for the filetypes element browser.
        """
        pass

    def test_core_get_component_strings(self) -> None:
        """Test case for core_get_component_strings

        Return all raw strings (with {$a->xxx}), for a specific component - similar to core get_component_strings(), call
        """
        pass

    def test_core_get_fragment(self) -> None:
        """Test case for core_get_fragment

        Return a fragment for inclusion, such as a JavaScript page.
        """
        pass

    def test_core_get_string(self) -> None:
        """Test case for core_get_string

        Return a translated string - similar to core get_string(), call
        """
        pass

    def test_core_get_strings(self) -> None:
        """Test case for core_get_strings

        Return some translated strings - like several core get_string(), calls
        """
        pass

    def test_core_get_user_dates(self) -> None:
        """Test case for core_get_user_dates

        Return formatted timestamps
        """
        pass

    def test_core_grades_create_gradecategories(self) -> None:
        """Test case for core_grades_create_gradecategories

        Create grade categories inside a course gradebook.
        """
        pass

    def test_core_grades_get_enrolled_users_for_search_widget(self) -> None:
        """Test case for core_grades_get_enrolled_users_for_search_widget

        ** DEPRECATED ** Please do not call this function any more. Use core_grades_get_enrolled_users_for_selector instead. Returns the enrolled users within and map some fields to the returned array of user objects.
        """
        pass

    def test_core_grades_get_enrolled_users_for_selector(self) -> None:
        """Test case for core_grades_get_enrolled_users_for_selector

        Returns the enrolled users within and map some fields to the returned array of user objects.
        """
        pass

    def test_core_grades_get_feedback(self) -> None:
        """Test case for core_grades_get_feedback

        Get the feedback data for a grade item
        """
        pass

    def test_core_grades_get_gradable_users(self) -> None:
        """Test case for core_grades_get_gradable_users

        Returns the gradable users in a course
        """
        pass

    def test_core_grades_get_grade_tree(self) -> None:
        """Test case for core_grades_get_grade_tree

        Get the grade tree structure for a course
        """
        pass

    def test_core_grades_get_gradeitems(self) -> None:
        """Test case for core_grades_get_gradeitems

        Get the gradeitems for a course
        """
        pass

    def test_core_grades_get_groups_for_search_widget(self) -> None:
        """Test case for core_grades_get_groups_for_search_widget

        ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
        """
        pass

    def test_core_grades_get_groups_for_selector(self) -> None:
        """Test case for core_grades_get_groups_for_selector

        ** DEPRECATED ** Please do not call this function any more. Use core_group_get_groups_for_selector instead. Get the group/(s) for a course
        """
        pass

    def test_core_grades_grader_gradingpanel_point_fetch(self) -> None:
        """Test case for core_grades_grader_gradingpanel_point_fetch

        Fetch the data required to display the grader grading panel for simple grading, creating the grade item if required
        """
        pass

    def test_core_grades_grader_gradingpanel_point_store(self) -> None:
        """Test case for core_grades_grader_gradingpanel_point_store

        Store the data required to display the grader grading panel for simple grading
        """
        pass

    def test_core_grades_grader_gradingpanel_scale_fetch(self) -> None:
        """Test case for core_grades_grader_gradingpanel_scale_fetch

        Fetch the data required to display the grader grading panel for scale-based grading, creating the grade item if required
        """
        pass

    def test_core_grades_grader_gradingpanel_scale_store(self) -> None:
        """Test case for core_grades_grader_gradingpanel_scale_store

        Store the data required to display the grader grading panel for scale-based grading
        """
        pass

    def test_core_grades_update_grades(self) -> None:
        """Test case for core_grades_update_grades

        Update a grade item and associated student grades.
        """
        pass

    def test_core_grading_get_definitions(self) -> None:
        """Test case for core_grading_get_definitions

        Get grading definitions
        """
        pass

    def test_core_grading_get_gradingform_instances(self) -> None:
        """Test case for core_grading_get_gradingform_instances

        Get grading form instances
        """
        pass

    def test_core_grading_save_definitions(self) -> None:
        """Test case for core_grading_save_definitions

        Save grading definitions
        """
        pass

    def test_core_group_add_group_members(self) -> None:
        """Test case for core_group_add_group_members

        Adds group members.
        """
        pass

    def test_core_group_assign_grouping(self) -> None:
        """Test case for core_group_assign_grouping

        Assing groups from groupings
        """
        pass

    def test_core_group_create_groupings(self) -> None:
        """Test case for core_group_create_groupings

        Creates new groupings
        """
        pass

    def test_core_group_create_groups(self) -> None:
        """Test case for core_group_create_groups

        Creates new groups.
        """
        pass

    def test_core_group_delete_group_members(self) -> None:
        """Test case for core_group_delete_group_members

        Deletes group members.
        """
        pass

    def test_core_group_delete_groupings(self) -> None:
        """Test case for core_group_delete_groupings

        Deletes all specified groupings.
        """
        pass

    def test_core_group_delete_groups(self) -> None:
        """Test case for core_group_delete_groups

        Deletes all specified groups.
        """
        pass

    def test_core_group_get_activity_allowed_groups(self) -> None:
        """Test case for core_group_get_activity_allowed_groups

        Gets a list of groups that the user is allowed to access within the specified activity.
        """
        pass

    def test_core_group_get_activity_groupmode(self) -> None:
        """Test case for core_group_get_activity_groupmode

        Returns effective groupmode used in a given activity.
        """
        pass

    def test_core_group_get_course_groupings(self) -> None:
        """Test case for core_group_get_course_groupings

        Returns all groupings in specified course.
        """
        pass

    def test_core_group_get_course_groups(self) -> None:
        """Test case for core_group_get_course_groups

        Returns all groups in specified course.
        """
        pass

    def test_core_group_get_course_user_groups(self) -> None:
        """Test case for core_group_get_course_user_groups

        Returns all groups in specified course for the specified user.
        """
        pass

    def test_core_group_get_group_members(self) -> None:
        """Test case for core_group_get_group_members

        Returns group members.
        """
        pass

    def test_core_group_get_groupings(self) -> None:
        """Test case for core_group_get_groupings

        Returns groupings details.
        """
        pass

    def test_core_group_get_groups(self) -> None:
        """Test case for core_group_get_groups

        Returns group details.
        """
        pass

    def test_core_group_get_groups_for_selector(self) -> None:
        """Test case for core_group_get_groups_for_selector

        Get the group/(s) for a course
        """
        pass

    def test_core_group_unassign_grouping(self) -> None:
        """Test case for core_group_unassign_grouping

        Unassing groups from groupings
        """
        pass

    def test_core_group_update_groupings(self) -> None:
        """Test case for core_group_update_groupings

        Updates existing groupings
        """
        pass

    def test_core_group_update_groups(self) -> None:
        """Test case for core_group_update_groups

        Updates existing groups.
        """
        pass

    def test_core_h5p_get_trusted_h5p_file(self) -> None:
        """Test case for core_h5p_get_trusted_h5p_file

        Get the H5P file cleaned for Mobile App.
        """
        pass

    def test_core_message_block_user(self) -> None:
        """Test case for core_message_block_user

        Blocks a user
        """
        pass

    def test_core_message_confirm_contact_request(self) -> None:
        """Test case for core_message_confirm_contact_request

        Confirms a contact request
        """
        pass

    def test_core_message_create_contact_request(self) -> None:
        """Test case for core_message_create_contact_request

        Creates a contact request
        """
        pass

    def test_core_message_data_for_messagearea_search_messages(self) -> None:
        """Test case for core_message_data_for_messagearea_search_messages

        Retrieve the template data for searching for messages
        """
        pass

    def test_core_message_decline_contact_request(self) -> None:
        """Test case for core_message_decline_contact_request

        Declines a contact request
        """
        pass

    def test_core_message_delete_contacts(self) -> None:
        """Test case for core_message_delete_contacts

        Remove contacts from the contact list
        """
        pass

    def test_core_message_delete_conversations_by_id(self) -> None:
        """Test case for core_message_delete_conversations_by_id

        Deletes a list of conversations.
        """
        pass

    def test_core_message_delete_message(self) -> None:
        """Test case for core_message_delete_message

        Deletes a message.
        """
        pass

    def test_core_message_delete_message_for_all_users(self) -> None:
        """Test case for core_message_delete_message_for_all_users

        Deletes a message for all users.
        """
        pass

    def test_core_message_get_blocked_users(self) -> None:
        """Test case for core_message_get_blocked_users

        Retrieve a list of users blocked
        """
        pass

    def test_core_message_get_contact_requests(self) -> None:
        """Test case for core_message_get_contact_requests

        Returns contact requests for a user
        """
        pass

    def test_core_message_get_conversation(self) -> None:
        """Test case for core_message_get_conversation

        Retrieve a conversation for a user
        """
        pass

    def test_core_message_get_conversation_between_users(self) -> None:
        """Test case for core_message_get_conversation_between_users

        Retrieve a conversation for a user between another user
        """
        pass

    def test_core_message_get_conversation_counts(self) -> None:
        """Test case for core_message_get_conversation_counts

        Retrieve a list of conversation counts, indexed by type.
        """
        pass

    def test_core_message_get_conversation_members(self) -> None:
        """Test case for core_message_get_conversation_members

        Retrieve a list of members in a conversation
        """
        pass

    def test_core_message_get_conversation_messages(self) -> None:
        """Test case for core_message_get_conversation_messages

        Retrieve the conversation messages and relevant member information
        """
        pass

    def test_core_message_get_conversations(self) -> None:
        """Test case for core_message_get_conversations

        Retrieve a list of conversations for a user
        """
        pass

    def test_core_message_get_member_info(self) -> None:
        """Test case for core_message_get_member_info

        Retrieve a user message profiles
        """
        pass

    def test_core_message_get_message_processor(self) -> None:
        """Test case for core_message_get_message_processor

        Get a message processor
        """
        pass

    def test_core_message_get_messages(self) -> None:
        """Test case for core_message_get_messages

        Retrieve a list of messages sent and received by a user (conversations, notifications or both)
        """
        pass

    def test_core_message_get_received_contact_requests_count(self) -> None:
        """Test case for core_message_get_received_contact_requests_count

        Gets the number of received contact requests
        """
        pass

    def test_core_message_get_self_conversation(self) -> None:
        """Test case for core_message_get_self_conversation

        Retrieve a self-conversation for a user
        """
        pass

    def test_core_message_get_unread_conversation_counts(self) -> None:
        """Test case for core_message_get_unread_conversation_counts

        Retrieve a list of unread conversation counts, indexed by type.
        """
        pass

    def test_core_message_get_unread_conversations_count(self) -> None:
        """Test case for core_message_get_unread_conversations_count

        Retrieve the count of unread conversations for a given user
        """
        pass

    def test_core_message_get_unread_notification_count(self) -> None:
        """Test case for core_message_get_unread_notification_count

        Get number of unread notifications.
        """
        pass

    def test_core_message_get_user_contacts(self) -> None:
        """Test case for core_message_get_user_contacts

        Retrieve the contact list
        """
        pass

    def test_core_message_get_user_message_preferences(self) -> None:
        """Test case for core_message_get_user_message_preferences

        Get the message preferences for a given user.
        """
        pass

    def test_core_message_get_user_notification_preferences(self) -> None:
        """Test case for core_message_get_user_notification_preferences

        Get the notification preferences for a given user.
        """
        pass

    def test_core_message_mark_all_conversation_messages_as_read(self) -> None:
        """Test case for core_message_mark_all_conversation_messages_as_read

        Mark all conversation messages as read for a given user
        """
        pass

    def test_core_message_mark_all_notifications_as_read(self) -> None:
        """Test case for core_message_mark_all_notifications_as_read

        Mark all notifications as read for a given user
        """
        pass

    def test_core_message_mark_message_read(self) -> None:
        """Test case for core_message_mark_message_read

        Mark a single message as read, trigger message_viewed event.
        """
        pass

    def test_core_message_mark_notification_read(self) -> None:
        """Test case for core_message_mark_notification_read

        Mark a single notification as read, trigger notification_viewed event.
        """
        pass

    def test_core_message_message_processor_config_form(self) -> None:
        """Test case for core_message_message_processor_config_form

        Process the message processor config form
        """
        pass

    def test_core_message_message_search_users(self) -> None:
        """Test case for core_message_message_search_users

        Retrieve the data for searching for people
        """
        pass

    def test_core_message_mute_conversations(self) -> None:
        """Test case for core_message_mute_conversations

        Mutes a list of conversations
        """
        pass

    def test_core_message_search_contacts(self) -> None:
        """Test case for core_message_search_contacts

        Search for contacts
        """
        pass

    def test_core_message_send_instant_messages(self) -> None:
        """Test case for core_message_send_instant_messages

        Send instant messages
        """
        pass

    def test_core_message_send_messages_to_conversation(self) -> None:
        """Test case for core_message_send_messages_to_conversation

        Send messages to an existing conversation between users
        """
        pass

    def test_core_message_set_favourite_conversations(self) -> None:
        """Test case for core_message_set_favourite_conversations

        Mark a conversation or group of conversations as favourites/starred conversations.
        """
        pass

    def test_core_message_unblock_user(self) -> None:
        """Test case for core_message_unblock_user

        Unblocks a user
        """
        pass

    def test_core_message_unmute_conversations(self) -> None:
        """Test case for core_message_unmute_conversations

        Unmutes a list of conversations
        """
        pass

    def test_core_message_unset_favourite_conversations(self) -> None:
        """Test case for core_message_unset_favourite_conversations

        Unset a conversation or group of conversations as favourites/starred conversations.
        """
        pass

    def test_core_moodlenet_auth_check(self) -> None:
        """Test case for core_moodlenet_auth_check

        Check a user has authorized for a given MoodleNet site
        """
        pass

    def test_core_moodlenet_get_share_info_activity(self) -> None:
        """Test case for core_moodlenet_get_share_info_activity

        Get information about an activity being shared
        """
        pass

    def test_core_moodlenet_get_shared_course_info(self) -> None:
        """Test case for core_moodlenet_get_shared_course_info

        Get information about an course being shared
        """
        pass

    def test_core_moodlenet_send_activity(self) -> None:
        """Test case for core_moodlenet_send_activity

        Send activity to MoodleNet
        """
        pass

    def test_core_moodlenet_send_course(self) -> None:
        """Test case for core_moodlenet_send_course

        Send course to MoodleNet
        """
        pass

    def test_core_my_view_page(self) -> None:
        """Test case for core_my_view_page

        Trigger the My or Dashboard viewed event.
        """
        pass

    def test_core_notes_create_notes(self) -> None:
        """Test case for core_notes_create_notes

        Create notes
        """
        pass

    def test_core_notes_delete_notes(self) -> None:
        """Test case for core_notes_delete_notes

        Delete notes
        """
        pass

    def test_core_notes_get_course_notes(self) -> None:
        """Test case for core_notes_get_course_notes

        Returns all notes in specified course (or site), for the specified user.
        """
        pass

    def test_core_notes_get_notes(self) -> None:
        """Test case for core_notes_get_notes

        Get notes
        """
        pass

    def test_core_notes_update_notes(self) -> None:
        """Test case for core_notes_update_notes

        Update notes
        """
        pass

    def test_core_notes_view_notes(self) -> None:
        """Test case for core_notes_view_notes

        Simulates the web interface view of notes/index.php: trigger events.
        """
        pass

    def test_core_output_load_fontawesome_icon_map(self) -> None:
        """Test case for core_output_load_fontawesome_icon_map

        Load the mapping of names to icons
        """
        pass

    def test_core_output_load_fontawesome_icon_system_map(self) -> None:
        """Test case for core_output_load_fontawesome_icon_system_map

        Load the mapping of moodle pix names to fontawesome icon names
        """
        pass

    def test_core_output_load_template(self) -> None:
        """Test case for core_output_load_template

        Load a template for a renderable
        """
        pass

    def test_core_output_load_template_with_dependencies(self) -> None:
        """Test case for core_output_load_template_with_dependencies

        Load a template and its dependencies for a renderable
        """
        pass

    def test_core_payment_get_available_gateways(self) -> None:
        """Test case for core_payment_get_available_gateways

        Get the list of payment gateways that support the given component/area
        """
        pass

    def test_core_question_get_random_question_summaries(self) -> None:
        """Test case for core_question_get_random_question_summaries

        Get the random question set for a criteria
        """
        pass

    def test_core_question_submit_tags_form(self) -> None:
        """Test case for core_question_submit_tags_form

        Update the question tags.
        """
        pass

    def test_core_question_update_flag(self) -> None:
        """Test case for core_question_update_flag

        Update the flag state of a question attempt.
        """
        pass

    def test_core_rating_add_rating(self) -> None:
        """Test case for core_rating_add_rating

        Rates an item.
        """
        pass

    def test_core_rating_get_item_ratings(self) -> None:
        """Test case for core_rating_get_item_ratings

        Retrieve all the ratings for an item.
        """
        pass

    def test_core_reportbuilder_audiences_delete(self) -> None:
        """Test case for core_reportbuilder_audiences_delete

        Delete audience from report
        """
        pass

    def test_core_reportbuilder_can_view_system_report(self) -> None:
        """Test case for core_reportbuilder_can_view_system_report

        Determine access to a system report
        """
        pass

    def test_core_reportbuilder_columns_add(self) -> None:
        """Test case for core_reportbuilder_columns_add

        Add column to report
        """
        pass

    def test_core_reportbuilder_columns_delete(self) -> None:
        """Test case for core_reportbuilder_columns_delete

        Delete column from report
        """
        pass

    def test_core_reportbuilder_columns_reorder(self) -> None:
        """Test case for core_reportbuilder_columns_reorder

        Re-order column within report
        """
        pass

    def test_core_reportbuilder_columns_sort_get(self) -> None:
        """Test case for core_reportbuilder_columns_sort_get

        Retrieve column sorting for report
        """
        pass

    def test_core_reportbuilder_columns_sort_reorder(self) -> None:
        """Test case for core_reportbuilder_columns_sort_reorder

        Re-order column sorting within report
        """
        pass

    def test_core_reportbuilder_columns_sort_toggle(self) -> None:
        """Test case for core_reportbuilder_columns_sort_toggle

        Toggle sorting of column within report
        """
        pass

    def test_core_reportbuilder_conditions_add(self) -> None:
        """Test case for core_reportbuilder_conditions_add

        Add condition to report
        """
        pass

    def test_core_reportbuilder_conditions_delete(self) -> None:
        """Test case for core_reportbuilder_conditions_delete

        Delete condition from report
        """
        pass

    def test_core_reportbuilder_conditions_reorder(self) -> None:
        """Test case for core_reportbuilder_conditions_reorder

        Re-order condition within report
        """
        pass

    def test_core_reportbuilder_conditions_reset(self) -> None:
        """Test case for core_reportbuilder_conditions_reset

        Reset conditions for given report
        """
        pass

    def test_core_reportbuilder_filters_add(self) -> None:
        """Test case for core_reportbuilder_filters_add

        Add filter to report
        """
        pass

    def test_core_reportbuilder_filters_delete(self) -> None:
        """Test case for core_reportbuilder_filters_delete

        Delete filter from report
        """
        pass

    def test_core_reportbuilder_filters_reorder(self) -> None:
        """Test case for core_reportbuilder_filters_reorder

        Re-order filter within report
        """
        pass

    def test_core_reportbuilder_filters_reset(self) -> None:
        """Test case for core_reportbuilder_filters_reset

        Reset filters for given report
        """
        pass

    def test_core_reportbuilder_list_reports(self) -> None:
        """Test case for core_reportbuilder_list_reports

        List custom reports for current user
        """
        pass

    def test_core_reportbuilder_reports_delete(self) -> None:
        """Test case for core_reportbuilder_reports_delete

        Delete report
        """
        pass

    def test_core_reportbuilder_reports_get(self) -> None:
        """Test case for core_reportbuilder_reports_get

        Get custom report
        """
        pass

    def test_core_reportbuilder_retrieve_report(self) -> None:
        """Test case for core_reportbuilder_retrieve_report

        Retrieve custom report content
        """
        pass

    def test_core_reportbuilder_retrieve_system_report(self) -> None:
        """Test case for core_reportbuilder_retrieve_system_report

        Retrieve system report content
        """
        pass

    def test_core_reportbuilder_schedules_delete(self) -> None:
        """Test case for core_reportbuilder_schedules_delete

        Delete schedule from report
        """
        pass

    def test_core_reportbuilder_schedules_send(self) -> None:
        """Test case for core_reportbuilder_schedules_send

        Send report schedule
        """
        pass

    def test_core_reportbuilder_schedules_toggle(self) -> None:
        """Test case for core_reportbuilder_schedules_toggle

        Toggle state of report schedule
        """
        pass

    def test_core_reportbuilder_set_filters(self) -> None:
        """Test case for core_reportbuilder_set_filters

        Set filter values for given report
        """
        pass

    def test_core_reportbuilder_view_report(self) -> None:
        """Test case for core_reportbuilder_view_report

        Trigger custom report viewed
        """
        pass

    def test_core_role_assign_roles(self) -> None:
        """Test case for core_role_assign_roles

        Manual role assignments.
        """
        pass

    def test_core_role_unassign_roles(self) -> None:
        """Test case for core_role_unassign_roles

        Manual role unassignments.
        """
        pass

    def test_core_search_get_relevant_users(self) -> None:
        """Test case for core_search_get_relevant_users

        Gets relevant users for a search request.
        """
        pass

    def test_core_search_get_results(self) -> None:
        """Test case for core_search_get_results

        Get search results.
        """
        pass

    def test_core_search_get_search_areas_list(self) -> None:
        """Test case for core_search_get_search_areas_list

        Get search areas.
        """
        pass

    def test_core_search_get_top_results(self) -> None:
        """Test case for core_search_get_top_results

        Get top search results.
        """
        pass

    def test_core_search_view_results(self) -> None:
        """Test case for core_search_view_results

        Trigger view search results event.
        """
        pass

    def test_core_session_time_remaining(self) -> None:
        """Test case for core_session_time_remaining

        Count the seconds remaining in this session
        """
        pass

    def test_core_session_touch(self) -> None:
        """Test case for core_session_touch

        Keep the users session alive
        """
        pass

    def test_core_table_get_dynamic_table_content(self) -> None:
        """Test case for core_table_get_dynamic_table_content

        Get the dynamic table content raw html
        """
        pass

    def test_core_tag_get_tag_areas(self) -> None:
        """Test case for core_tag_get_tag_areas

        Retrieves existing tag areas.
        """
        pass

    def test_core_tag_get_tag_cloud(self) -> None:
        """Test case for core_tag_get_tag_cloud

        Retrieves a tag cloud for the given collection and/or query search.
        """
        pass

    def test_core_tag_get_tag_collections(self) -> None:
        """Test case for core_tag_get_tag_collections

        Retrieves existing tag collections.
        """
        pass

    def test_core_tag_get_tagindex(self) -> None:
        """Test case for core_tag_get_tagindex

        Gets tag index page for one tag and one tag area
        """
        pass

    def test_core_tag_get_tagindex_per_area(self) -> None:
        """Test case for core_tag_get_tagindex_per_area

        Gets tag index page per different areas.
        """
        pass

    def test_core_tag_get_tags(self) -> None:
        """Test case for core_tag_get_tags

        Gets tags by their ids
        """
        pass

    def test_core_tag_update_tags(self) -> None:
        """Test case for core_tag_update_tags

        Updates tags
        """
        pass

    def test_core_update_inplace_editable(self) -> None:
        """Test case for core_update_inplace_editable

        Generic service to update title
        """
        pass

    def test_core_user_add_user_device(self) -> None:
        """Test case for core_user_add_user_device

        Store mobile user devices information for PUSH Notifications.
        """
        pass

    def test_core_user_add_user_private_files(self) -> None:
        """Test case for core_user_add_user_private_files

        Copy files from a draft area to users private files area.
        """
        pass

    def test_core_user_agree_site_policy(self) -> None:
        """Test case for core_user_agree_site_policy

        Agree the site policy for the current user.
        """
        pass

    def test_core_user_create_users(self) -> None:
        """Test case for core_user_create_users

        Create users.
        """
        pass

    def test_core_user_delete_users(self) -> None:
        """Test case for core_user_delete_users

        Delete users.
        """
        pass

    def test_core_user_get_course_user_profiles(self) -> None:
        """Test case for core_user_get_course_user_profiles

        Get course user profiles (each of the profils matching a course id and a user id),.
        """
        pass

    def test_core_user_get_private_files_info(self) -> None:
        """Test case for core_user_get_private_files_info

        Returns general information about files in the user private files area.
        """
        pass

    def test_core_user_get_user_preferences(self) -> None:
        """Test case for core_user_get_user_preferences

        Return user preferences.
        """
        pass

    def test_core_user_get_users(self) -> None:
        """Test case for core_user_get_users

        search for users matching the parameters
        """
        pass

    def test_core_user_get_users_by_field(self) -> None:
        """Test case for core_user_get_users_by_field

        Retrieve users' information for a specified unique field - If you want to do a user search, use core_user_get_users() or core_user_search_identity().
        """
        pass

    def test_core_user_remove_user_device(self) -> None:
        """Test case for core_user_remove_user_device

        Remove a user device from the Moodle database.
        """
        pass

    def test_core_user_search_identity(self) -> None:
        """Test case for core_user_search_identity

        Return list of users identities matching the given criteria in their name or other identity fields.
        """
        pass

    def test_core_user_set_user_preferences(self) -> None:
        """Test case for core_user_set_user_preferences

        Set user preferences.
        """
        pass

    def test_core_user_update_picture(self) -> None:
        """Test case for core_user_update_picture

        Update or delete the user picture in the site
        """
        pass

    def test_core_user_update_user_device_public_key(self) -> None:
        """Test case for core_user_update_user_device_public_key

        Store mobile user public key.
        """
        pass

    def test_core_user_update_user_preferences(self) -> None:
        """Test case for core_user_update_user_preferences

        Update a user's preferences
        """
        pass

    def test_core_user_update_users(self) -> None:
        """Test case for core_user_update_users

        Update users.
        """
        pass

    def test_core_user_view_user_list(self) -> None:
        """Test case for core_user_view_user_list

        Simulates the web-interface view of user/index.php (triggering events),.
        """
        pass

    def test_core_user_view_user_profile(self) -> None:
        """Test case for core_user_view_user_profile

        Simulates the web-interface view of user/view.php and user/profile.php (triggering events),.
        """
        pass

    def test_core_webservice_get_site_info(self) -> None:
        """Test case for core_webservice_get_site_info

        Return some site info / user info / list web service functions
        """
        pass

    def test_core_xapi_delete_state(self) -> None:
        """Test case for core_xapi_delete_state

        Delete an xAPI state data from an activityId.
        """
        pass

    def test_core_xapi_delete_states(self) -> None:
        """Test case for core_xapi_delete_states

        Delete all xAPI state data from an activityId.
        """
        pass

    def test_core_xapi_get_state(self) -> None:
        """Test case for core_xapi_get_state

        Get an xAPI state data from an activityId.
        """
        pass

    def test_core_xapi_get_states(self) -> None:
        """Test case for core_xapi_get_states

        Get all state ID from an activityId.
        """
        pass

    def test_core_xapi_post_state(self) -> None:
        """Test case for core_xapi_post_state

        Post an xAPI state into an activityId.
        """
        pass

    def test_core_xapi_statement_post(self) -> None:
        """Test case for core_xapi_statement_post

        Post an xAPI statement.
        """
        pass


if __name__ == '__main__':
    unittest.main()
