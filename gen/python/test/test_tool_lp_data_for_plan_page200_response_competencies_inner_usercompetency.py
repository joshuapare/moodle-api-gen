# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.tool_lp_data_for_plan_page200_response_competencies_inner_usercompetency import ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetency

class TestToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetency(unittest.TestCase):
    """ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetency unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetency:
        """Test ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetency
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetency`
        """
        model = ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetency()
        if include_optional:
            return ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetency(
                canrequestreview = True,
                canreview = True,
                competencyid = 56,
                grade = 56,
                gradename = '',
                id = 56,
                iscancelreviewrequestallowed = True,
                isrequestreviewallowed = True,
                isstartreviewallowed = True,
                isstatusidle = True,
                isstatusinreview = True,
                isstatuswaitingforreview = True,
                isstopreviewallowed = True,
                proficiency = True,
                proficiencyname = '',
                reviewer = openapi_client.models.core_competency_grade_competency_200_response_actionuser.core_competency_grade_competency_200_response_actionuser(
                    department = '', 
                    email = '', 
                    fullname = '', 
                    id = 56, 
                    identity = '', 
                    idnumber = '', 
                    institution = '', 
                    phone1 = '', 
                    phone2 = '', 
                    profileimageurl = '', 
                    profileimageurlsmall = '', 
                    profileurl = '', ),
                reviewerid = 56,
                status = 56,
                statusname = '',
                timecreated = 56,
                timemodified = 56,
                url = '',
                userid = 56,
                usermodified = 56
            )
        else:
            return ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetency(
                canrequestreview = True,
                canreview = True,
                competencyid = 56,
                grade = 56,
                gradename = '',
                id = 56,
                iscancelreviewrequestallowed = True,
                isrequestreviewallowed = True,
                isstartreviewallowed = True,
                isstatusidle = True,
                isstatusinreview = True,
                isstatuswaitingforreview = True,
                isstopreviewallowed = True,
                proficiency = True,
                proficiencyname = '',
                reviewerid = 56,
                status = 56,
                statusname = '',
                timecreated = 56,
                timemodified = 56,
                url = '',
                userid = 56,
                usermodified = 56,
        )
        """

    def testToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetency(self):
        """Test ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetency"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
