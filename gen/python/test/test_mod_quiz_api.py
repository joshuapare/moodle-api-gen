# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.mod_quiz_api import ModQuizApi


class TestModQuizApi(unittest.TestCase):
    """ModQuizApi unit test stubs"""

    def setUp(self) -> None:
        self.api = ModQuizApi()

    def tearDown(self) -> None:
        pass

    def test_mod_quiz_add_random_questions(self) -> None:
        """Test case for mod_quiz_add_random_questions

        Add a number of random questions to a quiz.
        """
        pass

    def test_mod_quiz_get_attempt_access_information(self) -> None:
        """Test case for mod_quiz_get_attempt_access_information

        Return access information for a given attempt in a quiz.
        """
        pass

    def test_mod_quiz_get_attempt_data(self) -> None:
        """Test case for mod_quiz_get_attempt_data

        Returns information for the given attempt page for a quiz attempt in progress.
        """
        pass

    def test_mod_quiz_get_attempt_review(self) -> None:
        """Test case for mod_quiz_get_attempt_review

        Returns review information for the given finished attempt, can be used by users or teachers.
        """
        pass

    def test_mod_quiz_get_attempt_summary(self) -> None:
        """Test case for mod_quiz_get_attempt_summary

        Returns a summary of a quiz attempt before it is submitted.
        """
        pass

    def test_mod_quiz_get_combined_review_options(self) -> None:
        """Test case for mod_quiz_get_combined_review_options

        Combines the review options from a number of different quiz attempts.
        """
        pass

    def test_mod_quiz_get_quiz_access_information(self) -> None:
        """Test case for mod_quiz_get_quiz_access_information

        Return access information for a given quiz.
        """
        pass

    def test_mod_quiz_get_quiz_feedback_for_grade(self) -> None:
        """Test case for mod_quiz_get_quiz_feedback_for_grade

        Get the feedback text that should be show to a student who got the given grade in the given quiz.
        """
        pass

    def test_mod_quiz_get_quiz_required_qtypes(self) -> None:
        """Test case for mod_quiz_get_quiz_required_qtypes

        Return the potential question types that would be required for a given quiz.
        """
        pass

    def test_mod_quiz_get_quizzes_by_courses(self) -> None:
        """Test case for mod_quiz_get_quizzes_by_courses

        Returns a list of quizzes in a provided list of courses,                             if no list is provided all quizzes that the user can view will be returned.
        """
        pass

    def test_mod_quiz_get_reopen_attempt_confirmation(self) -> None:
        """Test case for mod_quiz_get_reopen_attempt_confirmation

        Verify it is OK to re-open a given quiz attempt, and if so, return a suitable confirmation message.
        """
        pass

    def test_mod_quiz_get_user_attempts(self) -> None:
        """Test case for mod_quiz_get_user_attempts

        Return a list of attempts for the given quiz and user.
        """
        pass

    def test_mod_quiz_get_user_best_grade(self) -> None:
        """Test case for mod_quiz_get_user_best_grade

        Get the best current grade for the given user on a quiz.
        """
        pass

    def test_mod_quiz_process_attempt(self) -> None:
        """Test case for mod_quiz_process_attempt

        Process responses during an attempt at a quiz and also deals with attempts finishing.
        """
        pass

    def test_mod_quiz_reopen_attempt(self) -> None:
        """Test case for mod_quiz_reopen_attempt

        Re-open an attempt that is currently in the never submitted state.
        """
        pass

    def test_mod_quiz_save_attempt(self) -> None:
        """Test case for mod_quiz_save_attempt

        Processes save requests during the quiz.                             This function is intended for the quiz auto-save feature.
        """
        pass

    def test_mod_quiz_set_question_version(self) -> None:
        """Test case for mod_quiz_set_question_version

        Set the version of question that would be required for a given quiz.
        """
        pass

    def test_mod_quiz_start_attempt(self) -> None:
        """Test case for mod_quiz_start_attempt

        Starts a new attempt at a quiz.
        """
        pass

    def test_mod_quiz_update_filter_condition(self) -> None:
        """Test case for mod_quiz_update_filter_condition

        Update filter condition for a random question slot.
        """
        pass

    def test_mod_quiz_view_attempt(self) -> None:
        """Test case for mod_quiz_view_attempt

        Trigger the attempt viewed event.
        """
        pass

    def test_mod_quiz_view_attempt_review(self) -> None:
        """Test case for mod_quiz_view_attempt_review

        Trigger the attempt reviewed event.
        """
        pass

    def test_mod_quiz_view_attempt_summary(self) -> None:
        """Test case for mod_quiz_view_attempt_summary

        Trigger the attempt summary viewed event.
        """
        pass

    def test_mod_quiz_view_quiz(self) -> None:
        """Test case for mod_quiz_view_quiz

        Trigger the course module viewed event and update the module completion status.
        """
        pass


if __name__ == '__main__':
    unittest.main()
