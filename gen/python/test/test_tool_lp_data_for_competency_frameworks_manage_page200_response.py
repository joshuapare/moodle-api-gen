# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.tool_lp_data_for_competency_frameworks_manage_page200_response import ToolLpDataForCompetencyFrameworksManagePage200Response

class TestToolLpDataForCompetencyFrameworksManagePage200Response(unittest.TestCase):
    """ToolLpDataForCompetencyFrameworksManagePage200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ToolLpDataForCompetencyFrameworksManagePage200Response:
        """Test ToolLpDataForCompetencyFrameworksManagePage200Response
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ToolLpDataForCompetencyFrameworksManagePage200Response`
        """
        model = ToolLpDataForCompetencyFrameworksManagePage200Response()
        if include_optional:
            return ToolLpDataForCompetencyFrameworksManagePage200Response(
                competencyframeworks = [
                    openapi_client.models.tool_lp_data_for_competency_frameworks_manage_page_200_response_competencyframeworks_inner.tool_lp_data_for_competency_frameworks_manage_page_200_response_competencyframeworks_inner(
                        canmanage = True, 
                        competenciescount = 56, 
                        contextid = 56, 
                        contextname = '', 
                        contextnamenoprefix = '', 
                        description = '', 
                        descriptionformat = 56, 
                        id = 56, 
                        idnumber = '', 
                        scaleconfiguration = '', 
                        scaleid = 56, 
                        shortname = '', 
                        taxonomies = '', 
                        timecreated = 56, 
                        timemodified = 56, 
                        usermodified = 56, 
                        visible = True, )
                    ],
                navigation = [
                    None
                    ],
                pagecontextid = 56,
                pluginbaseurl = 'null'
            )
        else:
            return ToolLpDataForCompetencyFrameworksManagePage200Response(
                competencyframeworks = [
                    openapi_client.models.tool_lp_data_for_competency_frameworks_manage_page_200_response_competencyframeworks_inner.tool_lp_data_for_competency_frameworks_manage_page_200_response_competencyframeworks_inner(
                        canmanage = True, 
                        competenciescount = 56, 
                        contextid = 56, 
                        contextname = '', 
                        contextnamenoprefix = '', 
                        description = '', 
                        descriptionformat = 56, 
                        id = 56, 
                        idnumber = '', 
                        scaleconfiguration = '', 
                        scaleid = 56, 
                        shortname = '', 
                        taxonomies = '', 
                        timecreated = 56, 
                        timemodified = 56, 
                        usermodified = 56, 
                        visible = True, )
                    ],
                navigation = [
                    None
                    ],
                pagecontextid = 56,
                pluginbaseurl = 'null',
        )
        """

    def testToolLpDataForCompetencyFrameworksManagePage200Response(self):
        """Test ToolLpDataForCompetencyFrameworksManagePage200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
