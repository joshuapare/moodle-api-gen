# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ModLessonGetPageData200ResponsePage(BaseModel):
    """
    ModLessonGetPageData200ResponsePage
    """ # noqa: E501
    contents: Optional[StrictStr] = Field(default='null', description="The contents of this page")
    contentsformat: Optional[StrictInt] = Field(default=null, description="contents format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    display: StrictInt = Field(description="Used to record page specific display selections")
    displayinmenublock: StrictBool = Field(description="Toggles display in the left menu block")
    id: StrictInt = Field(description="The id of this lesson page")
    layout: StrictInt = Field(description="Used to record page specific layout selections")
    lessonid: StrictInt = Field(description="The id of the lesson this page belongs to")
    nextpageid: StrictInt = Field(description="The id of the next page in the page sequence")
    prevpageid: StrictInt = Field(description="The id of the page before this one")
    qoption: StrictInt = Field(description="Used to record page type specific options")
    qtype: StrictInt = Field(description="Identifies the page type of this page")
    timecreated: StrictInt = Field(description="Timestamp for when the page was created")
    timemodified: StrictInt = Field(description="Timestamp for when the page was last modified")
    title: Optional[StrictStr] = Field(default='null', description="The title of this page")
    type: StrictInt = Field(description="The type of the page [question | structure]")
    typeid: StrictInt = Field(description="The unique identifier for the page type")
    typestring: StrictStr = Field(description="The string that describes this page type")
    __properties: ClassVar[List[str]] = ["contents", "contentsformat", "display", "displayinmenublock", "id", "layout", "lessonid", "nextpageid", "prevpageid", "qoption", "qtype", "timecreated", "timemodified", "title", "type", "typeid", "typestring"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModLessonGetPageData200ResponsePage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModLessonGetPageData200ResponsePage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contents": obj.get("contents") if obj.get("contents") is not None else 'null',
            "contentsformat": obj.get("contentsformat") if obj.get("contentsformat") is not None else null,
            "display": obj.get("display") if obj.get("display") is not None else null,
            "displayinmenublock": obj.get("displayinmenublock") if obj.get("displayinmenublock") is not None else False,
            "id": obj.get("id") if obj.get("id") is not None else null,
            "layout": obj.get("layout") if obj.get("layout") is not None else null,
            "lessonid": obj.get("lessonid") if obj.get("lessonid") is not None else null,
            "nextpageid": obj.get("nextpageid") if obj.get("nextpageid") is not None else null,
            "prevpageid": obj.get("prevpageid") if obj.get("prevpageid") is not None else null,
            "qoption": obj.get("qoption") if obj.get("qoption") is not None else null,
            "qtype": obj.get("qtype") if obj.get("qtype") is not None else null,
            "timecreated": obj.get("timecreated") if obj.get("timecreated") is not None else null,
            "timemodified": obj.get("timemodified") if obj.get("timemodified") is not None else null,
            "title": obj.get("title") if obj.get("title") is not None else 'null',
            "type": obj.get("type") if obj.get("type") is not None else null,
            "typeid": obj.get("typeid") if obj.get("typeid") is not None else null,
            "typestring": obj.get("typestring") if obj.get("typestring") is not None else 'null'
        })
        return _obj


