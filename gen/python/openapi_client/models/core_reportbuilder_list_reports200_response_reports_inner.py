# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_competency_grade_competency200_response_actionuser import CoreCompetencyGradeCompetency200ResponseActionuser
from typing import Optional, Set
from typing_extensions import Self

class CoreReportbuilderListReports200ResponseReportsInner(BaseModel):
    """
    CoreReportbuilderListReports200ResponseReportsInner
    """ # noqa: E501
    area: Optional[StrictStr] = Field(default='', description="area")
    component: Optional[StrictStr] = Field(default='', description="component")
    conditiondata: Optional[StrictStr] = Field(default='null', description="conditiondata")
    contextid: Optional[StrictInt] = Field(default={}, description="contextid")
    id: Optional[StrictInt] = Field(default=0, description="id")
    itemid: Optional[StrictInt] = Field(default=0, description="itemid")
    modifiedby: Optional[CoreCompetencyGradeCompetency200ResponseActionuser] = None
    name: Optional[StrictStr] = Field(default=None, description="name")
    settingsdata: Optional[StrictStr] = Field(default='null', description="settingsdata")
    source: Optional[StrictStr] = Field(default='null', description="source")
    sourcename: Optional[StrictStr] = Field(default='null', description="sourcename")
    timecreated: Optional[StrictInt] = Field(default=0, description="timecreated")
    timemodified: Optional[StrictInt] = Field(default=0, description="timemodified")
    type: Optional[StrictInt] = Field(default=null, description="type")
    uniquerows: Optional[StrictBool] = Field(default=False, description="uniquerows")
    usercreated: Optional[StrictInt] = Field(default={}, description="usercreated")
    usermodified: Optional[StrictInt] = Field(default=0, description="usermodified")
    __properties: ClassVar[List[str]] = ["area", "component", "conditiondata", "contextid", "id", "itemid", "modifiedby", "name", "settingsdata", "source", "sourcename", "timecreated", "timemodified", "type", "uniquerows", "usercreated", "usermodified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreReportbuilderListReports200ResponseReportsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of modifiedby
        if self.modifiedby:
            _dict['modifiedby'] = self.modifiedby.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreReportbuilderListReports200ResponseReportsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "area": obj.get("area") if obj.get("area") is not None else '',
            "component": obj.get("component") if obj.get("component") is not None else '',
            "conditiondata": obj.get("conditiondata") if obj.get("conditiondata") is not None else 'null',
            "contextid": obj.get("contextid") if obj.get("contextid") is not None else {},
            "id": obj.get("id") if obj.get("id") is not None else 0,
            "itemid": obj.get("itemid") if obj.get("itemid") is not None else 0,
            "modifiedby": CoreCompetencyGradeCompetency200ResponseActionuser.from_dict(obj["modifiedby"]) if obj.get("modifiedby") is not None else None,
            "name": obj.get("name"),
            "settingsdata": obj.get("settingsdata") if obj.get("settingsdata") is not None else 'null',
            "source": obj.get("source") if obj.get("source") is not None else 'null',
            "sourcename": obj.get("sourcename") if obj.get("sourcename") is not None else 'null',
            "timecreated": obj.get("timecreated") if obj.get("timecreated") is not None else 0,
            "timemodified": obj.get("timemodified") if obj.get("timemodified") is not None else 0,
            "type": obj.get("type") if obj.get("type") is not None else null,
            "uniquerows": obj.get("uniquerows") if obj.get("uniquerows") is not None else False,
            "usercreated": obj.get("usercreated") if obj.get("usercreated") is not None else {},
            "usermodified": obj.get("usermodified") if obj.get("usermodified") is not None else 0
        })
        return _obj


