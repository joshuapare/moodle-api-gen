# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_client.models.mod_feedback_get_analysis200_response_itemsdata_inner_item_itemfiles_inner import ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner
from typing import Optional, Set
from typing_extensions import Self

class ModFeedbackGetAnalysis200ResponseItemsdataInnerItem(BaseModel):
    """
    ModFeedbackGetAnalysis200ResponseItemsdataInnerItem
    """ # noqa: E501
    dependitem: StrictInt = Field(description="The item id this item depend on.")
    dependvalue: StrictStr = Field(description="The depend value.")
    feedback: StrictInt = Field(description="The feedback instance id this records belongs to.")
    hasvalue: StrictInt = Field(description="Whether it has a value or not.")
    id: StrictInt = Field(description="The record id.")
    itemfiles: List[ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner]
    itemnumber: StrictInt = Field(description="The item position number")
    label: StrictStr = Field(description="The item label.")
    name: StrictStr = Field(description="The item name.")
    options: StrictStr = Field(description="Different additional settings for the item (question).")
    otherdata: StrictStr = Field(description="Additional data that may be required by external functions")
    position: StrictInt = Field(description="The position in the list of questions.")
    presentation: StrictStr = Field(description="The text describing the item or the available possible answers.")
    required: StrictBool = Field(description="Whether is a item (question) required or not.")
    template: StrictInt = Field(description="If it belogns to a template, the template id.")
    typ: StrictStr = Field(description="The type of the item.")
    __properties: ClassVar[List[str]] = ["dependitem", "dependvalue", "feedback", "hasvalue", "id", "itemfiles", "itemnumber", "label", "name", "options", "otherdata", "position", "presentation", "required", "template", "typ"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModFeedbackGetAnalysis200ResponseItemsdataInnerItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in itemfiles (list)
        _items = []
        if self.itemfiles:
            for _item in self.itemfiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['itemfiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModFeedbackGetAnalysis200ResponseItemsdataInnerItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dependitem": obj.get("dependitem") if obj.get("dependitem") is not None else 0,
            "dependvalue": obj.get("dependvalue") if obj.get("dependvalue") is not None else 'null',
            "feedback": obj.get("feedback") if obj.get("feedback") is not None else 0,
            "hasvalue": obj.get("hasvalue") if obj.get("hasvalue") is not None else 0,
            "id": obj.get("id") if obj.get("id") is not None else null,
            "itemfiles": [ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner.from_dict(_item) for _item in obj["itemfiles"]] if obj.get("itemfiles") is not None else None,
            "itemnumber": obj.get("itemnumber") if obj.get("itemnumber") is not None else null,
            "label": obj.get("label") if obj.get("label") is not None else 'null',
            "name": obj.get("name") if obj.get("name") is not None else 'null',
            "options": obj.get("options") if obj.get("options") is not None else 'null',
            "otherdata": obj.get("otherdata") if obj.get("otherdata") is not None else 'null',
            "position": obj.get("position") if obj.get("position") is not None else 0,
            "presentation": obj.get("presentation") if obj.get("presentation") is not None else 'null',
            "required": obj.get("required") if obj.get("required") is not None else False,
            "template": obj.get("template") if obj.get("template") is not None else 0,
            "typ": obj.get("typ") if obj.get("typ") is not None else 'null'
        })
        return _obj


