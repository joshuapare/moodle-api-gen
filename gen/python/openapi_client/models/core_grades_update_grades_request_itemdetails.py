# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CoreGradesUpdateGradesRequestItemdetails(BaseModel):
    """
    CoreGradesUpdateGradesRequestItemdetails
    """ # noqa: E501
    deleted: Optional[StrictBool] = Field(default=False, description="True if the grade item should be deleted")
    grademax: Optional[Union[StrictFloat, StrictInt]] = Field(default=null, description="Maximum grade allowed")
    grademin: Optional[Union[StrictFloat, StrictInt]] = Field(default=null, description="Minimum grade allowed")
    gradetype: Optional[StrictInt] = Field(default=null, description="The type of grade (0 = none, 1 = value, 2 = scale, 3 = text)")
    hidden: Optional[StrictBool] = Field(default=False, description="True if the grade item is hidden")
    idnumber: Optional[StrictInt] = Field(default=null, description="Arbitrary ID provided by the module responsible for the grade item")
    itemname: Optional[StrictStr] = Field(default='null', description="The grade item name")
    multfactor: Optional[Union[StrictFloat, StrictInt]] = Field(default=null, description="Multiply all grades by this number")
    plusfactor: Optional[Union[StrictFloat, StrictInt]] = Field(default=null, description="Add this to all grades")
    scaleid: Optional[StrictInt] = Field(default=null, description="The ID of the custom scale being is used")
    __properties: ClassVar[List[str]] = ["deleted", "grademax", "grademin", "gradetype", "hidden", "idnumber", "itemname", "multfactor", "plusfactor", "scaleid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreGradesUpdateGradesRequestItemdetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreGradesUpdateGradesRequestItemdetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deleted": obj.get("deleted") if obj.get("deleted") is not None else False,
            "grademax": obj.get("grademax") if obj.get("grademax") is not None else null,
            "grademin": obj.get("grademin") if obj.get("grademin") is not None else null,
            "gradetype": obj.get("gradetype") if obj.get("gradetype") is not None else null,
            "hidden": obj.get("hidden") if obj.get("hidden") is not None else False,
            "idnumber": obj.get("idnumber") if obj.get("idnumber") is not None else null,
            "itemname": obj.get("itemname") if obj.get("itemname") is not None else 'null',
            "multfactor": obj.get("multfactor") if obj.get("multfactor") is not None else null,
            "plusfactor": obj.get("plusfactor") if obj.get("plusfactor") is not None else null,
            "scaleid": obj.get("scaleid") if obj.get("scaleid") is not None else null
        })
        return _obj


