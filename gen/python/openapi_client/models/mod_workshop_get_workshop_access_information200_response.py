# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auth_email_signup_user200_response_warnings_inner import AuthEmailSignupUser200ResponseWarningsInner
from typing import Optional, Set
from typing_extensions import Self

class ModWorkshopGetWorkshopAccessInformation200Response(BaseModel):
    """
    ModWorkshopGetWorkshopAccessInformation200Response
    """ # noqa: E501
    assessingallowed: StrictBool = Field(description="Is the user allowed to create/edit his assessments?")
    assessingexamplesallowed: StrictBool = Field(description="Are reviewers allowed to create/edit their assessments of the example submissions?.")
    canaddinstance: StrictBool = Field(description="Whether the user has the capability mod/workshop:addinstance allowed.")
    canallocate: StrictBool = Field(description="Whether the user has the capability mod/workshop:allocate allowed.")
    candeletesubmissions: StrictBool = Field(description="Whether the user has the capability mod/workshop:deletesubmissions allowed.")
    caneditdimensions: StrictBool = Field(description="Whether the user has the capability mod/workshop:editdimensions allowed.")
    canexportsubmissions: StrictBool = Field(description="Whether the user has the capability mod/workshop:exportsubmissions allowed.")
    canignoredeadlines: StrictBool = Field(description="Whether the user has the capability mod/workshop:ignoredeadlines allowed.")
    canmanageexamples: StrictBool = Field(description="Whether the user has the capability mod/workshop:manageexamples allowed.")
    canoverridegrades: StrictBool = Field(description="Whether the user has the capability mod/workshop:overridegrades allowed.")
    canpeerassess: StrictBool = Field(description="Whether the user has the capability mod/workshop:peerassess allowed.")
    canpublishsubmissions: StrictBool = Field(description="Whether the user has the capability mod/workshop:publishsubmissions allowed.")
    cansubmit: StrictBool = Field(description="Whether the user has the capability mod/workshop:submit allowed.")
    canswitchphase: StrictBool = Field(description="Whether the user has the capability mod/workshop:switchphase allowed.")
    canview: StrictBool = Field(description="Whether the user has the capability mod/workshop:view allowed.")
    canviewallassessments: StrictBool = Field(description="Whether the user has the capability mod/workshop:viewallassessments allowed.")
    canviewallsubmissions: StrictBool = Field(description="Whether the user has the capability mod/workshop:viewallsubmissions allowed.")
    canviewauthornames: StrictBool = Field(description="Whether the user has the capability mod/workshop:viewauthornames allowed.")
    canviewauthorpublished: StrictBool = Field(description="Whether the user has the capability mod/workshop:viewauthorpublished allowed.")
    canviewpublishedsubmissions: StrictBool = Field(description="Whether the user has the capability mod/workshop:viewpublishedsubmissions allowed.")
    canviewreviewernames: StrictBool = Field(description="Whether the user has the capability mod/workshop:viewreviewernames allowed.")
    creatingsubmissionallowed: StrictBool = Field(description="Is the given user allowed to create their submission?")
    examplesassessedbeforeassessment: StrictBool = Field(description="Whether the given user has assessed all his required examples before assessment                 (always true if there are not examples to assessor not configured to check before assessment).")
    examplesassessedbeforesubmission: StrictBool = Field(description="Whether the given user has assessed all his required examples before submission                 (always true if there are not examples to assess or not configured to check before submission).")
    modifyingsubmissionallowed: StrictBool = Field(description="Is the user allowed to modify his existing submission?")
    warnings: Optional[List[AuthEmailSignupUser200ResponseWarningsInner]] = None
    __properties: ClassVar[List[str]] = ["assessingallowed", "assessingexamplesallowed", "canaddinstance", "canallocate", "candeletesubmissions", "caneditdimensions", "canexportsubmissions", "canignoredeadlines", "canmanageexamples", "canoverridegrades", "canpeerassess", "canpublishsubmissions", "cansubmit", "canswitchphase", "canview", "canviewallassessments", "canviewallsubmissions", "canviewauthornames", "canviewauthorpublished", "canviewpublishedsubmissions", "canviewreviewernames", "creatingsubmissionallowed", "examplesassessedbeforeassessment", "examplesassessedbeforesubmission", "modifyingsubmissionallowed", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModWorkshopGetWorkshopAccessInformation200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item in self.warnings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['warnings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModWorkshopGetWorkshopAccessInformation200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assessingallowed": obj.get("assessingallowed") if obj.get("assessingallowed") is not None else False,
            "assessingexamplesallowed": obj.get("assessingexamplesallowed") if obj.get("assessingexamplesallowed") is not None else False,
            "canaddinstance": obj.get("canaddinstance") if obj.get("canaddinstance") is not None else False,
            "canallocate": obj.get("canallocate") if obj.get("canallocate") is not None else False,
            "candeletesubmissions": obj.get("candeletesubmissions") if obj.get("candeletesubmissions") is not None else False,
            "caneditdimensions": obj.get("caneditdimensions") if obj.get("caneditdimensions") is not None else False,
            "canexportsubmissions": obj.get("canexportsubmissions") if obj.get("canexportsubmissions") is not None else False,
            "canignoredeadlines": obj.get("canignoredeadlines") if obj.get("canignoredeadlines") is not None else False,
            "canmanageexamples": obj.get("canmanageexamples") if obj.get("canmanageexamples") is not None else False,
            "canoverridegrades": obj.get("canoverridegrades") if obj.get("canoverridegrades") is not None else False,
            "canpeerassess": obj.get("canpeerassess") if obj.get("canpeerassess") is not None else False,
            "canpublishsubmissions": obj.get("canpublishsubmissions") if obj.get("canpublishsubmissions") is not None else False,
            "cansubmit": obj.get("cansubmit") if obj.get("cansubmit") is not None else False,
            "canswitchphase": obj.get("canswitchphase") if obj.get("canswitchphase") is not None else False,
            "canview": obj.get("canview") if obj.get("canview") is not None else False,
            "canviewallassessments": obj.get("canviewallassessments") if obj.get("canviewallassessments") is not None else False,
            "canviewallsubmissions": obj.get("canviewallsubmissions") if obj.get("canviewallsubmissions") is not None else False,
            "canviewauthornames": obj.get("canviewauthornames") if obj.get("canviewauthornames") is not None else False,
            "canviewauthorpublished": obj.get("canviewauthorpublished") if obj.get("canviewauthorpublished") is not None else False,
            "canviewpublishedsubmissions": obj.get("canviewpublishedsubmissions") if obj.get("canviewpublishedsubmissions") is not None else False,
            "canviewreviewernames": obj.get("canviewreviewernames") if obj.get("canviewreviewernames") is not None else False,
            "creatingsubmissionallowed": obj.get("creatingsubmissionallowed") if obj.get("creatingsubmissionallowed") is not None else False,
            "examplesassessedbeforeassessment": obj.get("examplesassessedbeforeassessment") if obj.get("examplesassessedbeforeassessment") is not None else False,
            "examplesassessedbeforesubmission": obj.get("examplesassessedbeforesubmission") if obj.get("examplesassessedbeforesubmission") is not None else False,
            "modifyingsubmissionallowed": obj.get("modifyingsubmissionallowed") if obj.get("modifyingsubmissionallowed") is not None else False,
            "warnings": [AuthEmailSignupUser200ResponseWarningsInner.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj


