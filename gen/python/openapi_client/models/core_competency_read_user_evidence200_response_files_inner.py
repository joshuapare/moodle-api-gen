# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreCompetencyReadUserEvidence200ResponseFilesInner(BaseModel):
    """
    CoreCompetencyReadUserEvidence200ResponseFilesInner
    """ # noqa: E501
    author: Optional[StrictStr] = Field(default='null', description="author")
    component: Optional[StrictStr] = Field(default=None, description="component")
    contextid: Optional[StrictInt] = Field(default=None, description="contextid")
    filearea: Optional[StrictStr] = Field(default='null', description="filearea")
    filename: Optional[StrictStr] = Field(default='null', description="filename")
    filenameshort: Optional[StrictStr] = Field(default='null', description="filenameshort")
    filepath: Optional[StrictStr] = Field(default='null', description="filepath")
    filesize: Optional[StrictInt] = Field(default=null, description="filesize")
    filesizeformatted: Optional[StrictStr] = Field(default='null', description="filesizeformatted")
    icon: Optional[StrictStr] = Field(default='null', description="icon")
    isdir: Optional[StrictBool] = Field(default=False, description="isdir")
    isimage: Optional[StrictBool] = Field(default=False, description="isimage")
    itemid: Optional[StrictInt] = Field(default=None, description="itemid")
    license: Optional[StrictStr] = Field(default='null', description="license")
    timecreated: Optional[StrictInt] = Field(default=null, description="timecreated")
    timecreatedformatted: Optional[StrictStr] = Field(default='null', description="timecreatedformatted")
    timemodified: Optional[StrictInt] = Field(default=None, description="timemodified")
    timemodifiedformatted: Optional[StrictStr] = Field(default='null', description="timemodifiedformatted")
    url: Optional[StrictStr] = Field(default=None, description="url")
    __properties: ClassVar[List[str]] = ["author", "component", "contextid", "filearea", "filename", "filenameshort", "filepath", "filesize", "filesizeformatted", "icon", "isdir", "isimage", "itemid", "license", "timecreated", "timecreatedformatted", "timemodified", "timemodifiedformatted", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreCompetencyReadUserEvidence200ResponseFilesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreCompetencyReadUserEvidence200ResponseFilesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": obj.get("author") if obj.get("author") is not None else 'null',
            "component": obj.get("component"),
            "contextid": obj.get("contextid"),
            "filearea": obj.get("filearea") if obj.get("filearea") is not None else 'null',
            "filename": obj.get("filename") if obj.get("filename") is not None else 'null',
            "filenameshort": obj.get("filenameshort") if obj.get("filenameshort") is not None else 'null',
            "filepath": obj.get("filepath") if obj.get("filepath") is not None else 'null',
            "filesize": obj.get("filesize") if obj.get("filesize") is not None else null,
            "filesizeformatted": obj.get("filesizeformatted") if obj.get("filesizeformatted") is not None else 'null',
            "icon": obj.get("icon") if obj.get("icon") is not None else 'null',
            "isdir": obj.get("isdir") if obj.get("isdir") is not None else False,
            "isimage": obj.get("isimage") if obj.get("isimage") is not None else False,
            "itemid": obj.get("itemid"),
            "license": obj.get("license") if obj.get("license") is not None else 'null',
            "timecreated": obj.get("timecreated") if obj.get("timecreated") is not None else null,
            "timecreatedformatted": obj.get("timecreatedformatted") if obj.get("timecreatedformatted") is not None else 'null',
            "timemodified": obj.get("timemodified"),
            "timemodifiedformatted": obj.get("timemodifiedformatted") if obj.get("timemodifiedformatted") is not None else 'null',
            "url": obj.get("url")
        })
        return _obj


