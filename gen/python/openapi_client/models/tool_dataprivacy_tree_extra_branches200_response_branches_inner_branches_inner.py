# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ToolDataprivacyTreeExtraBranches200ResponseBranchesInnerBranchesInner(BaseModel):
    """
    Node structure
    """ # noqa: E501
    branches: Optional[List[Dict[str, Any]]] = None
    contextid: Optional[StrictInt] = Field(default=null, description="The node contextid")
    contextlevel: Optional[StrictInt] = Field(default=null, description="The node contextlevel")
    expandcontextid: Optional[StrictInt] = Field(default=null, description="The contextid this node expands")
    expanded: Optional[StrictInt] = Field(default=null, description="Is it expanded")
    expandelement: Optional[StrictStr] = Field(default='null', description="What element is this node expanded to")
    text: Optional[StrictStr] = Field(default='null', description="The node text")
    __properties: ClassVar[List[str]] = ["branches", "contextid", "contextlevel", "expandcontextid", "expanded", "expandelement", "text"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolDataprivacyTreeExtraBranches200ResponseBranchesInnerBranchesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolDataprivacyTreeExtraBranches200ResponseBranchesInnerBranchesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "branches": obj.get("branches"),
            "contextid": obj.get("contextid") if obj.get("contextid") is not None else null,
            "contextlevel": obj.get("contextlevel") if obj.get("contextlevel") is not None else null,
            "expandcontextid": obj.get("expandcontextid") if obj.get("expandcontextid") is not None else null,
            "expanded": obj.get("expanded") if obj.get("expanded") is not None else null,
            "expandelement": obj.get("expandelement") if obj.get("expandelement") is not None else 'null',
            "text": obj.get("text") if obj.get("text") is not None else 'null'
        })
        return _obj


