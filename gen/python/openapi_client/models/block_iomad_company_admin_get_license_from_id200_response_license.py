# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense(BaseModel):
    """
    BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense
    """ # noqa: E501
    allallocated: StrictBool = Field(description="All licenses allocated")
    allocation: StrictInt = Field(description="Allocation")
    companyid: StrictInt = Field(description="Company ID")
    expirydate: StrictInt = Field(description="Expiry date")
    id: StrictInt = Field(description="License ID")
    instant: StrictBool = Field(description="Instant")
    name: StrictStr = Field(description="License name")
    parentid: StrictInt = Field(description="Parent ID")
    program: StrictBool = Field(description="Program")
    reference: StrictStr = Field(description="Reference")
    startdate: StrictInt = Field(description="Start date")
    type: StrictInt = Field(description="License type - 0 = standard, 1 = reusable, 2 = standard educator, 3 = reusable educator")
    used: StrictInt = Field(description="Used")
    validlength: StrictInt = Field(description="Valid length")
    __properties: ClassVar[List[str]] = ["allallocated", "allocation", "companyid", "expirydate", "id", "instant", "name", "parentid", "program", "reference", "startdate", "type", "used", "validlength"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BlockIomadCompanyAdminGetLicenseFromId200ResponseLicense from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allallocated": obj.get("allallocated") if obj.get("allallocated") is not None else False,
            "allocation": obj.get("allocation") if obj.get("allocation") is not None else null,
            "companyid": obj.get("companyid"),
            "expirydate": obj.get("expirydate") if obj.get("expirydate") is not None else null,
            "id": obj.get("id"),
            "instant": obj.get("instant") if obj.get("instant") is not None else False,
            "name": obj.get("name"),
            "parentid": obj.get("parentid") if obj.get("parentid") is not None else null,
            "program": obj.get("program") if obj.get("program") is not None else False,
            "reference": obj.get("reference") if obj.get("reference") is not None else 'null',
            "startdate": obj.get("startdate") if obj.get("startdate") is not None else null,
            "type": obj.get("type"),
            "used": obj.get("used") if obj.get("used") is not None else null,
            "validlength": obj.get("validlength") if obj.get("validlength") is not None else null
        })
        return _obj


