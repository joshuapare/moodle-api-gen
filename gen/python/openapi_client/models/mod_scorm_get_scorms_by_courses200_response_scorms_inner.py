# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_block_get_dashboard_blocks200_response_blocks_inner_contents_files_inner import CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner
from typing import Optional, Set
from typing_extensions import Self

class ModScormGetScormsByCourses200ResponseScormsInner(BaseModel):
    """
    SCORM
    """ # noqa: E501
    auto: Optional[StrictBool] = Field(default=False, description="Auto continue?")
    autocommit: Optional[StrictBool] = Field(default=False, description="Save track data automatically?")
    completionscorerequired: Optional[StrictInt] = Field(default=null, description="Minimum score required")
    completionstatusallscos: Optional[StrictInt] = Field(default=null, description="Require all scos to return completion status")
    completionstatusrequired: Optional[StrictInt] = Field(default=null, description="Status passed/completed required?")
    course: Optional[StrictInt] = Field(default=None, description="Course id")
    coursemodule: Optional[StrictInt] = Field(default=None, description="Course module id")
    displayattemptstatus: Optional[StrictInt] = Field(default=null, description="How to display attempt status")
    displaycoursestructure: Optional[StrictBool] = Field(default=False, description="Display contents structure")
    forcecompleted: Optional[StrictBool] = Field(default=False, description="Status current attempt is forced to \"completed\"")
    forcenewattempt: Optional[StrictInt] = Field(default=null, description="Controls re-entry behaviour")
    grademethod: Optional[StrictInt] = Field(default=null, description="Grade method")
    groupingid: Optional[StrictInt] = Field(default=None, description="Group id")
    groupmode: Optional[StrictInt] = Field(default=None, description="Group mode")
    height: Optional[StrictInt] = Field(default=null, description="Frame height")
    hidebrowse: Optional[StrictBool] = Field(default=False, description="Disable preview mode?")
    hidetoc: Optional[StrictInt] = Field(default=null, description="How to display the SCORM structure in player")
    id: Optional[StrictInt] = Field(default=None, description="Activity instance id")
    intro: Optional[StrictStr] = Field(default=None, description="Activity introduction")
    introfiles: Optional[List[CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner]] = None
    introformat: Optional[StrictInt] = Field(default=None, description="intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    lang: Optional[StrictStr] = Field(default=None, description="Forced activity language")
    lastattemptlock: Optional[StrictBool] = Field(default=False, description="Prevents to launch new attempts once finished")
    launch: Optional[StrictInt] = Field(default=null, description="First content to launch")
    maxattempt: Optional[StrictInt] = Field(default=null, description="Maximum number of attemtps")
    maxgrade: Optional[StrictInt] = Field(default=null, description="Max grade")
    md5hash: Optional[StrictStr] = Field(default='null', description="MD5 Hash of package file")
    name: Optional[StrictStr] = Field(default=None, description="Activity name")
    nav: Optional[StrictInt] = Field(default=null, description="Show navigation buttons")
    navpositionleft: Optional[StrictInt] = Field(default=null, description="Navigation position left")
    navpositiontop: Optional[StrictInt] = Field(default=null, description="Navigation position top")
    options: Optional[StrictStr] = Field(default=None, description="Additional options")
    packagesize: Optional[StrictInt] = Field(default=null, description="SCORM zip package size")
    packageurl: Optional[StrictStr] = Field(default='null', description="SCORM zip package URL")
    popup: Optional[StrictInt] = Field(default=null, description="Display in current or new window")
    protectpackagedownloads: Optional[StrictBool] = Field(default=False, description="Protect package downloads?")
    reference: Optional[StrictStr] = Field(default='null', description="Reference to the package")
    revision: Optional[StrictInt] = Field(default=null, description="Revison number")
    scormtype: Optional[StrictStr] = Field(default='null', description="SCORM type")
    section: Optional[StrictInt] = Field(default=None, description="Course section id")
    sha1hash: Optional[StrictStr] = Field(default='null', description="Package content or ext path hash")
    skipview: Optional[StrictInt] = Field(default=null, description="How to skip the content structure page")
    timeclose: Optional[StrictInt] = Field(default=null, description="Available to")
    timemodified: Optional[StrictInt] = Field(default=None, description="Time of last modification")
    timeopen: Optional[StrictInt] = Field(default=null, description="Available from")
    updatefreq: Optional[StrictInt] = Field(default=null, description="Auto-update frequency for remote packages")
    version: Optional[StrictStr] = Field(default='null', description="SCORM version (SCORM_12, SCORM_13, SCORM_AICC)")
    visible: Optional[StrictBool] = Field(default=None, description="Visible")
    whatgrade: Optional[StrictInt] = Field(default=null, description="What grade")
    width: Optional[StrictInt] = Field(default=null, description="Frame width")
    __properties: ClassVar[List[str]] = ["auto", "autocommit", "completionscorerequired", "completionstatusallscos", "completionstatusrequired", "course", "coursemodule", "displayattemptstatus", "displaycoursestructure", "forcecompleted", "forcenewattempt", "grademethod", "groupingid", "groupmode", "height", "hidebrowse", "hidetoc", "id", "intro", "introfiles", "introformat", "lang", "lastattemptlock", "launch", "maxattempt", "maxgrade", "md5hash", "name", "nav", "navpositionleft", "navpositiontop", "options", "packagesize", "packageurl", "popup", "protectpackagedownloads", "reference", "revision", "scormtype", "section", "sha1hash", "skipview", "timeclose", "timemodified", "timeopen", "updatefreq", "version", "visible", "whatgrade", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModScormGetScormsByCourses200ResponseScormsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in introfiles (list)
        _items = []
        if self.introfiles:
            for _item in self.introfiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['introfiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModScormGetScormsByCourses200ResponseScormsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auto": obj.get("auto") if obj.get("auto") is not None else False,
            "autocommit": obj.get("autocommit") if obj.get("autocommit") is not None else False,
            "completionscorerequired": obj.get("completionscorerequired") if obj.get("completionscorerequired") is not None else null,
            "completionstatusallscos": obj.get("completionstatusallscos") if obj.get("completionstatusallscos") is not None else null,
            "completionstatusrequired": obj.get("completionstatusrequired") if obj.get("completionstatusrequired") is not None else null,
            "course": obj.get("course"),
            "coursemodule": obj.get("coursemodule"),
            "displayattemptstatus": obj.get("displayattemptstatus") if obj.get("displayattemptstatus") is not None else null,
            "displaycoursestructure": obj.get("displaycoursestructure") if obj.get("displaycoursestructure") is not None else False,
            "forcecompleted": obj.get("forcecompleted") if obj.get("forcecompleted") is not None else False,
            "forcenewattempt": obj.get("forcenewattempt") if obj.get("forcenewattempt") is not None else null,
            "grademethod": obj.get("grademethod") if obj.get("grademethod") is not None else null,
            "groupingid": obj.get("groupingid"),
            "groupmode": obj.get("groupmode"),
            "height": obj.get("height") if obj.get("height") is not None else null,
            "hidebrowse": obj.get("hidebrowse") if obj.get("hidebrowse") is not None else False,
            "hidetoc": obj.get("hidetoc") if obj.get("hidetoc") is not None else null,
            "id": obj.get("id"),
            "intro": obj.get("intro"),
            "introfiles": [CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["introfiles"]] if obj.get("introfiles") is not None else None,
            "introformat": obj.get("introformat"),
            "lang": obj.get("lang"),
            "lastattemptlock": obj.get("lastattemptlock") if obj.get("lastattemptlock") is not None else False,
            "launch": obj.get("launch") if obj.get("launch") is not None else null,
            "maxattempt": obj.get("maxattempt") if obj.get("maxattempt") is not None else null,
            "maxgrade": obj.get("maxgrade") if obj.get("maxgrade") is not None else null,
            "md5hash": obj.get("md5hash") if obj.get("md5hash") is not None else 'null',
            "name": obj.get("name"),
            "nav": obj.get("nav") if obj.get("nav") is not None else null,
            "navpositionleft": obj.get("navpositionleft") if obj.get("navpositionleft") is not None else null,
            "navpositiontop": obj.get("navpositiontop") if obj.get("navpositiontop") is not None else null,
            "options": obj.get("options"),
            "packagesize": obj.get("packagesize") if obj.get("packagesize") is not None else null,
            "packageurl": obj.get("packageurl") if obj.get("packageurl") is not None else 'null',
            "popup": obj.get("popup") if obj.get("popup") is not None else null,
            "protectpackagedownloads": obj.get("protectpackagedownloads") if obj.get("protectpackagedownloads") is not None else False,
            "reference": obj.get("reference") if obj.get("reference") is not None else 'null',
            "revision": obj.get("revision") if obj.get("revision") is not None else null,
            "scormtype": obj.get("scormtype") if obj.get("scormtype") is not None else 'null',
            "section": obj.get("section"),
            "sha1hash": obj.get("sha1hash") if obj.get("sha1hash") is not None else 'null',
            "skipview": obj.get("skipview") if obj.get("skipview") is not None else null,
            "timeclose": obj.get("timeclose") if obj.get("timeclose") is not None else null,
            "timemodified": obj.get("timemodified"),
            "timeopen": obj.get("timeopen") if obj.get("timeopen") is not None else null,
            "updatefreq": obj.get("updatefreq") if obj.get("updatefreq") is not None else null,
            "version": obj.get("version") if obj.get("version") is not None else 'null',
            "visible": obj.get("visible"),
            "whatgrade": obj.get("whatgrade") if obj.get("whatgrade") is not None else null,
            "width": obj.get("width") if obj.get("width") is not None else null
        })
        return _obj


