# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_form_get_filetypes_browser_data200_response_groups_inner_types_inner import CoreFormGetFiletypesBrowserData200ResponseGroupsInnerTypesInner
from typing import Optional, Set
from typing_extensions import Self

class CoreFormGetFiletypesBrowserData200ResponseGroupsInner(BaseModel):
    """
    CoreFormGetFiletypesBrowserData200ResponseGroupsInner
    """ # noqa: E501
    expanded: Optional[StrictBool] = Field(default=False, description="Should the group start as expanded or collapsed")
    ext: Optional[StrictStr] = Field(default='null', description="The list of file extensions associated with the group")
    key: Optional[StrictStr] = Field(default='null', description="The file type group identifier")
    name: Optional[StrictStr] = Field(default='null', description="The file type group name")
    selectable: Optional[StrictBool] = Field(default=False, description="Can it be marked as selected")
    selected: Optional[StrictBool] = Field(default=False, description="Should it be marked as selected")
    types: Optional[List[CoreFormGetFiletypesBrowserData200ResponseGroupsInnerTypesInner]] = None
    __properties: ClassVar[List[str]] = ["expanded", "ext", "key", "name", "selectable", "selected", "types"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreFormGetFiletypesBrowserData200ResponseGroupsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in types (list)
        _items = []
        if self.types:
            for _item in self.types:
                if _item:
                    _items.append(_item.to_dict())
            _dict['types'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreFormGetFiletypesBrowserData200ResponseGroupsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expanded": obj.get("expanded") if obj.get("expanded") is not None else False,
            "ext": obj.get("ext") if obj.get("ext") is not None else 'null',
            "key": obj.get("key") if obj.get("key") is not None else 'null',
            "name": obj.get("name") if obj.get("name") is not None else 'null',
            "selectable": obj.get("selectable") if obj.get("selectable") is not None else False,
            "selected": obj.get("selected") if obj.get("selected") is not None else False,
            "types": [CoreFormGetFiletypesBrowserData200ResponseGroupsInnerTypesInner.from_dict(_item) for _item in obj["types"]] if obj.get("types") is not None else None
        })
        return _obj


