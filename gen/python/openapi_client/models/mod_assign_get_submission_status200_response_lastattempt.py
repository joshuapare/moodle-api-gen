# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.mod_assign_get_submission_status200_response_lastattempt_submission import ModAssignGetSubmissionStatus200ResponseLastattemptSubmission
from openapi_client.models.mod_assign_get_submission_status200_response_lastattempt_teamsubmission import ModAssignGetSubmissionStatus200ResponseLastattemptTeamsubmission
from typing import Optional, Set
from typing_extensions import Self

class ModAssignGetSubmissionStatus200ResponseLastattempt(BaseModel):
    """
    ModAssignGetSubmissionStatus200ResponseLastattempt
    """ # noqa: E501
    blindmarking: StrictBool = Field(description="Whether blind marking is enabled.")
    canedit: StrictBool = Field(description="Whether the user can edit the current submission.")
    caneditowner: StrictBool = Field(description="Whether the owner of the submission can edit it.")
    cansubmit: StrictBool = Field(description="Whether the user can submit.")
    extensionduedate: StrictInt = Field(description="Extension due date.")
    graded: StrictBool = Field(description="Whether the submission is graded.")
    gradingstatus: StrictStr = Field(description="Grading status.")
    locked: StrictBool = Field(description="Whether new submissions are locked.")
    submission: Optional[ModAssignGetSubmissionStatus200ResponseLastattemptSubmission] = None
    submissiongroup: Optional[StrictInt] = Field(default=null, description="The submission group id (for group submissions only).")
    submissiongroupmemberswhoneedtosubmit: Optional[List[Dict[str, Any]]] = None
    submissionsenabled: StrictBool = Field(description="Whether submissions are enabled or not.")
    teamsubmission: Optional[ModAssignGetSubmissionStatus200ResponseLastattemptTeamsubmission] = None
    timelimit: Optional[StrictInt] = Field(default=null, description="Time limit for submission.")
    usergroups: List[Dict[str, Any]]
    __properties: ClassVar[List[str]] = ["blindmarking", "canedit", "caneditowner", "cansubmit", "extensionduedate", "graded", "gradingstatus", "locked", "submission", "submissiongroup", "submissiongroupmemberswhoneedtosubmit", "submissionsenabled", "teamsubmission", "timelimit", "usergroups"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModAssignGetSubmissionStatus200ResponseLastattempt from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of submission
        if self.submission:
            _dict['submission'] = self.submission.to_dict()
        # override the default output from pydantic by calling `to_dict()` of teamsubmission
        if self.teamsubmission:
            _dict['teamsubmission'] = self.teamsubmission.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModAssignGetSubmissionStatus200ResponseLastattempt from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blindmarking": obj.get("blindmarking") if obj.get("blindmarking") is not None else False,
            "canedit": obj.get("canedit") if obj.get("canedit") is not None else False,
            "caneditowner": obj.get("caneditowner") if obj.get("caneditowner") is not None else False,
            "cansubmit": obj.get("cansubmit") if obj.get("cansubmit") is not None else False,
            "extensionduedate": obj.get("extensionduedate") if obj.get("extensionduedate") is not None else null,
            "graded": obj.get("graded") if obj.get("graded") is not None else False,
            "gradingstatus": obj.get("gradingstatus") if obj.get("gradingstatus") is not None else 'null',
            "locked": obj.get("locked") if obj.get("locked") is not None else False,
            "submission": ModAssignGetSubmissionStatus200ResponseLastattemptSubmission.from_dict(obj["submission"]) if obj.get("submission") is not None else None,
            "submissiongroup": obj.get("submissiongroup") if obj.get("submissiongroup") is not None else null,
            "submissiongroupmemberswhoneedtosubmit": obj.get("submissiongroupmemberswhoneedtosubmit"),
            "submissionsenabled": obj.get("submissionsenabled"),
            "teamsubmission": ModAssignGetSubmissionStatus200ResponseLastattemptTeamsubmission.from_dict(obj["teamsubmission"]) if obj.get("teamsubmission") is not None else None,
            "timelimit": obj.get("timelimit") if obj.get("timelimit") is not None else null,
            "usergroups": obj.get("usergroups")
        })
        return _obj


