# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.block_iomad_company_admin_create_licenses_request_licenses_inner_courses_inner import BlockIomadCompanyAdminCreateLicensesRequestLicensesInnerCoursesInner
from typing import Optional, Set
from typing_extensions import Self

class BlockIomadCompanyAdminCreateLicensesRequestLicensesInner(BaseModel):
    """
    one or many licenses
    """ # noqa: E501
    allocation: Optional[StrictInt] = Field(default=null, description="Number of license slots")
    clearonexpire: Optional[StrictInt] = Field(default=null, description="Clear license assignments on expire - 0 = no, 1 = yes")
    companyid: Optional[StrictInt] = Field(default=null, description="Company id")
    courses: Optional[List[BlockIomadCompanyAdminCreateLicensesRequestLicensesInnerCoursesInner]] = None
    cutoffdate: Optional[StrictInt] = Field(default=null, description="License cut off date (int = timestamp)")
    expirydate: Optional[StrictInt] = Field(default=null, description="License expiry date (int = timestamp)")
    instant: Optional[StrictInt] = Field(default=null, description="Instant access - 0 = no, 1 = yes")
    name: Optional[StrictStr] = Field(default='null', description="License name")
    parentid: Optional[StrictInt] = Field(default=null, description="Parent license id")
    program: Optional[StrictInt] = Field(default=null, description="Program pf courses 0 = no, 1 = yes")
    reference: Optional[StrictStr] = Field(default='null', description="License reference")
    startdate: Optional[StrictInt] = Field(default=null, description="Date from which the liucense is available (int = timestamp) ")
    type: Optional[StrictInt] = Field(default=null, description="License type - 0 = standard, 1 = reusable, 2 = standard educator, 3 = reusable educator")
    used: Optional[StrictInt] = Field(default=null, description="Number how often the lic can be allocated")
    validlength: Optional[StrictInt] = Field(default=null, description="Course access length (days)")
    __properties: ClassVar[List[str]] = ["allocation", "clearonexpire", "companyid", "courses", "cutoffdate", "expirydate", "instant", "name", "parentid", "program", "reference", "startdate", "type", "used", "validlength"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BlockIomadCompanyAdminCreateLicensesRequestLicensesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in courses (list)
        _items = []
        if self.courses:
            for _item in self.courses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['courses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BlockIomadCompanyAdminCreateLicensesRequestLicensesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allocation": obj.get("allocation") if obj.get("allocation") is not None else null,
            "clearonexpire": obj.get("clearonexpire") if obj.get("clearonexpire") is not None else null,
            "companyid": obj.get("companyid") if obj.get("companyid") is not None else null,
            "courses": [BlockIomadCompanyAdminCreateLicensesRequestLicensesInnerCoursesInner.from_dict(_item) for _item in obj["courses"]] if obj.get("courses") is not None else None,
            "cutoffdate": obj.get("cutoffdate") if obj.get("cutoffdate") is not None else null,
            "expirydate": obj.get("expirydate") if obj.get("expirydate") is not None else null,
            "instant": obj.get("instant") if obj.get("instant") is not None else null,
            "name": obj.get("name") if obj.get("name") is not None else 'null',
            "parentid": obj.get("parentid") if obj.get("parentid") is not None else null,
            "program": obj.get("program") if obj.get("program") is not None else null,
            "reference": obj.get("reference") if obj.get("reference") is not None else 'null',
            "startdate": obj.get("startdate") if obj.get("startdate") is not None else null,
            "type": obj.get("type") if obj.get("type") is not None else null,
            "used": obj.get("used") if obj.get("used") is not None else null,
            "validlength": obj.get("validlength") if obj.get("validlength") is not None else null
        })
        return _obj


