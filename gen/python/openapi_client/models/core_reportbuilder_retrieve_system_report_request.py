# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_cohort_search_cohorts_request_context import CoreCohortSearchCohortsRequestContext
from openapi_client.models.core_reportbuilder_can_view_system_report_request_parameters_inner import CoreReportbuilderCanViewSystemReportRequestParametersInner
from typing import Optional, Set
from typing_extensions import Self

class CoreReportbuilderRetrieveSystemReportRequest(BaseModel):
    """
    CoreReportbuilderRetrieveSystemReportRequest
    """ # noqa: E501
    area: Optional[StrictStr] = Field(default='', description="Report area")
    component: Optional[StrictStr] = Field(default='', description="Report component")
    context: CoreCohortSearchCohortsRequestContext
    itemid: Optional[StrictInt] = Field(default=0, description="Report item ID")
    page: Optional[StrictInt] = Field(default=0, description="Page number")
    parameters: Optional[List[CoreReportbuilderCanViewSystemReportRequestParametersInner]] = None
    perpage: Optional[StrictInt] = Field(default=10, description="Reports per page")
    source: StrictStr = Field(description="Report class path")
    __properties: ClassVar[List[str]] = ["area", "component", "context", "itemid", "page", "parameters", "perpage", "source"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreReportbuilderRetrieveSystemReportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreReportbuilderRetrieveSystemReportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "area": obj.get("area") if obj.get("area") is not None else '',
            "component": obj.get("component") if obj.get("component") is not None else '',
            "context": CoreCohortSearchCohortsRequestContext.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "itemid": obj.get("itemid") if obj.get("itemid") is not None else 0,
            "page": obj.get("page") if obj.get("page") is not None else 0,
            "parameters": [CoreReportbuilderCanViewSystemReportRequestParametersInner.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "perpage": obj.get("perpage") if obj.get("perpage") is not None else 10,
            "source": obj.get("source")
        })
        return _obj


