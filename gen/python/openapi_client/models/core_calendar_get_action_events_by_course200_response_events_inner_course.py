# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCourse(BaseModel):
    """
    CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCourse
    """ # noqa: E501
    coursecategory: StrictStr = Field(description="coursecategory")
    courseimage: StrictStr = Field(description="courseimage")
    enddate: StrictInt = Field(description="enddate")
    fullname: StrictStr = Field(description="fullname")
    fullnamedisplay: StrictStr = Field(description="fullnamedisplay")
    hasprogress: StrictBool = Field(description="hasprogress")
    hidden: StrictBool = Field(description="hidden")
    id: StrictInt = Field(description="id")
    idnumber: StrictStr = Field(description="idnumber")
    isfavourite: StrictBool = Field(description="isfavourite")
    pdfexportfont: StrictStr = Field(description="pdfexportfont")
    progress: Optional[StrictInt] = Field(default=null, description="progress")
    shortname: StrictStr = Field(description="shortname")
    showactivitydates: StrictBool = Field(description="showactivitydates")
    showcompletionconditions: StrictBool = Field(description="showcompletionconditions")
    showshortname: StrictBool = Field(description="showshortname")
    startdate: StrictInt = Field(description="startdate")
    summary: StrictStr = Field(description="summary")
    summaryformat: StrictInt = Field(description="summary format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    timeaccess: Optional[StrictInt] = Field(default=null, description="timeaccess")
    viewurl: StrictStr = Field(description="viewurl")
    visible: StrictBool = Field(description="visible")
    __properties: ClassVar[List[str]] = ["coursecategory", "courseimage", "enddate", "fullname", "fullnamedisplay", "hasprogress", "hidden", "id", "idnumber", "isfavourite", "pdfexportfont", "progress", "shortname", "showactivitydates", "showcompletionconditions", "showshortname", "startdate", "summary", "summaryformat", "timeaccess", "viewurl", "visible"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCourse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCourse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coursecategory": obj.get("coursecategory") if obj.get("coursecategory") is not None else 'null',
            "courseimage": obj.get("courseimage") if obj.get("courseimage") is not None else 'null',
            "enddate": obj.get("enddate") if obj.get("enddate") is not None else null,
            "fullname": obj.get("fullname") if obj.get("fullname") is not None else 'null',
            "fullnamedisplay": obj.get("fullnamedisplay") if obj.get("fullnamedisplay") is not None else 'null',
            "hasprogress": obj.get("hasprogress") if obj.get("hasprogress") is not None else False,
            "hidden": obj.get("hidden") if obj.get("hidden") is not None else False,
            "id": obj.get("id"),
            "idnumber": obj.get("idnumber") if obj.get("idnumber") is not None else 'null',
            "isfavourite": obj.get("isfavourite") if obj.get("isfavourite") is not None else False,
            "pdfexportfont": obj.get("pdfexportfont") if obj.get("pdfexportfont") is not None else 'null',
            "progress": obj.get("progress") if obj.get("progress") is not None else null,
            "shortname": obj.get("shortname") if obj.get("shortname") is not None else 'null',
            "showactivitydates": obj.get("showactivitydates") if obj.get("showactivitydates") is not None else False,
            "showcompletionconditions": obj.get("showcompletionconditions") if obj.get("showcompletionconditions") is not None else False,
            "showshortname": obj.get("showshortname") if obj.get("showshortname") is not None else False,
            "startdate": obj.get("startdate") if obj.get("startdate") is not None else null,
            "summary": obj.get("summary") if obj.get("summary") is not None else 'null',
            "summaryformat": obj.get("summaryformat") if obj.get("summaryformat") is not None else null,
            "timeaccess": obj.get("timeaccess") if obj.get("timeaccess") is not None else null,
            "viewurl": obj.get("viewurl") if obj.get("viewurl") is not None else 'null',
            "visible": obj.get("visible") if obj.get("visible") is not None else False
        })
        return _obj


