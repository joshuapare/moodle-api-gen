# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.mod_forum_set_pin_state200_response_capabilities import ModForumSetPinState200ResponseCapabilities
from openapi_client.models.mod_forum_set_pin_state200_response_group import ModForumSetPinState200ResponseGroup
from openapi_client.models.mod_forum_set_pin_state200_response_timed import ModForumSetPinState200ResponseTimed
from openapi_client.models.mod_forum_set_pin_state200_response_times import ModForumSetPinState200ResponseTimes
from openapi_client.models.mod_forum_set_pin_state200_response_urls import ModForumSetPinState200ResponseUrls
from openapi_client.models.mod_forum_set_pin_state200_response_userstate import ModForumSetPinState200ResponseUserstate
from typing import Optional, Set
from typing_extensions import Self

class ModForumSetPinState200Response(BaseModel):
    """
    ModForumSetPinState200Response
    """ # noqa: E501
    capabilities: ModForumSetPinState200ResponseCapabilities
    firstpostid: StrictInt = Field(description="firstpostid")
    forumid: StrictInt = Field(description="forumid")
    group: Optional[ModForumSetPinState200ResponseGroup] = None
    id: StrictInt = Field(description="id")
    istimelocked: StrictBool = Field(description="istimelocked")
    locked: StrictBool = Field(description="locked")
    name: StrictStr = Field(description="name")
    pinned: StrictBool = Field(description="pinned")
    timed: ModForumSetPinState200ResponseTimed
    times: ModForumSetPinState200ResponseTimes
    urls: ModForumSetPinState200ResponseUrls
    userstate: ModForumSetPinState200ResponseUserstate
    __properties: ClassVar[List[str]] = ["capabilities", "firstpostid", "forumid", "group", "id", "istimelocked", "locked", "name", "pinned", "timed", "times", "urls", "userstate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModForumSetPinState200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of capabilities
        if self.capabilities:
            _dict['capabilities'] = self.capabilities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timed
        if self.timed:
            _dict['timed'] = self.timed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of times
        if self.times:
            _dict['times'] = self.times.to_dict()
        # override the default output from pydantic by calling `to_dict()` of urls
        if self.urls:
            _dict['urls'] = self.urls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of userstate
        if self.userstate:
            _dict['userstate'] = self.userstate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModForumSetPinState200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capabilities": ModForumSetPinState200ResponseCapabilities.from_dict(obj["capabilities"]) if obj.get("capabilities") is not None else None,
            "firstpostid": obj.get("firstpostid") if obj.get("firstpostid") is not None else null,
            "forumid": obj.get("forumid") if obj.get("forumid") is not None else null,
            "group": ModForumSetPinState200ResponseGroup.from_dict(obj["group"]) if obj.get("group") is not None else None,
            "id": obj.get("id"),
            "istimelocked": obj.get("istimelocked") if obj.get("istimelocked") is not None else False,
            "locked": obj.get("locked") if obj.get("locked") is not None else False,
            "name": obj.get("name"),
            "pinned": obj.get("pinned") if obj.get("pinned") is not None else False,
            "timed": ModForumSetPinState200ResponseTimed.from_dict(obj["timed"]) if obj.get("timed") is not None else None,
            "times": ModForumSetPinState200ResponseTimes.from_dict(obj["times"]) if obj.get("times") is not None else None,
            "urls": ModForumSetPinState200ResponseUrls.from_dict(obj["urls"]) if obj.get("urls") is not None else None,
            "userstate": ModForumSetPinState200ResponseUserstate.from_dict(obj["userstate"]) if obj.get("userstate") is not None else None
        })
        return _obj


