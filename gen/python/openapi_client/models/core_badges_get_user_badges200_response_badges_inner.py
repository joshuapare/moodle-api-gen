# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_badges_get_user_badges200_response_badges_inner_alignment_inner import CoreBadgesGetUserBadges200ResponseBadgesInnerAlignmentInner
from openapi_client.models.core_badges_get_user_badges200_response_badges_inner_endorsement import CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement
from openapi_client.models.core_badges_get_user_badges200_response_badges_inner_relatedbadges_inner import CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner
from typing import Optional, Set
from typing_extensions import Self

class CoreBadgesGetUserBadges200ResponseBadgesInner(BaseModel):
    """
    CoreBadgesGetUserBadges200ResponseBadgesInner
    """ # noqa: E501
    alignment: Optional[List[CoreBadgesGetUserBadges200ResponseBadgesInnerAlignmentInner]] = None
    attachment: Optional[StrictInt] = Field(default=1, description="Attachment")
    badgeurl: Optional[StrictStr] = Field(default=None, description="Badge URL")
    courseid: Optional[StrictInt] = Field(default=None, description="Course id")
    dateexpire: Optional[StrictInt] = Field(default=None, description="Date expire")
    dateissued: Optional[StrictInt] = Field(default=0, description="Date issued")
    description: Optional[StrictStr] = Field(default=None, description="Badge description")
    email: Optional[StrictStr] = Field(default=None, description="User email")
    endorsement: Optional[CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement] = None
    expiredate: Optional[StrictInt] = Field(default=None, description="Expire date")
    expireperiod: Optional[StrictInt] = Field(default=None, description="Expire period")
    id: Optional[StrictInt] = Field(default=None, description="Badge id")
    imageauthoremail: Optional[StrictStr] = Field(default=None, description="Email of the image author")
    imageauthorname: Optional[StrictStr] = Field(default=None, description="Name of the image author")
    imageauthorurl: Optional[StrictStr] = Field(default=None, description="URL of the image author")
    imagecaption: Optional[StrictStr] = Field(default=None, description="Caption of the image")
    issuedid: Optional[StrictInt] = Field(default=None, description="Issued id")
    issuercontact: Optional[StrictStr] = Field(default=None, description="Issuer contact")
    issuername: Optional[StrictStr] = Field(default=None, description="Issuer name")
    issuerurl: Optional[StrictStr] = Field(default=None, description="Issuer URL")
    language: Optional[StrictStr] = Field(default=None, description="Language")
    message: Optional[StrictStr] = Field(default=None, description="Message")
    messagesubject: Optional[StrictStr] = Field(default=None, description="Message subject")
    name: Optional[StrictStr] = Field(default=None, description="Badge name")
    nextcron: Optional[StrictInt] = Field(default=None, description="Next cron")
    notification: Optional[StrictInt] = Field(default=1, description="Whether to notify when badge is awarded")
    relatedbadges: Optional[List[CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner]] = None
    status: Optional[StrictInt] = Field(default=0, description="Status")
    timecreated: Optional[StrictInt] = Field(default=0, description="Time created")
    timemodified: Optional[StrictInt] = Field(default=0, description="Time modified")
    type: Optional[StrictInt] = Field(default=1, description="Type")
    uniquehash: Optional[StrictStr] = Field(default=None, description="Unique hash")
    usercreated: Optional[StrictInt] = Field(default=None, description="User created")
    usermodified: Optional[StrictInt] = Field(default=None, description="User modified")
    version: Optional[StrictStr] = Field(default=None, description="Version")
    visible: Optional[StrictInt] = Field(default=0, description="Visible")
    __properties: ClassVar[List[str]] = ["alignment", "attachment", "badgeurl", "courseid", "dateexpire", "dateissued", "description", "email", "endorsement", "expiredate", "expireperiod", "id", "imageauthoremail", "imageauthorname", "imageauthorurl", "imagecaption", "issuedid", "issuercontact", "issuername", "issuerurl", "language", "message", "messagesubject", "name", "nextcron", "notification", "relatedbadges", "status", "timecreated", "timemodified", "type", "uniquehash", "usercreated", "usermodified", "version", "visible"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreBadgesGetUserBadges200ResponseBadgesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in alignment (list)
        _items = []
        if self.alignment:
            for _item in self.alignment:
                if _item:
                    _items.append(_item.to_dict())
            _dict['alignment'] = _items
        # override the default output from pydantic by calling `to_dict()` of endorsement
        if self.endorsement:
            _dict['endorsement'] = self.endorsement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in relatedbadges (list)
        _items = []
        if self.relatedbadges:
            for _item in self.relatedbadges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['relatedbadges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreBadgesGetUserBadges200ResponseBadgesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alignment": [CoreBadgesGetUserBadges200ResponseBadgesInnerAlignmentInner.from_dict(_item) for _item in obj["alignment"]] if obj.get("alignment") is not None else None,
            "attachment": obj.get("attachment") if obj.get("attachment") is not None else 1,
            "badgeurl": obj.get("badgeurl"),
            "courseid": obj.get("courseid"),
            "dateexpire": obj.get("dateexpire"),
            "dateissued": obj.get("dateissued") if obj.get("dateissued") is not None else 0,
            "description": obj.get("description"),
            "email": obj.get("email"),
            "endorsement": CoreBadgesGetUserBadges200ResponseBadgesInnerEndorsement.from_dict(obj["endorsement"]) if obj.get("endorsement") is not None else None,
            "expiredate": obj.get("expiredate"),
            "expireperiod": obj.get("expireperiod"),
            "id": obj.get("id"),
            "imageauthoremail": obj.get("imageauthoremail"),
            "imageauthorname": obj.get("imageauthorname"),
            "imageauthorurl": obj.get("imageauthorurl"),
            "imagecaption": obj.get("imagecaption"),
            "issuedid": obj.get("issuedid"),
            "issuercontact": obj.get("issuercontact"),
            "issuername": obj.get("issuername"),
            "issuerurl": obj.get("issuerurl"),
            "language": obj.get("language"),
            "message": obj.get("message"),
            "messagesubject": obj.get("messagesubject"),
            "name": obj.get("name"),
            "nextcron": obj.get("nextcron"),
            "notification": obj.get("notification") if obj.get("notification") is not None else 1,
            "relatedbadges": [CoreBadgesGetUserBadges200ResponseBadgesInnerRelatedbadgesInner.from_dict(_item) for _item in obj["relatedbadges"]] if obj.get("relatedbadges") is not None else None,
            "status": obj.get("status") if obj.get("status") is not None else 0,
            "timecreated": obj.get("timecreated") if obj.get("timecreated") is not None else 0,
            "timemodified": obj.get("timemodified") if obj.get("timemodified") is not None else 0,
            "type": obj.get("type") if obj.get("type") is not None else 1,
            "uniquehash": obj.get("uniquehash"),
            "usercreated": obj.get("usercreated"),
            "usermodified": obj.get("usermodified"),
            "version": obj.get("version"),
            "visible": obj.get("visible") if obj.get("visible") is not None else 0
        })
        return _obj


