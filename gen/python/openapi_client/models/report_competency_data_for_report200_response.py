# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List
from openapi_client.models.core_calendar_get_action_events_by_courses200_response_groupedbycourse_inner_events_inner_course import CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse
from openapi_client.models.core_competency_grade_competency200_response_actionuser import CoreCompetencyGradeCompetency200ResponseActionuser
from openapi_client.models.report_competency_data_for_report200_response_usercompetencies_inner import ReportCompetencyDataForReport200ResponseUsercompetenciesInner
from typing import Optional, Set
from typing_extensions import Self

class ReportCompetencyDataForReport200Response(BaseModel):
    """
    ReportCompetencyDataForReport200Response
    """ # noqa: E501
    course: CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse
    courseid: StrictInt = Field(description="Course id")
    pushratingstouserplans: StrictBool = Field(description="True if rating is push to user plans")
    user: CoreCompetencyGradeCompetency200ResponseActionuser
    usercompetencies: List[ReportCompetencyDataForReport200ResponseUsercompetenciesInner]
    __properties: ClassVar[List[str]] = ["course", "courseid", "pushratingstouserplans", "user", "usercompetencies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportCompetencyDataForReport200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of course
        if self.course:
            _dict['course'] = self.course.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in usercompetencies (list)
        _items = []
        if self.usercompetencies:
            for _item in self.usercompetencies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['usercompetencies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportCompetencyDataForReport200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "course": CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse.from_dict(obj["course"]) if obj.get("course") is not None else None,
            "courseid": obj.get("courseid"),
            "pushratingstouserplans": obj.get("pushratingstouserplans") if obj.get("pushratingstouserplans") is not None else False,
            "user": CoreCompetencyGradeCompetency200ResponseActionuser.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "usercompetencies": [ReportCompetencyDataForReport200ResponseUsercompetenciesInner.from_dict(_item) for _item in obj["usercompetencies"]] if obj.get("usercompetencies") is not None else None
        })
        return _obj


