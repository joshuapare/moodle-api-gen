# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_calendar_get_calendar_monthly_view200_response_weeks_inner_days_inner_events_inner import CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner
from typing import Optional, Set
from typing_extensions import Self

class CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner(BaseModel):
    """
    CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner
    """ # noqa: E501
    calendareventtypes: Optional[List[Dict[str, Any]]] = None
    daytitle: Optional[StrictStr] = Field(default='null', description="daytitle")
    events: Optional[List[CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner]] = None
    hasevents: Optional[StrictBool] = Field(default=False, description="hasevents")
    haslastdayofevent: Optional[StrictBool] = Field(default=False, description="haslastdayofevent")
    hours: Optional[StrictInt] = Field(default=None, description="hours")
    istoday: Optional[StrictBool] = Field(default=False, description="istoday")
    isweekend: Optional[StrictBool] = Field(default=False, description="isweekend")
    mday: Optional[StrictInt] = Field(default=None, description="mday")
    minutes: Optional[StrictInt] = Field(default=None, description="minutes")
    neweventtimestamp: Optional[StrictInt] = Field(default=None, description="neweventtimestamp")
    nextperiod: Optional[StrictInt] = Field(default=null, description="nextperiod")
    popovertitle: Optional[StrictStr] = Field(default='', description="popovertitle")
    previousperiod: Optional[StrictInt] = Field(default=null, description="previousperiod")
    seconds: Optional[StrictInt] = Field(default=None, description="seconds")
    timestamp: Optional[StrictInt] = Field(default=None, description="timestamp")
    viewdaylink: Optional[StrictStr] = Field(default='null', description="viewdaylink")
    viewdaylinktitle: Optional[StrictStr] = Field(default='null', description="viewdaylinktitle")
    wday: Optional[StrictInt] = Field(default=None, description="wday")
    yday: Optional[StrictInt] = Field(default=None, description="yday")
    year: Optional[StrictInt] = Field(default=None, description="year")
    __properties: ClassVar[List[str]] = ["calendareventtypes", "daytitle", "events", "hasevents", "haslastdayofevent", "hours", "istoday", "isweekend", "mday", "minutes", "neweventtimestamp", "nextperiod", "popovertitle", "previousperiod", "seconds", "timestamp", "viewdaylink", "viewdaylinktitle", "wday", "yday", "year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in events (list)
        _items = []
        if self.events:
            for _item in self.events:
                if _item:
                    _items.append(_item.to_dict())
            _dict['events'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "calendareventtypes": obj.get("calendareventtypes"),
            "daytitle": obj.get("daytitle") if obj.get("daytitle") is not None else 'null',
            "events": [CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner.from_dict(_item) for _item in obj["events"]] if obj.get("events") is not None else None,
            "hasevents": obj.get("hasevents") if obj.get("hasevents") is not None else False,
            "haslastdayofevent": obj.get("haslastdayofevent") if obj.get("haslastdayofevent") is not None else False,
            "hours": obj.get("hours"),
            "istoday": obj.get("istoday") if obj.get("istoday") is not None else False,
            "isweekend": obj.get("isweekend") if obj.get("isweekend") is not None else False,
            "mday": obj.get("mday"),
            "minutes": obj.get("minutes"),
            "neweventtimestamp": obj.get("neweventtimestamp"),
            "nextperiod": obj.get("nextperiod") if obj.get("nextperiod") is not None else null,
            "popovertitle": obj.get("popovertitle") if obj.get("popovertitle") is not None else '',
            "previousperiod": obj.get("previousperiod") if obj.get("previousperiod") is not None else null,
            "seconds": obj.get("seconds"),
            "timestamp": obj.get("timestamp"),
            "viewdaylink": obj.get("viewdaylink") if obj.get("viewdaylink") is not None else 'null',
            "viewdaylinktitle": obj.get("viewdaylinktitle") if obj.get("viewdaylinktitle") is not None else 'null',
            "wday": obj.get("wday"),
            "yday": obj.get("yday"),
            "year": obj.get("year")
        })
        return _obj


