# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_block_get_dashboard_blocks200_response_blocks_inner_contents_files_inner import CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner
from openapi_client.models.mod_data_get_entries200_response_entries_inner_tags_inner import ModDataGetEntries200ResponseEntriesInnerTagsInner
from typing import Optional, Set
from typing_extensions import Self

class ModGlossaryGetEntriesByAuthor200ResponseEntriesInner(BaseModel):
    """
    ModGlossaryGetEntriesByAuthor200ResponseEntriesInner
    """ # noqa: E501
    approved: Optional[StrictBool] = Field(default=False, description="Whether the entry was approved")
    attachment: Optional[StrictBool] = Field(default=False, description="Whether or not the entry has attachments")
    attachments: Optional[List[CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner]] = None
    casesensitive: Optional[StrictBool] = Field(default=False, description="When true, the matching is case sensitive")
    concept: Optional[StrictStr] = Field(default='null', description="The concept")
    definition: Optional[StrictStr] = Field(default='null', description="The definition")
    definitionformat: Optional[StrictInt] = Field(default=None, description="definition format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    definitioninlinefiles: Optional[List[CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner]] = None
    definitiontrust: Optional[StrictBool] = Field(default=False, description="The definition trust flag")
    fullmatch: Optional[StrictBool] = Field(default=False, description="When true, the matching is done on full words only")
    glossaryid: Optional[StrictInt] = Field(default=None, description="The glossary ID")
    id: Optional[StrictInt] = Field(default=null, description="The entry ID")
    sourceglossaryid: Optional[StrictInt] = Field(default=null, description="The source glossary ID")
    tags: Optional[List[ModDataGetEntries200ResponseEntriesInnerTagsInner]] = None
    teacherentry: Optional[StrictBool] = Field(default=False, description="The entry was created by a teacher, or equivalent.")
    timecreated: Optional[StrictInt] = Field(default=None, description="Time created")
    timemodified: Optional[StrictInt] = Field(default=None, description="Time modified")
    usedynalink: Optional[StrictBool] = Field(default=False, description="Whether the concept should be automatically linked")
    userfullname: Optional[StrictStr] = Field(default='null', description="Author full name")
    userid: Optional[StrictInt] = Field(default=null, description="Author ID")
    userpictureurl: Optional[StrictStr] = Field(default='null', description="Author picture")
    __properties: ClassVar[List[str]] = ["approved", "attachment", "attachments", "casesensitive", "concept", "definition", "definitionformat", "definitioninlinefiles", "definitiontrust", "fullmatch", "glossaryid", "id", "sourceglossaryid", "tags", "teacherentry", "timecreated", "timemodified", "usedynalink", "userfullname", "userid", "userpictureurl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModGlossaryGetEntriesByAuthor200ResponseEntriesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item in self.attachments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in definitioninlinefiles (list)
        _items = []
        if self.definitioninlinefiles:
            for _item in self.definitioninlinefiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['definitioninlinefiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModGlossaryGetEntriesByAuthor200ResponseEntriesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approved": obj.get("approved") if obj.get("approved") is not None else False,
            "attachment": obj.get("attachment") if obj.get("attachment") is not None else False,
            "attachments": [CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "casesensitive": obj.get("casesensitive") if obj.get("casesensitive") is not None else False,
            "concept": obj.get("concept") if obj.get("concept") is not None else 'null',
            "definition": obj.get("definition") if obj.get("definition") is not None else 'null',
            "definitionformat": obj.get("definitionformat"),
            "definitioninlinefiles": [CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["definitioninlinefiles"]] if obj.get("definitioninlinefiles") is not None else None,
            "definitiontrust": obj.get("definitiontrust") if obj.get("definitiontrust") is not None else False,
            "fullmatch": obj.get("fullmatch") if obj.get("fullmatch") is not None else False,
            "glossaryid": obj.get("glossaryid"),
            "id": obj.get("id") if obj.get("id") is not None else null,
            "sourceglossaryid": obj.get("sourceglossaryid") if obj.get("sourceglossaryid") is not None else null,
            "tags": [ModDataGetEntries200ResponseEntriesInnerTagsInner.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "teacherentry": obj.get("teacherentry") if obj.get("teacherentry") is not None else False,
            "timecreated": obj.get("timecreated"),
            "timemodified": obj.get("timemodified"),
            "usedynalink": obj.get("usedynalink") if obj.get("usedynalink") is not None else False,
            "userfullname": obj.get("userfullname") if obj.get("userfullname") is not None else 'null',
            "userid": obj.get("userid") if obj.get("userid") is not None else null,
            "userpictureurl": obj.get("userpictureurl") if obj.get("userpictureurl") is not None else 'null'
        })
        return _obj


