# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_grades_get_enrolled_users_for_selector200_response_users_inner_customfields_inner import CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerCustomfieldsInner
from openapi_client.models.core_grades_get_enrolled_users_for_selector200_response_users_inner_preferences_inner import CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerPreferencesInner
from typing import Optional, Set
from typing_extensions import Self

class CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner(BaseModel):
    """
    CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default='null', description="Postal address")
    auth: Optional[StrictStr] = Field(default='null', description="Auth plugins include manual, ldap, etc")
    calendartype: Optional[StrictStr] = Field(default='null', description="Calendar type such as \"gregorian\", must exist on server")
    city: Optional[StrictStr] = Field(default='null', description="Home city of the user")
    confirmed: Optional[StrictBool] = Field(default=False, description="Active user: 1 if confirmed, 0 otherwise")
    country: Optional[StrictStr] = Field(default='null', description="Home country code of the user, such as AU or CZ")
    customfields: Optional[List[CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerCustomfieldsInner]] = None
    department: Optional[StrictStr] = Field(default='null', description="department")
    description: Optional[StrictStr] = Field(default='null', description="User profile description")
    descriptionformat: Optional[StrictInt] = Field(default=null, description="int format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    email: Optional[StrictStr] = Field(default=None, description="An email address - allow email as root@localhost")
    firstaccess: Optional[StrictInt] = Field(default=null, description="first access to the site (0 if never)")
    firstname: Optional[StrictStr] = Field(default=None, description="The first name(s) of the user")
    fullname: Optional[StrictStr] = Field(default='null', description="The fullname of the user")
    id: Optional[StrictInt] = Field(default=None, description="ID of the user")
    idnumber: Optional[StrictStr] = Field(default='null', description="An arbitrary ID code number perhaps from the institution")
    institution: Optional[StrictStr] = Field(default='null', description="institution")
    interests: Optional[StrictStr] = Field(default='null', description="user interests (separated by commas)")
    lang: Optional[StrictStr] = Field(default='null', description="Language code such as \"en\", must exist on server")
    lastaccess: Optional[StrictInt] = Field(default=null, description="last access to the site (0 if never)")
    lastname: Optional[StrictStr] = Field(default=None, description="The family name of the user")
    mailformat: Optional[StrictInt] = Field(default=null, description="Mail format code is 0 for plain text, 1 for HTML etc")
    phone1: Optional[StrictStr] = Field(default='null', description="Phone 1")
    phone2: Optional[StrictStr] = Field(default='null', description="Phone 2")
    preferences: Optional[List[CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerPreferencesInner]] = None
    profileimageurl: Optional[StrictStr] = Field(default='null', description="User image profile URL - big version")
    profileimageurlsmall: Optional[StrictStr] = Field(default='null', description="User image profile URL - small version")
    suspended: Optional[StrictBool] = Field(default=False, description="Suspend user account, either false to enable user login or true to disable it")
    theme: Optional[StrictStr] = Field(default='null', description="Theme name such as \"standard\", must exist on server")
    timezone: Optional[StrictStr] = Field(default='null', description="Timezone code such as Australia/Perth, or 99 for default")
    username: Optional[StrictStr] = Field(default='null', description="The username")
    __properties: ClassVar[List[str]] = ["address", "auth", "calendartype", "city", "confirmed", "country", "customfields", "department", "description", "descriptionformat", "email", "firstaccess", "firstname", "fullname", "id", "idnumber", "institution", "interests", "lang", "lastaccess", "lastname", "mailformat", "phone1", "phone2", "preferences", "profileimageurl", "profileimageurlsmall", "suspended", "theme", "timezone", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in customfields (list)
        _items = []
        if self.customfields:
            for _item in self.customfields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customfields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in preferences (list)
        _items = []
        if self.preferences:
            for _item in self.preferences:
                if _item:
                    _items.append(_item.to_dict())
            _dict['preferences'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreGradesGetEnrolledUsersForSelector200ResponseUsersInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address") if obj.get("address") is not None else 'null',
            "auth": obj.get("auth") if obj.get("auth") is not None else 'null',
            "calendartype": obj.get("calendartype") if obj.get("calendartype") is not None else 'null',
            "city": obj.get("city") if obj.get("city") is not None else 'null',
            "confirmed": obj.get("confirmed") if obj.get("confirmed") is not None else False,
            "country": obj.get("country") if obj.get("country") is not None else 'null',
            "customfields": [CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerCustomfieldsInner.from_dict(_item) for _item in obj["customfields"]] if obj.get("customfields") is not None else None,
            "department": obj.get("department") if obj.get("department") is not None else 'null',
            "description": obj.get("description") if obj.get("description") is not None else 'null',
            "descriptionformat": obj.get("descriptionformat") if obj.get("descriptionformat") is not None else null,
            "email": obj.get("email"),
            "firstaccess": obj.get("firstaccess") if obj.get("firstaccess") is not None else null,
            "firstname": obj.get("firstname"),
            "fullname": obj.get("fullname") if obj.get("fullname") is not None else 'null',
            "id": obj.get("id"),
            "idnumber": obj.get("idnumber") if obj.get("idnumber") is not None else 'null',
            "institution": obj.get("institution") if obj.get("institution") is not None else 'null',
            "interests": obj.get("interests") if obj.get("interests") is not None else 'null',
            "lang": obj.get("lang") if obj.get("lang") is not None else 'null',
            "lastaccess": obj.get("lastaccess") if obj.get("lastaccess") is not None else null,
            "lastname": obj.get("lastname"),
            "mailformat": obj.get("mailformat") if obj.get("mailformat") is not None else null,
            "phone1": obj.get("phone1") if obj.get("phone1") is not None else 'null',
            "phone2": obj.get("phone2") if obj.get("phone2") is not None else 'null',
            "preferences": [CoreGradesGetEnrolledUsersForSelector200ResponseUsersInnerPreferencesInner.from_dict(_item) for _item in obj["preferences"]] if obj.get("preferences") is not None else None,
            "profileimageurl": obj.get("profileimageurl") if obj.get("profileimageurl") is not None else 'null',
            "profileimageurlsmall": obj.get("profileimageurlsmall") if obj.get("profileimageurlsmall") is not None else 'null',
            "suspended": obj.get("suspended") if obj.get("suspended") is not None else False,
            "theme": obj.get("theme") if obj.get("theme") is not None else 'null',
            "timezone": obj.get("timezone") if obj.get("timezone") is not None else 'null',
            "username": obj.get("username") if obj.get("username") is not None else 'null'
        })
        return _obj


