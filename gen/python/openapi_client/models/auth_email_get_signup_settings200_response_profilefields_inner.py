# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AuthEmailGetSignupSettings200ResponseProfilefieldsInner(BaseModel):
    """
    AuthEmailGetSignupSettings200ResponseProfilefieldsInner
    """ # noqa: E501
    categoryid: Optional[StrictInt] = Field(default=null, description="Profield field category id")
    categoryname: Optional[StrictStr] = Field(default='null', description="Profield field category name")
    datatype: Optional[StrictStr] = Field(default='null', description="Profield field datatype")
    defaultdata: Optional[StrictStr] = Field(default='null', description="Profield field default data")
    defaultdataformat: Optional[StrictInt] = Field(default=null, description="defaultdata format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    description: Optional[StrictStr] = Field(default='null', description="Profield field description")
    descriptionformat: Optional[StrictInt] = Field(default=null, description="description format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    forceunique: Optional[StrictInt] = Field(default=null, description="Profield field unique")
    id: Optional[StrictInt] = Field(default=null, description="Profile field id")
    locked: Optional[StrictInt] = Field(default=null, description="Profield field locked")
    name: Optional[StrictStr] = Field(default='null', description="Profield field name")
    param1: Optional[StrictStr] = Field(default='null', description="Profield field settings")
    param2: Optional[StrictStr] = Field(default=None, description="Profield field settings")
    param3: Optional[StrictStr] = Field(default=None, description="Profield field settings")
    param4: Optional[StrictStr] = Field(default=None, description="Profield field settings")
    param5: Optional[StrictStr] = Field(default=None, description="Profield field settings")
    required: Optional[StrictInt] = Field(default=null, description="Profield field required")
    shortname: Optional[StrictStr] = Field(default='null', description="Profile field shortname")
    signup: Optional[StrictInt] = Field(default=null, description="Profield field in signup form")
    sortorder: Optional[StrictInt] = Field(default=null, description="Profield field sort order")
    visible: Optional[StrictInt] = Field(default=null, description="Profield field visible")
    __properties: ClassVar[List[str]] = ["categoryid", "categoryname", "datatype", "defaultdata", "defaultdataformat", "description", "descriptionformat", "forceunique", "id", "locked", "name", "param1", "param2", "param3", "param4", "param5", "required", "shortname", "signup", "sortorder", "visible"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthEmailGetSignupSettings200ResponseProfilefieldsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthEmailGetSignupSettings200ResponseProfilefieldsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoryid": obj.get("categoryid") if obj.get("categoryid") is not None else null,
            "categoryname": obj.get("categoryname") if obj.get("categoryname") is not None else 'null',
            "datatype": obj.get("datatype") if obj.get("datatype") is not None else 'null',
            "defaultdata": obj.get("defaultdata") if obj.get("defaultdata") is not None else 'null',
            "defaultdataformat": obj.get("defaultdataformat") if obj.get("defaultdataformat") is not None else null,
            "description": obj.get("description") if obj.get("description") is not None else 'null',
            "descriptionformat": obj.get("descriptionformat") if obj.get("descriptionformat") is not None else null,
            "forceunique": obj.get("forceunique") if obj.get("forceunique") is not None else null,
            "id": obj.get("id") if obj.get("id") is not None else null,
            "locked": obj.get("locked") if obj.get("locked") is not None else null,
            "name": obj.get("name") if obj.get("name") is not None else 'null',
            "param1": obj.get("param1") if obj.get("param1") is not None else 'null',
            "param2": obj.get("param2"),
            "param3": obj.get("param3"),
            "param4": obj.get("param4"),
            "param5": obj.get("param5"),
            "required": obj.get("required") if obj.get("required") is not None else null,
            "shortname": obj.get("shortname") if obj.get("shortname") is not None else 'null',
            "signup": obj.get("signup") if obj.get("signup") is not None else null,
            "sortorder": obj.get("sortorder") if obj.get("sortorder") is not None else null,
            "visible": obj.get("visible") if obj.get("visible") is not None else null
        })
        return _obj


