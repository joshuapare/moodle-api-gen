# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreMessageGetMessagesRequest(BaseModel):
    """
    CoreMessageGetMessagesRequest
    """ # noqa: E501
    limitfrom: Optional[StrictInt] = Field(default=0, description="limit from")
    limitnum: Optional[StrictInt] = Field(default=0, description="limit number")
    newestfirst: Optional[StrictBool] = Field(default=True, description="true for ordering by newest first, false for oldest first")
    read: Optional[StrictInt] = Field(default=1, description="1 for getting read messages, 0 for unread, 2 for both")
    type: Optional[StrictStr] = Field(default='both', description="type of message to return, expected values are: notifications, conversations and both")
    useridfrom: Optional[StrictInt] = Field(default=0, description="the user id who send the message, 0 for any user. -10 or -20 for no-reply or support user")
    useridto: StrictInt = Field(description="the user id who received the message, 0 for any user")
    __properties: ClassVar[List[str]] = ["limitfrom", "limitnum", "newestfirst", "read", "type", "useridfrom", "useridto"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreMessageGetMessagesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreMessageGetMessagesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "limitfrom": obj.get("limitfrom") if obj.get("limitfrom") is not None else 0,
            "limitnum": obj.get("limitnum") if obj.get("limitnum") is not None else 0,
            "newestfirst": obj.get("newestfirst") if obj.get("newestfirst") is not None else True,
            "read": obj.get("read") if obj.get("read") is not None else 1,
            "type": obj.get("type") if obj.get("type") is not None else 'both',
            "useridfrom": obj.get("useridfrom") if obj.get("useridfrom") is not None else 0,
            "useridto": obj.get("useridto") if obj.get("useridto") is not None else null
        })
        return _obj


