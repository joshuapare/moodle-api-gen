# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreSearchGetResults200ResponseResultsInner(BaseModel):
    """
    CoreSearchGetResults200ResponseResultsInner
    """ # noqa: E501
    areaname: Optional[StrictStr] = Field(default='null', description="search area name")
    componentname: Optional[StrictStr] = Field(default='null', description="component name")
    content: Optional[StrictStr] = Field(default='', description="result contents")
    contextid: Optional[StrictInt] = Field(default=null, description="result context id")
    contexturl: Optional[StrictStr] = Field(default='null', description="result context url")
    coursefullname: Optional[StrictStr] = Field(default='null', description="result course fullname")
    courseurl: Optional[StrictStr] = Field(default='null', description="result course url")
    description1: Optional[StrictStr] = Field(default='', description="extra result contents, depends on the search area")
    description2: Optional[StrictStr] = Field(default='', description="extra result contents, depends on the search area")
    docurl: Optional[StrictStr] = Field(default='null', description="result url")
    filename: Optional[StrictStr] = Field(default='null', description="result file name if present")
    filenames: Optional[StrictStr] = Field(default='null', description="result file names if present")
    iconurl: Optional[StrictStr] = Field(default='', description="icon url")
    itemid: Optional[StrictInt] = Field(default=null, description="unique id in the search area scope")
    multiplefiles: Optional[StrictInt] = Field(default=null, description="whether multiple files are returned or not")
    textformat: Optional[StrictInt] = Field(default=null, description="text fields format, it is the same for all of them")
    timemodified: Optional[StrictInt] = Field(default=null, description="result modified time")
    title: Optional[StrictStr] = Field(default='null', description="result title")
    userfullname: Optional[StrictStr] = Field(default='null', description="user fullname")
    userid: Optional[StrictInt] = Field(default=null, description="user id")
    userurl: Optional[StrictStr] = Field(default='null', description="user url")
    __properties: ClassVar[List[str]] = ["areaname", "componentname", "content", "contextid", "contexturl", "coursefullname", "courseurl", "description1", "description2", "docurl", "filename", "filenames", "iconurl", "itemid", "multiplefiles", "textformat", "timemodified", "title", "userfullname", "userid", "userurl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreSearchGetResults200ResponseResultsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreSearchGetResults200ResponseResultsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "areaname": obj.get("areaname") if obj.get("areaname") is not None else 'null',
            "componentname": obj.get("componentname") if obj.get("componentname") is not None else 'null',
            "content": obj.get("content") if obj.get("content") is not None else '',
            "contextid": obj.get("contextid") if obj.get("contextid") is not None else null,
            "contexturl": obj.get("contexturl") if obj.get("contexturl") is not None else 'null',
            "coursefullname": obj.get("coursefullname") if obj.get("coursefullname") is not None else 'null',
            "courseurl": obj.get("courseurl") if obj.get("courseurl") is not None else 'null',
            "description1": obj.get("description1") if obj.get("description1") is not None else '',
            "description2": obj.get("description2") if obj.get("description2") is not None else '',
            "docurl": obj.get("docurl") if obj.get("docurl") is not None else 'null',
            "filename": obj.get("filename") if obj.get("filename") is not None else 'null',
            "filenames": obj.get("filenames") if obj.get("filenames") is not None else 'null',
            "iconurl": obj.get("iconurl") if obj.get("iconurl") is not None else '',
            "itemid": obj.get("itemid") if obj.get("itemid") is not None else null,
            "multiplefiles": obj.get("multiplefiles") if obj.get("multiplefiles") is not None else null,
            "textformat": obj.get("textformat") if obj.get("textformat") is not None else null,
            "timemodified": obj.get("timemodified") if obj.get("timemodified") is not None else null,
            "title": obj.get("title") if obj.get("title") is not None else 'null',
            "userfullname": obj.get("userfullname") if obj.get("userfullname") is not None else 'null',
            "userid": obj.get("userid") if obj.get("userid") is not None else null,
            "userurl": obj.get("userurl") if obj.get("userurl") is not None else 'null'
        })
        return _obj


