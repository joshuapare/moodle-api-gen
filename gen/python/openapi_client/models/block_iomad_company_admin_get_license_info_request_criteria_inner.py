# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BlockIomadCompanyAdminGetLicenseInfoRequestCriteriaInner(BaseModel):
    """
    BlockIomadCompanyAdminGetLicenseInfoRequestCriteriaInner
    """ # noqa: E501
    key: Optional[StrictStr] = Field(default='null', description="the user column to search, expected keys (value format) are:                                 \"id\" (int) matching user id,                                 \"name\" (string) license name (Note: you can use % for searching but it may be considerably slower!),                                 \"startdate\" (int) license start date in unix time,                                 \"expirydate\" (int) license expiry date in unix time,                                 \"companyid\" (int) license company id,                                 \"parentid\"  (int) license parent id for split licenses,                                 \"program\"  (bool) license is program,                                 \"instant\"  (bool) license is instant,                                 \"type\"  (int) license type (0 = standard, 1 = reusable, 3 = educator),                                 \"reference\" license reference (Note: you can use % for searching but it may be considerably slower!)")
    value: Optional[StrictStr] = Field(default=None, description="the value to search")
    __properties: ClassVar[List[str]] = ["key", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BlockIomadCompanyAdminGetLicenseInfoRequestCriteriaInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BlockIomadCompanyAdminGetLicenseInfoRequestCriteriaInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": obj.get("key") if obj.get("key") is not None else 'null',
            "value": obj.get("value")
        })
        return _obj


