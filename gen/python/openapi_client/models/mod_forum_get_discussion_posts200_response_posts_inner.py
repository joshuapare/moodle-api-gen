# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.mod_feedback_get_analysis200_response_itemsdata_inner_item_itemfiles_inner import ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner
from openapi_client.models.mod_forum_get_discussion_post200_response_post_attachments_inner import ModForumGetDiscussionPost200ResponsePostAttachmentsInner
from openapi_client.models.mod_forum_get_discussion_post200_response_post_author import ModForumGetDiscussionPost200ResponsePostAuthor
from openapi_client.models.mod_forum_get_discussion_post200_response_post_capabilities import ModForumGetDiscussionPost200ResponsePostCapabilities
from openapi_client.models.mod_forum_get_discussion_post200_response_post_html import ModForumGetDiscussionPost200ResponsePostHtml
from openapi_client.models.mod_forum_get_discussion_post200_response_post_tags_inner import ModForumGetDiscussionPost200ResponsePostTagsInner
from openapi_client.models.mod_forum_get_discussion_post200_response_post_urls import ModForumGetDiscussionPost200ResponsePostUrls
from typing import Optional, Set
from typing_extensions import Self

class ModForumGetDiscussionPosts200ResponsePostsInner(BaseModel):
    """
    ModForumGetDiscussionPosts200ResponsePostsInner
    """ # noqa: E501
    attachments: Optional[List[ModForumGetDiscussionPost200ResponsePostAttachmentsInner]] = None
    author: Optional[ModForumGetDiscussionPost200ResponsePostAuthor] = None
    capabilities: Optional[ModForumGetDiscussionPost200ResponsePostCapabilities] = None
    charcount: Optional[StrictInt] = Field(default=None, description="charcount")
    discussionid: Optional[StrictInt] = Field(default=None, description="discussionid")
    hasparent: Optional[StrictBool] = Field(default=None, description="hasparent")
    haswordcount: Optional[StrictBool] = Field(default=None, description="haswordcount")
    html: Optional[ModForumGetDiscussionPost200ResponsePostHtml] = None
    id: Optional[StrictInt] = Field(default=None, description="id")
    isdeleted: Optional[StrictBool] = Field(default=None, description="isdeleted")
    isprivatereply: Optional[StrictBool] = Field(default=None, description="isprivatereply")
    message: Optional[StrictStr] = Field(default=None, description="message")
    messageformat: Optional[StrictInt] = Field(default=None, description="message format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    messageinlinefiles: Optional[List[ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner]] = None
    parentid: Optional[StrictInt] = Field(default=None, description="parentid")
    replysubject: Optional[StrictStr] = Field(default=None, description="replysubject")
    subject: Optional[StrictStr] = Field(default=None, description="subject")
    tags: Optional[List[ModForumGetDiscussionPost200ResponsePostTagsInner]] = None
    timecreated: Optional[StrictInt] = Field(default=None, description="timecreated")
    timemodified: Optional[StrictInt] = Field(default=None, description="timemodified")
    unread: Optional[StrictBool] = Field(default=None, description="unread")
    urls: Optional[ModForumGetDiscussionPost200ResponsePostUrls] = None
    wordcount: Optional[StrictInt] = Field(default=None, description="wordcount")
    __properties: ClassVar[List[str]] = ["attachments", "author", "capabilities", "charcount", "discussionid", "hasparent", "haswordcount", "html", "id", "isdeleted", "isprivatereply", "message", "messageformat", "messageinlinefiles", "parentid", "replysubject", "subject", "tags", "timecreated", "timemodified", "unread", "urls", "wordcount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModForumGetDiscussionPosts200ResponsePostsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item in self.attachments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of capabilities
        if self.capabilities:
            _dict['capabilities'] = self.capabilities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of html
        if self.html:
            _dict['html'] = self.html.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in messageinlinefiles (list)
        _items = []
        if self.messageinlinefiles:
            for _item in self.messageinlinefiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['messageinlinefiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of urls
        if self.urls:
            _dict['urls'] = self.urls.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModForumGetDiscussionPosts200ResponsePostsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachments": [ModForumGetDiscussionPost200ResponsePostAttachmentsInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "author": ModForumGetDiscussionPost200ResponsePostAuthor.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "capabilities": ModForumGetDiscussionPost200ResponsePostCapabilities.from_dict(obj["capabilities"]) if obj.get("capabilities") is not None else None,
            "charcount": obj.get("charcount"),
            "discussionid": obj.get("discussionid"),
            "hasparent": obj.get("hasparent"),
            "haswordcount": obj.get("haswordcount"),
            "html": ModForumGetDiscussionPost200ResponsePostHtml.from_dict(obj["html"]) if obj.get("html") is not None else None,
            "id": obj.get("id"),
            "isdeleted": obj.get("isdeleted"),
            "isprivatereply": obj.get("isprivatereply"),
            "message": obj.get("message"),
            "messageformat": obj.get("messageformat"),
            "messageinlinefiles": [ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner.from_dict(_item) for _item in obj["messageinlinefiles"]] if obj.get("messageinlinefiles") is not None else None,
            "parentid": obj.get("parentid"),
            "replysubject": obj.get("replysubject"),
            "subject": obj.get("subject"),
            "tags": [ModForumGetDiscussionPost200ResponsePostTagsInner.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "timecreated": obj.get("timecreated"),
            "timemodified": obj.get("timemodified"),
            "unread": obj.get("unread"),
            "urls": ModForumGetDiscussionPost200ResponsePostUrls.from_dict(obj["urls"]) if obj.get("urls") is not None else None,
            "wordcount": obj.get("wordcount")
        })
        return _obj


