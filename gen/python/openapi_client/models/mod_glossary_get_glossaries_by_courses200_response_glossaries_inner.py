# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_block_get_dashboard_blocks200_response_blocks_inner_contents_files_inner import CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner
from typing import Optional, Set
from typing_extensions import Self

class ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner(BaseModel):
    """
    Glossaries
    """ # noqa: E501
    allowcomments: Optional[StrictInt] = Field(default=null, description="If enabled, all participants with permission to create comments will be able to add comments to glossary entries")
    allowduplicatedentries: Optional[StrictInt] = Field(default=null, description="If enabled, multiple entries can have the same concept name")
    allowprintview: Optional[StrictInt] = Field(default=null, description="If enabled, students are provided with a link to a printer-friendly version of the glossary. The link is always available to teachers")
    approvaldisplayformat: Optional[StrictStr] = Field(default='null', description="When approving glossary items you may wish to use a different display format")
    assessed: Optional[StrictInt] = Field(default=null, description="Aggregate type")
    assesstimefinish: Optional[StrictInt] = Field(default=null, description="Restrict rating to items created before this")
    assesstimestart: Optional[StrictInt] = Field(default=null, description="Restrict rating to items created after this")
    browsemodes: Optional[List[Dict[str, Any]]] = None
    canaddentry: Optional[StrictInt] = Field(default=null, description="Whether the user can add a new entry")
    completionentries: Optional[StrictInt] = Field(default=null, description="Number of entries to complete")
    course: Optional[StrictInt] = Field(default=None, description="Course id")
    coursemodule: Optional[StrictInt] = Field(default=None, description="Course module id")
    defaultapproval: Optional[StrictInt] = Field(default=null, description="If set to no, entries require approving by a teacher before they are viewable by everyone.")
    displayformat: Optional[StrictStr] = Field(default='null', description="Display format type")
    editalways: Optional[StrictInt] = Field(default=null, description="Always allow editing")
    entbypage: Optional[StrictInt] = Field(default=null, description="Entries shown per page")
    globalglossary: Optional[StrictInt] = None
    groupingid: Optional[StrictInt] = Field(default=None, description="Group id")
    groupmode: Optional[StrictInt] = Field(default=None, description="Group mode")
    id: Optional[StrictInt] = Field(default=None, description="Activity instance id")
    intro: Optional[StrictStr] = Field(default=None, description="Activity introduction")
    introfiles: Optional[List[CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner]] = None
    introformat: Optional[StrictInt] = Field(default=None, description="intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    lang: Optional[StrictStr] = Field(default=None, description="Forced activity language")
    mainglossary: Optional[StrictInt] = Field(default=null, description="If enabled this glossary is a main glossary.")
    name: Optional[StrictStr] = Field(default=None, description="Activity name")
    rssarticles: Optional[StrictInt] = Field(default=null, description="This setting specifies the number of glossary entry concepts to include in the RSS feed. Between 5 and 20 generally acceptable")
    rsstype: Optional[StrictInt] = Field(default=null, description="To enable the RSS feed for this activity, select either concepts with author or concepts without author to be included in the feed")
    scale: Optional[StrictInt] = Field(default=null, description="Scale ID")
    section: Optional[StrictInt] = Field(default=None, description="Course section id")
    showall: Optional[StrictInt] = Field(default=null, description="If enabled, participants can browse all entries at once")
    showalphabet: Optional[StrictInt] = Field(default=null, description="If enabled, participants can browse the glossary by letters of the alphabet")
    showspecial: Optional[StrictInt] = Field(default=null, description="If enabled, participants can browse the glossary by special characters, such as @ and #")
    timecreated: Optional[StrictInt] = Field(default=None, description="Time created")
    timemodified: Optional[StrictInt] = Field(default=None, description="Time modified")
    usedynalink: Optional[StrictInt] = Field(default=null, description="If site-wide glossary auto-linking has been enabled by an administrator and this checkbox is ticked, the entry will be automatically linked wherever the concept words and phrases appear throughout the rest of the course.")
    visible: Optional[StrictBool] = Field(default=None, description="Visible")
    __properties: ClassVar[List[str]] = ["allowcomments", "allowduplicatedentries", "allowprintview", "approvaldisplayformat", "assessed", "assesstimefinish", "assesstimestart", "browsemodes", "canaddentry", "completionentries", "course", "coursemodule", "defaultapproval", "displayformat", "editalways", "entbypage", "globalglossary", "groupingid", "groupmode", "id", "intro", "introfiles", "introformat", "lang", "mainglossary", "name", "rssarticles", "rsstype", "scale", "section", "showall", "showalphabet", "showspecial", "timecreated", "timemodified", "usedynalink", "visible"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in introfiles (list)
        _items = []
        if self.introfiles:
            for _item in self.introfiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['introfiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowcomments": obj.get("allowcomments") if obj.get("allowcomments") is not None else null,
            "allowduplicatedentries": obj.get("allowduplicatedentries") if obj.get("allowduplicatedentries") is not None else null,
            "allowprintview": obj.get("allowprintview") if obj.get("allowprintview") is not None else null,
            "approvaldisplayformat": obj.get("approvaldisplayformat") if obj.get("approvaldisplayformat") is not None else 'null',
            "assessed": obj.get("assessed") if obj.get("assessed") is not None else null,
            "assesstimefinish": obj.get("assesstimefinish") if obj.get("assesstimefinish") is not None else null,
            "assesstimestart": obj.get("assesstimestart") if obj.get("assesstimestart") is not None else null,
            "browsemodes": obj.get("browsemodes"),
            "canaddentry": obj.get("canaddentry") if obj.get("canaddentry") is not None else null,
            "completionentries": obj.get("completionentries") if obj.get("completionentries") is not None else null,
            "course": obj.get("course"),
            "coursemodule": obj.get("coursemodule"),
            "defaultapproval": obj.get("defaultapproval") if obj.get("defaultapproval") is not None else null,
            "displayformat": obj.get("displayformat") if obj.get("displayformat") is not None else 'null',
            "editalways": obj.get("editalways") if obj.get("editalways") is not None else null,
            "entbypage": obj.get("entbypage") if obj.get("entbypage") is not None else null,
            "globalglossary": obj.get("globalglossary"),
            "groupingid": obj.get("groupingid"),
            "groupmode": obj.get("groupmode"),
            "id": obj.get("id"),
            "intro": obj.get("intro"),
            "introfiles": [CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["introfiles"]] if obj.get("introfiles") is not None else None,
            "introformat": obj.get("introformat"),
            "lang": obj.get("lang"),
            "mainglossary": obj.get("mainglossary") if obj.get("mainglossary") is not None else null,
            "name": obj.get("name"),
            "rssarticles": obj.get("rssarticles") if obj.get("rssarticles") is not None else null,
            "rsstype": obj.get("rsstype") if obj.get("rsstype") is not None else null,
            "scale": obj.get("scale") if obj.get("scale") is not None else null,
            "section": obj.get("section"),
            "showall": obj.get("showall") if obj.get("showall") is not None else null,
            "showalphabet": obj.get("showalphabet") if obj.get("showalphabet") is not None else null,
            "showspecial": obj.get("showspecial") if obj.get("showspecial") is not None else null,
            "timecreated": obj.get("timecreated"),
            "timemodified": obj.get("timemodified"),
            "usedynalink": obj.get("usedynalink") if obj.get("usedynalink") is not None else null,
            "visible": obj.get("visible")
        })
        return _obj


