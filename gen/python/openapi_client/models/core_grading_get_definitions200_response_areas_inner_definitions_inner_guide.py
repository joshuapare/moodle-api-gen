# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_grading_get_definitions200_response_areas_inner_definitions_inner_guide_guide_comments_inner import CoreGradingGetDefinitions200ResponseAreasInnerDefinitionsInnerGuideGuideCommentsInner
from openapi_client.models.core_grading_get_definitions200_response_areas_inner_definitions_inner_guide_guide_criteria_inner import CoreGradingGetDefinitions200ResponseAreasInnerDefinitionsInnerGuideGuideCriteriaInner
from typing import Optional, Set
from typing_extensions import Self

class CoreGradingGetDefinitions200ResponseAreasInnerDefinitionsInnerGuide(BaseModel):
    """
    CoreGradingGetDefinitions200ResponseAreasInnerDefinitionsInnerGuide
    """ # noqa: E501
    guide_comments: Optional[List[CoreGradingGetDefinitions200ResponseAreasInnerDefinitionsInnerGuideGuideCommentsInner]] = None
    guide_criteria: Optional[List[CoreGradingGetDefinitions200ResponseAreasInnerDefinitionsInnerGuideGuideCriteriaInner]] = None
    __properties: ClassVar[List[str]] = ["guide_comments", "guide_criteria"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreGradingGetDefinitions200ResponseAreasInnerDefinitionsInnerGuide from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in guide_comments (list)
        _items = []
        if self.guide_comments:
            for _item in self.guide_comments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['guide_comments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in guide_criteria (list)
        _items = []
        if self.guide_criteria:
            for _item in self.guide_criteria:
                if _item:
                    _items.append(_item.to_dict())
            _dict['guide_criteria'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreGradingGetDefinitions200ResponseAreasInnerDefinitionsInnerGuide from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "guide_comments": [CoreGradingGetDefinitions200ResponseAreasInnerDefinitionsInnerGuideGuideCommentsInner.from_dict(_item) for _item in obj["guide_comments"]] if obj.get("guide_comments") is not None else None,
            "guide_criteria": [CoreGradingGetDefinitions200ResponseAreasInnerDefinitionsInnerGuideGuideCriteriaInner.from_dict(_item) for _item in obj["guide_criteria"]] if obj.get("guide_criteria") is not None else None
        })
        return _obj


