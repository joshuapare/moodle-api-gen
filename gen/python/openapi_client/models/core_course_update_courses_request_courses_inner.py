# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_cohort_update_cohorts_request_cohorts_inner_customfields_inner import CoreCohortUpdateCohortsRequestCohortsInnerCustomfieldsInner
from openapi_client.models.core_course_update_courses_request_courses_inner_courseformatoptions_inner import CoreCourseUpdateCoursesRequestCoursesInnerCourseformatoptionsInner
from typing import Optional, Set
from typing_extensions import Self

class CoreCourseUpdateCoursesRequestCoursesInner(BaseModel):
    """
    CoreCourseUpdateCoursesRequestCoursesInner
    """ # noqa: E501
    categoryid: Optional[StrictInt] = Field(default=None, description="category id")
    completionnotify: Optional[StrictInt] = Field(default=None, description="1: yes 0: no")
    courseformatoptions: Optional[List[CoreCourseUpdateCoursesRequestCoursesInnerCourseformatoptionsInner]] = None
    customfields: Optional[List[CoreCohortUpdateCohortsRequestCohortsInnerCustomfieldsInner]] = None
    defaultgroupingid: Optional[StrictInt] = Field(default=None, description="default grouping id")
    enablecompletion: Optional[StrictInt] = Field(default=None, description="Enabled, control via completion and activity settings. Disabled,                                         not shown in activity settings.")
    enddate: Optional[StrictInt] = Field(default=None, description="timestamp when the course end")
    forcetheme: Optional[StrictStr] = Field(default=None, description="name of the force theme")
    format: Optional[StrictStr] = Field(default='null', description="course format: weeks, topics, social, site,..")
    fullname: Optional[StrictStr] = Field(default=None, description="full name")
    groupmode: Optional[StrictInt] = Field(default=None, description="no group, separate, visible")
    groupmodeforce: Optional[StrictInt] = Field(default=None, description="1: yes, 0: no")
    hiddensections: Optional[StrictInt] = Field(default=null, description="(deprecated, use courseformatoptions) How the hidden sections in the course are                                         displayed to students")
    id: Optional[StrictInt] = Field(default=None, description="ID of the course")
    idnumber: Optional[StrictStr] = Field(default=None, description="id number")
    lang: Optional[StrictStr] = Field(default=None, description="forced course language")
    maxbytes: Optional[StrictInt] = Field(default=null, description="largest size of file that can be uploaded into the course")
    newsitems: Optional[StrictInt] = Field(default=null, description="number of recent items appearing on the course page")
    numsections: Optional[StrictInt] = Field(default=None, description="(deprecated, use courseformatoptions) number of weeks/topics")
    shortname: Optional[StrictStr] = Field(default=None, description="course short name")
    showgrades: Optional[StrictInt] = Field(default=None, description="1 if grades are shown, otherwise 0")
    showreports: Optional[StrictInt] = Field(default=null, description="are activity report shown (yes = 1, no =0)")
    startdate: Optional[StrictInt] = Field(default=None, description="timestamp when the course start")
    summary: Optional[StrictStr] = Field(default=None, description="summary")
    summaryformat: Optional[StrictInt] = Field(default=None, description="summary format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    visible: Optional[StrictInt] = Field(default=None, description="1: available to student, 0:not available")
    __properties: ClassVar[List[str]] = ["categoryid", "completionnotify", "courseformatoptions", "customfields", "defaultgroupingid", "enablecompletion", "enddate", "forcetheme", "format", "fullname", "groupmode", "groupmodeforce", "hiddensections", "id", "idnumber", "lang", "maxbytes", "newsitems", "numsections", "shortname", "showgrades", "showreports", "startdate", "summary", "summaryformat", "visible"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreCourseUpdateCoursesRequestCoursesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in courseformatoptions (list)
        _items = []
        if self.courseformatoptions:
            for _item in self.courseformatoptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['courseformatoptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in customfields (list)
        _items = []
        if self.customfields:
            for _item in self.customfields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customfields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreCourseUpdateCoursesRequestCoursesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoryid": obj.get("categoryid"),
            "completionnotify": obj.get("completionnotify"),
            "courseformatoptions": [CoreCourseUpdateCoursesRequestCoursesInnerCourseformatoptionsInner.from_dict(_item) for _item in obj["courseformatoptions"]] if obj.get("courseformatoptions") is not None else None,
            "customfields": [CoreCohortUpdateCohortsRequestCohortsInnerCustomfieldsInner.from_dict(_item) for _item in obj["customfields"]] if obj.get("customfields") is not None else None,
            "defaultgroupingid": obj.get("defaultgroupingid"),
            "enablecompletion": obj.get("enablecompletion"),
            "enddate": obj.get("enddate"),
            "forcetheme": obj.get("forcetheme"),
            "format": obj.get("format") if obj.get("format") is not None else 'null',
            "fullname": obj.get("fullname"),
            "groupmode": obj.get("groupmode"),
            "groupmodeforce": obj.get("groupmodeforce"),
            "hiddensections": obj.get("hiddensections") if obj.get("hiddensections") is not None else null,
            "id": obj.get("id"),
            "idnumber": obj.get("idnumber"),
            "lang": obj.get("lang"),
            "maxbytes": obj.get("maxbytes") if obj.get("maxbytes") is not None else null,
            "newsitems": obj.get("newsitems") if obj.get("newsitems") is not None else null,
            "numsections": obj.get("numsections"),
            "shortname": obj.get("shortname"),
            "showgrades": obj.get("showgrades"),
            "showreports": obj.get("showreports") if obj.get("showreports") is not None else null,
            "startdate": obj.get("startdate"),
            "summary": obj.get("summary"),
            "summaryformat": obj.get("summaryformat"),
            "visible": obj.get("visible")
        })
        return _obj


