# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.core_course_get_course_module200_response_cm_advancedgrading_inner import CoreCourseGetCourseModule200ResponseCmAdvancedgradingInner
from openapi_client.models.core_course_get_course_module200_response_cm_outcomes_inner import CoreCourseGetCourseModule200ResponseCmOutcomesInner
from typing import Optional, Set
from typing_extensions import Self

class CoreCourseGetCourseModule200ResponseCm(BaseModel):
    """
    CoreCourseGetCourseModule200ResponseCm
    """ # noqa: E501
    added: Optional[StrictInt] = Field(default=null, description="Time added")
    advancedgrading: Optional[List[CoreCourseGetCourseModule200ResponseCmAdvancedgradingInner]] = None
    availability: Optional[StrictStr] = Field(default='null', description="Availability settings")
    completion: StrictInt = Field(description="If completion is enabled")
    completionexpected: Optional[StrictInt] = Field(default=null, description="Completion time expected")
    completiongradeitemnumber: Optional[StrictInt] = Field(default=null, description="Completion grade item")
    completionpassgrade: Optional[StrictInt] = Field(default=null, description="Completion pass grade setting")
    completionview: Optional[StrictInt] = Field(default=null, description="Completion view setting")
    course: StrictInt = Field(description="The course id")
    downloadcontent: Optional[StrictInt] = Field(default=null, description="The download content value")
    grade: Optional[Union[StrictFloat, StrictInt]] = Field(default=null, description="Grade (max value or scale id)")
    gradecat: Optional[StrictInt] = Field(default=null, description="Grade category")
    gradepass: Optional[StrictStr] = Field(default='null', description="Grade to pass (float)")
    groupingid: StrictInt = Field(description="Grouping id")
    groupmode: StrictInt = Field(description="Group mode")
    id: StrictInt = Field(description="The course module id")
    idnumber: Optional[StrictStr] = Field(default='null', description="Module id number")
    indent: Optional[StrictInt] = Field(default=null, description="Indentation")
    instance: StrictInt = Field(description="The activity instance id")
    modname: StrictStr = Field(description="The module component name (forum, assign, etc..)")
    module: StrictInt = Field(description="The module type id")
    name: StrictStr = Field(description="The activity name")
    outcomes: Optional[List[CoreCourseGetCourseModule200ResponseCmOutcomesInner]] = None
    scale: Optional[StrictStr] = Field(default='null', description="Scale items (if used)")
    score: Optional[StrictInt] = Field(default=null, description="Score")
    section: StrictInt = Field(description="The module section id")
    sectionnum: StrictInt = Field(description="The module section number")
    showdescription: Optional[StrictInt] = Field(default=null, description="If the description is showed")
    visible: Optional[StrictInt] = Field(default=null, description="If visible")
    visibleold: Optional[StrictInt] = Field(default=null, description="Visible old")
    visibleoncoursepage: Optional[StrictInt] = Field(default=null, description="If visible on course page")
    __properties: ClassVar[List[str]] = ["added", "advancedgrading", "availability", "completion", "completionexpected", "completiongradeitemnumber", "completionpassgrade", "completionview", "course", "downloadcontent", "grade", "gradecat", "gradepass", "groupingid", "groupmode", "id", "idnumber", "indent", "instance", "modname", "module", "name", "outcomes", "scale", "score", "section", "sectionnum", "showdescription", "visible", "visibleold", "visibleoncoursepage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreCourseGetCourseModule200ResponseCm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in advancedgrading (list)
        _items = []
        if self.advancedgrading:
            for _item in self.advancedgrading:
                if _item:
                    _items.append(_item.to_dict())
            _dict['advancedgrading'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outcomes (list)
        _items = []
        if self.outcomes:
            for _item in self.outcomes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['outcomes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreCourseGetCourseModule200ResponseCm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "added": obj.get("added") if obj.get("added") is not None else null,
            "advancedgrading": [CoreCourseGetCourseModule200ResponseCmAdvancedgradingInner.from_dict(_item) for _item in obj["advancedgrading"]] if obj.get("advancedgrading") is not None else None,
            "availability": obj.get("availability") if obj.get("availability") is not None else 'null',
            "completion": obj.get("completion") if obj.get("completion") is not None else null,
            "completionexpected": obj.get("completionexpected") if obj.get("completionexpected") is not None else null,
            "completiongradeitemnumber": obj.get("completiongradeitemnumber") if obj.get("completiongradeitemnumber") is not None else null,
            "completionpassgrade": obj.get("completionpassgrade") if obj.get("completionpassgrade") is not None else null,
            "completionview": obj.get("completionview") if obj.get("completionview") is not None else null,
            "course": obj.get("course"),
            "downloadcontent": obj.get("downloadcontent") if obj.get("downloadcontent") is not None else null,
            "grade": obj.get("grade") if obj.get("grade") is not None else null,
            "gradecat": obj.get("gradecat") if obj.get("gradecat") is not None else null,
            "gradepass": obj.get("gradepass") if obj.get("gradepass") is not None else 'null',
            "groupingid": obj.get("groupingid") if obj.get("groupingid") is not None else null,
            "groupmode": obj.get("groupmode") if obj.get("groupmode") is not None else null,
            "id": obj.get("id"),
            "idnumber": obj.get("idnumber") if obj.get("idnumber") is not None else 'null',
            "indent": obj.get("indent") if obj.get("indent") is not None else null,
            "instance": obj.get("instance") if obj.get("instance") is not None else null,
            "modname": obj.get("modname") if obj.get("modname") is not None else 'null',
            "module": obj.get("module") if obj.get("module") is not None else null,
            "name": obj.get("name") if obj.get("name") is not None else 'null',
            "outcomes": [CoreCourseGetCourseModule200ResponseCmOutcomesInner.from_dict(_item) for _item in obj["outcomes"]] if obj.get("outcomes") is not None else None,
            "scale": obj.get("scale") if obj.get("scale") is not None else 'null',
            "score": obj.get("score") if obj.get("score") is not None else null,
            "section": obj.get("section") if obj.get("section") is not None else null,
            "sectionnum": obj.get("sectionnum") if obj.get("sectionnum") is not None else null,
            "showdescription": obj.get("showdescription") if obj.get("showdescription") is not None else null,
            "visible": obj.get("visible") if obj.get("visible") is not None else null,
            "visibleold": obj.get("visibleold") if obj.get("visibleold") is not None else null,
            "visibleoncoursepage": obj.get("visibleoncoursepage") if obj.get("visibleoncoursepage") is not None else null
        })
        return _obj


