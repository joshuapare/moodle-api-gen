# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_message_get_user_message_preferences200_response_preferences_components_inner_notifications_inner_processors_inner_loggedin import CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInnerLoggedin
from openapi_client.models.core_message_get_user_message_preferences200_response_preferences_components_inner_notifications_inner_processors_inner_loggedoff import CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInnerLoggedoff
from typing import Optional, Set
from typing_extensions import Self

class CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInner(BaseModel):
    """
    CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInner
    """ # noqa: E501
    displayname: Optional[StrictStr] = Field(default=None, description="Display name")
    enabled: Optional[StrictBool] = Field(default=False, description="Is enabled?")
    locked: Optional[StrictBool] = Field(default=False, description="Is locked by admin?")
    lockedmessage: Optional[StrictStr] = Field(default='null', description="Text to display if locked")
    loggedin: Optional[CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInnerLoggedin] = None
    loggedoff: Optional[CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInnerLoggedoff] = None
    name: Optional[StrictStr] = Field(default='null', description="Processor name")
    userconfigured: Optional[StrictInt] = Field(default=null, description="Is configured?")
    __properties: ClassVar[List[str]] = ["displayname", "enabled", "locked", "lockedmessage", "loggedin", "loggedoff", "name", "userconfigured"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of loggedin
        if self.loggedin:
            _dict['loggedin'] = self.loggedin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loggedoff
        if self.loggedoff:
            _dict['loggedoff'] = self.loggedoff.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayname": obj.get("displayname"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "locked": obj.get("locked") if obj.get("locked") is not None else False,
            "lockedmessage": obj.get("lockedmessage") if obj.get("lockedmessage") is not None else 'null',
            "loggedin": CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInnerLoggedin.from_dict(obj["loggedin"]) if obj.get("loggedin") is not None else None,
            "loggedoff": CoreMessageGetUserMessagePreferences200ResponsePreferencesComponentsInnerNotificationsInnerProcessorsInnerLoggedoff.from_dict(obj["loggedoff"]) if obj.get("loggedoff") is not None else None,
            "name": obj.get("name") if obj.get("name") is not None else 'null',
            "userconfigured": obj.get("userconfigured") if obj.get("userconfigured") is not None else null
        })
        return _obj


