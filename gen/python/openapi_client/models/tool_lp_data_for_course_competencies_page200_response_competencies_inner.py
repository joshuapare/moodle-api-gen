# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_competency_create_competency200_response import CoreCompetencyCreateCompetency200Response
from openapi_client.models.tool_lp_data_for_competency_summary200_response_comppath import ToolLpDataForCompetencySummary200ResponseComppath
from openapi_client.models.tool_lp_data_for_course_competencies_page200_response_competencies_inner_coursecompetency import ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursecompetency
from openapi_client.models.tool_lp_data_for_course_competencies_page200_response_competencies_inner_coursemodules_inner import ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner
from openapi_client.models.tool_lp_data_for_course_competencies_page200_response_competencies_inner_plans_inner import ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner
from openapi_client.models.tool_lp_data_for_course_competencies_page200_response_competencies_inner_ruleoutcomeoptions_inner import ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerRuleoutcomeoptionsInner
from openapi_client.models.tool_lp_data_for_course_competencies_page200_response_competencies_inner_usercompetencycourse import ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse
from typing import Optional, Set
from typing_extensions import Self

class ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner(BaseModel):
    """
    ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner
    """ # noqa: E501
    competency: Optional[CoreCompetencyCreateCompetency200Response] = None
    comppath: Optional[ToolLpDataForCompetencySummary200ResponseComppath] = None
    coursecompetency: Optional[ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursecompetency] = None
    coursemodules: Optional[List[ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner]] = None
    plans: Optional[List[ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner]] = None
    ruleoutcomeoptions: Optional[List[ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerRuleoutcomeoptionsInner]] = None
    usercompetencycourse: Optional[ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse] = None
    __properties: ClassVar[List[str]] = ["competency", "comppath", "coursecompetency", "coursemodules", "plans", "ruleoutcomeoptions", "usercompetencycourse"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of competency
        if self.competency:
            _dict['competency'] = self.competency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of comppath
        if self.comppath:
            _dict['comppath'] = self.comppath.to_dict()
        # override the default output from pydantic by calling `to_dict()` of coursecompetency
        if self.coursecompetency:
            _dict['coursecompetency'] = self.coursecompetency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in coursemodules (list)
        _items = []
        if self.coursemodules:
            for _item in self.coursemodules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['coursemodules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in plans (list)
        _items = []
        if self.plans:
            for _item in self.plans:
                if _item:
                    _items.append(_item.to_dict())
            _dict['plans'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ruleoutcomeoptions (list)
        _items = []
        if self.ruleoutcomeoptions:
            for _item in self.ruleoutcomeoptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ruleoutcomeoptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of usercompetencycourse
        if self.usercompetencycourse:
            _dict['usercompetencycourse'] = self.usercompetencycourse.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "competency": CoreCompetencyCreateCompetency200Response.from_dict(obj["competency"]) if obj.get("competency") is not None else None,
            "comppath": ToolLpDataForCompetencySummary200ResponseComppath.from_dict(obj["comppath"]) if obj.get("comppath") is not None else None,
            "coursecompetency": ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursecompetency.from_dict(obj["coursecompetency"]) if obj.get("coursecompetency") is not None else None,
            "coursemodules": [ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerCoursemodulesInner.from_dict(_item) for _item in obj["coursemodules"]] if obj.get("coursemodules") is not None else None,
            "plans": [ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerPlansInner.from_dict(_item) for _item in obj["plans"]] if obj.get("plans") is not None else None,
            "ruleoutcomeoptions": [ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerRuleoutcomeoptionsInner.from_dict(_item) for _item in obj["ruleoutcomeoptions"]] if obj.get("ruleoutcomeoptions") is not None else None,
            "usercompetencycourse": ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse.from_dict(obj["usercompetencycourse"]) if obj.get("usercompetencycourse") is not None else None
        })
        return _obj


