# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GradereportUserGetGradeItems200ResponseUsergradesInnerGradeitemsInner(BaseModel):
    """
    Grade items
    """ # noqa: E501
    averageformatted: Optional[StrictStr] = Field(default='null', description="Grade average")
    categoryid: Optional[StrictInt] = Field(default=null, description="Grade item category id")
    cmid: Optional[StrictInt] = Field(default=null, description="Course module id (if type mod)")
    feedback: Optional[StrictStr] = Field(default='null', description="Grade feedback")
    feedbackformat: Optional[StrictInt] = Field(default=None, description="feedback format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    gradedategraded: Optional[StrictInt] = Field(default=null, description="Grade graded date")
    gradedatesubmitted: Optional[StrictInt] = Field(default=null, description="Grade submit date")
    gradeformatted: Optional[StrictStr] = Field(default='null', description="The grade formatted")
    gradehiddenbydate: Optional[StrictBool] = Field(default=False, description="Grade hidden by date?")
    gradeishidden: Optional[StrictBool] = Field(default=False, description="Grade is hidden?")
    gradeislocked: Optional[StrictBool] = Field(default=False, description="Grade is locked?")
    gradeisoverridden: Optional[StrictBool] = Field(default=False, description="Grade overridden?")
    grademax: Optional[Union[StrictFloat, StrictInt]] = Field(default=null, description="Grade max")
    grademin: Optional[Union[StrictFloat, StrictInt]] = Field(default=null, description="Grade min")
    gradeneedsupdate: Optional[StrictBool] = Field(default=False, description="Grade needs update?")
    graderaw: Optional[Union[StrictFloat, StrictInt]] = Field(default=null, description="Grade raw")
    id: Optional[StrictInt] = Field(default=null, description="Grade item id")
    idnumber: Optional[StrictStr] = Field(default='null', description="Grade item idnumber")
    iteminstance: Optional[StrictInt] = Field(default=null, description="Grade item instance")
    itemmodule: Optional[StrictStr] = Field(default='null', description="Grade item module")
    itemname: Optional[StrictStr] = Field(default='null', description="Grade item name")
    itemnumber: Optional[StrictInt] = Field(default=null, description="Grade item item number")
    itemtype: Optional[StrictStr] = Field(default='null', description="Grade item type")
    lettergradeformatted: Optional[StrictStr] = Field(default='null', description="Letter grade")
    locked: Optional[StrictBool] = Field(default=False, description="Grade item for user locked?")
    numusers: Optional[StrictInt] = Field(default=null, description="Num users in course")
    outcomeid: Optional[StrictInt] = Field(default=null, description="Outcome id")
    percentageformatted: Optional[StrictStr] = Field(default='null', description="Percentage")
    rangeformatted: Optional[StrictStr] = Field(default='null', description="Range formatted")
    rank: Optional[StrictInt] = Field(default=null, description="Rank in the course")
    scaleid: Optional[StrictInt] = Field(default=null, description="Scale id")
    status: Optional[StrictStr] = Field(default='null', description="Status")
    weightformatted: Optional[StrictStr] = Field(default='null', description="Weight")
    weightraw: Optional[Union[StrictFloat, StrictInt]] = Field(default=null, description="Weight raw")
    __properties: ClassVar[List[str]] = ["averageformatted", "categoryid", "cmid", "feedback", "feedbackformat", "gradedategraded", "gradedatesubmitted", "gradeformatted", "gradehiddenbydate", "gradeishidden", "gradeislocked", "gradeisoverridden", "grademax", "grademin", "gradeneedsupdate", "graderaw", "id", "idnumber", "iteminstance", "itemmodule", "itemname", "itemnumber", "itemtype", "lettergradeformatted", "locked", "numusers", "outcomeid", "percentageformatted", "rangeformatted", "rank", "scaleid", "status", "weightformatted", "weightraw"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GradereportUserGetGradeItems200ResponseUsergradesInnerGradeitemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GradereportUserGetGradeItems200ResponseUsergradesInnerGradeitemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "averageformatted": obj.get("averageformatted") if obj.get("averageformatted") is not None else 'null',
            "categoryid": obj.get("categoryid") if obj.get("categoryid") is not None else null,
            "cmid": obj.get("cmid") if obj.get("cmid") is not None else null,
            "feedback": obj.get("feedback") if obj.get("feedback") is not None else 'null',
            "feedbackformat": obj.get("feedbackformat"),
            "gradedategraded": obj.get("gradedategraded") if obj.get("gradedategraded") is not None else null,
            "gradedatesubmitted": obj.get("gradedatesubmitted") if obj.get("gradedatesubmitted") is not None else null,
            "gradeformatted": obj.get("gradeformatted") if obj.get("gradeformatted") is not None else 'null',
            "gradehiddenbydate": obj.get("gradehiddenbydate") if obj.get("gradehiddenbydate") is not None else False,
            "gradeishidden": obj.get("gradeishidden") if obj.get("gradeishidden") is not None else False,
            "gradeislocked": obj.get("gradeislocked") if obj.get("gradeislocked") is not None else False,
            "gradeisoverridden": obj.get("gradeisoverridden") if obj.get("gradeisoverridden") is not None else False,
            "grademax": obj.get("grademax") if obj.get("grademax") is not None else null,
            "grademin": obj.get("grademin") if obj.get("grademin") is not None else null,
            "gradeneedsupdate": obj.get("gradeneedsupdate") if obj.get("gradeneedsupdate") is not None else False,
            "graderaw": obj.get("graderaw") if obj.get("graderaw") is not None else null,
            "id": obj.get("id") if obj.get("id") is not None else null,
            "idnumber": obj.get("idnumber") if obj.get("idnumber") is not None else 'null',
            "iteminstance": obj.get("iteminstance") if obj.get("iteminstance") is not None else null,
            "itemmodule": obj.get("itemmodule") if obj.get("itemmodule") is not None else 'null',
            "itemname": obj.get("itemname") if obj.get("itemname") is not None else 'null',
            "itemnumber": obj.get("itemnumber") if obj.get("itemnumber") is not None else null,
            "itemtype": obj.get("itemtype") if obj.get("itemtype") is not None else 'null',
            "lettergradeformatted": obj.get("lettergradeformatted") if obj.get("lettergradeformatted") is not None else 'null',
            "locked": obj.get("locked") if obj.get("locked") is not None else False,
            "numusers": obj.get("numusers") if obj.get("numusers") is not None else null,
            "outcomeid": obj.get("outcomeid") if obj.get("outcomeid") is not None else null,
            "percentageformatted": obj.get("percentageformatted") if obj.get("percentageformatted") is not None else 'null',
            "rangeformatted": obj.get("rangeformatted") if obj.get("rangeformatted") is not None else 'null',
            "rank": obj.get("rank") if obj.get("rank") is not None else null,
            "scaleid": obj.get("scaleid") if obj.get("scaleid") is not None else null,
            "status": obj.get("status") if obj.get("status") is not None else 'null',
            "weightformatted": obj.get("weightformatted") if obj.get("weightformatted") is not None else 'null',
            "weightraw": obj.get("weightraw") if obj.get("weightraw") is not None else null
        })
        return _obj


