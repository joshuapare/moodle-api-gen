# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.mod_quiz_get_attempt_review200_response_questions_inner_responsefileareas_inner import ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInner
from typing import Optional, Set
from typing_extensions import Self

class ModQuizGetAttemptReview200ResponseQuestionsInner(BaseModel):
    """
    The question data. Some fields may not be returned depending on the quiz display settings.
    """ # noqa: E501
    blockedbyprevious: Optional[StrictBool] = Field(default=None, description="whether the question is blocked by the previous question")
    flagged: Optional[StrictBool] = Field(default=None, description="whether the question is flagged or not")
    hasautosavedstep: Optional[StrictBool] = Field(default=None, description="whether this question attempt has autosaved data")
    html: Optional[StrictStr] = Field(default=None, description="the question rendered")
    lastactiontime: Optional[StrictInt] = Field(default=None, description="the timestamp of the most recent step in this question attempt")
    mark: Optional[StrictStr] = Field(default=None, description="the mark awarded.                     It will be returned only if the user is allowed to see it.")
    maxmark: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="the maximum mark possible for this question attempt.                     It will be returned only if the user is allowed to see it.")
    number: Optional[StrictInt] = Field(default=None, description="DO NOT USE. Use questionnumber. Only retained for backwards compatibility.")
    page: Optional[StrictInt] = Field(default=None, description="page of the quiz this question appears on")
    questionnumber: Optional[StrictStr] = Field(default=None, description="The question number to display for this question, e.g. \"7\", \"i\" or \"Custom-B)\".")
    responsefileareas: Optional[List[ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInner]] = None
    sequencecheck: Optional[StrictInt] = Field(default=None, description="the number of real steps in this attempt")
    settings: Optional[StrictStr] = Field(default=None, description="Question settings (JSON encoded).")
    slot: Optional[StrictInt] = Field(default=None, description="slot number")
    state: Optional[StrictStr] = Field(default=None, description="the state where the question is in.                     It will not be returned if the user cannot see it due to the quiz display correctness settings.")
    status: Optional[StrictStr] = Field(default=None, description="current formatted state of the question")
    type: Optional[StrictStr] = Field(default=None, description="question type, i.e: multichoice")
    __properties: ClassVar[List[str]] = ["blockedbyprevious", "flagged", "hasautosavedstep", "html", "lastactiontime", "mark", "maxmark", "number", "page", "questionnumber", "responsefileareas", "sequencecheck", "settings", "slot", "state", "status", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModQuizGetAttemptReview200ResponseQuestionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in responsefileareas (list)
        _items = []
        if self.responsefileareas:
            for _item in self.responsefileareas:
                if _item:
                    _items.append(_item.to_dict())
            _dict['responsefileareas'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModQuizGetAttemptReview200ResponseQuestionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blockedbyprevious": obj.get("blockedbyprevious"),
            "flagged": obj.get("flagged"),
            "hasautosavedstep": obj.get("hasautosavedstep"),
            "html": obj.get("html"),
            "lastactiontime": obj.get("lastactiontime"),
            "mark": obj.get("mark"),
            "maxmark": obj.get("maxmark"),
            "number": obj.get("number"),
            "page": obj.get("page"),
            "questionnumber": obj.get("questionnumber"),
            "responsefileareas": [ModQuizGetAttemptReview200ResponseQuestionsInnerResponsefileareasInner.from_dict(_item) for _item in obj["responsefileareas"]] if obj.get("responsefileareas") is not None else None,
            "sequencecheck": obj.get("sequencecheck"),
            "settings": obj.get("settings"),
            "slot": obj.get("slot"),
            "state": obj.get("state"),
            "status": obj.get("status"),
            "type": obj.get("type")
        })
        return _obj


