# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ModLessonGetQuestionsAttempts200ResponseAttemptsInner(BaseModel):
    """
    The question page attempts
    """ # noqa: E501
    answerid: Optional[StrictInt] = Field(default=null, description="The attempt answerid")
    correct: Optional[StrictInt] = Field(default=null, description="If it was the correct answer")
    id: Optional[StrictInt] = Field(default=None, description="The attempt id")
    lessonid: Optional[StrictInt] = Field(default=null, description="The attempt lessonid")
    pageid: Optional[StrictInt] = Field(default=null, description="The attempt pageid")
    retry: Optional[StrictInt] = Field(default=null, description="The lesson attempt number")
    timeseen: Optional[StrictInt] = Field(default=null, description="The time the question was seen")
    useranswer: Optional[StrictStr] = Field(default='null', description="The complete user answer")
    userid: Optional[StrictInt] = Field(default=null, description="The user who did the attempt")
    __properties: ClassVar[List[str]] = ["answerid", "correct", "id", "lessonid", "pageid", "retry", "timeseen", "useranswer", "userid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModLessonGetQuestionsAttempts200ResponseAttemptsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModLessonGetQuestionsAttempts200ResponseAttemptsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "answerid": obj.get("answerid") if obj.get("answerid") is not None else null,
            "correct": obj.get("correct") if obj.get("correct") is not None else null,
            "id": obj.get("id"),
            "lessonid": obj.get("lessonid") if obj.get("lessonid") is not None else null,
            "pageid": obj.get("pageid") if obj.get("pageid") is not None else null,
            "retry": obj.get("retry") if obj.get("retry") is not None else null,
            "timeseen": obj.get("timeseen") if obj.get("timeseen") is not None else null,
            "useranswer": obj.get("useranswer") if obj.get("useranswer") is not None else 'null',
            "userid": obj.get("userid") if obj.get("userid") is not None else null
        })
        return _obj


