# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ModQuizGetAttemptData200ResponseAttempt(BaseModel):
    """
    ModQuizGetAttemptData200ResponseAttempt
    """ # noqa: E501
    attempt: Optional[StrictInt] = Field(default=null, description="Sequentially numbers this students attempts at this quiz.")
    currentpage: Optional[StrictInt] = Field(default=null, description="Attempt current page.")
    gradednotificationsenttime: Optional[StrictInt] = Field(default=null, description="Time when the student was notified that manual grading of their attempt was complete.")
    id: Optional[StrictInt] = Field(default=null, description="Attempt id.")
    layout: Optional[StrictStr] = Field(default='null', description="Attempt layout.")
    preview: Optional[StrictInt] = Field(default=null, description="Whether is a preview attempt or not.")
    quiz: Optional[StrictInt] = Field(default=null, description="Foreign key reference to the quiz that was attempted.")
    state: Optional[StrictStr] = Field(default='null', description="The current state of the attempts. 'inprogress',                                                 'overdue', 'finished' or 'abandoned'.")
    sumgrades: Optional[Union[StrictFloat, StrictInt]] = Field(default=null, description="Total marks for this attempt.")
    timecheckstate: Optional[StrictInt] = Field(default=null, description="Next time quiz cron should check attempt for                                                         state changes.  NULL means never check.")
    timefinish: Optional[StrictInt] = Field(default=null, description="Time when the attempt was submitted.                                                     0 if the attempt has not been submitted yet.")
    timemodified: Optional[StrictInt] = Field(default=null, description="Last modified time.")
    timemodifiedoffline: Optional[StrictInt] = Field(default=None, description="Last modified time via webservices.")
    timestart: Optional[StrictInt] = Field(default=null, description="Time when the attempt was started.")
    uniqueid: Optional[StrictInt] = Field(default=null, description="Foreign key reference to the question_usage that holds the                                                     details of the the question_attempts that make up this quiz                                                     attempt.")
    userid: Optional[StrictInt] = Field(default=null, description="Foreign key reference to the user whose attempt this is.")
    __properties: ClassVar[List[str]] = ["attempt", "currentpage", "gradednotificationsenttime", "id", "layout", "preview", "quiz", "state", "sumgrades", "timecheckstate", "timefinish", "timemodified", "timemodifiedoffline", "timestart", "uniqueid", "userid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModQuizGetAttemptData200ResponseAttempt from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModQuizGetAttemptData200ResponseAttempt from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attempt": obj.get("attempt") if obj.get("attempt") is not None else null,
            "currentpage": obj.get("currentpage") if obj.get("currentpage") is not None else null,
            "gradednotificationsenttime": obj.get("gradednotificationsenttime") if obj.get("gradednotificationsenttime") is not None else null,
            "id": obj.get("id") if obj.get("id") is not None else null,
            "layout": obj.get("layout") if obj.get("layout") is not None else 'null',
            "preview": obj.get("preview") if obj.get("preview") is not None else null,
            "quiz": obj.get("quiz") if obj.get("quiz") is not None else null,
            "state": obj.get("state") if obj.get("state") is not None else 'null',
            "sumgrades": obj.get("sumgrades") if obj.get("sumgrades") is not None else null,
            "timecheckstate": obj.get("timecheckstate") if obj.get("timecheckstate") is not None else null,
            "timefinish": obj.get("timefinish") if obj.get("timefinish") is not None else null,
            "timemodified": obj.get("timemodified") if obj.get("timemodified") is not None else null,
            "timemodifiedoffline": obj.get("timemodifiedoffline"),
            "timestart": obj.get("timestart") if obj.get("timestart") is not None else null,
            "uniqueid": obj.get("uniqueid") if obj.get("uniqueid") is not None else null,
            "userid": obj.get("userid") if obj.get("userid") is not None else null
        })
        return _obj


