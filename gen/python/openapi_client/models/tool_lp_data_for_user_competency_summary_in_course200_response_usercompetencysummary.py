# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_competency_grade_competency200_response_actionuser import CoreCompetencyGradeCompetency200ResponseActionuser
from openapi_client.models.core_competency_read_plan200_response_commentarea import CoreCompetencyReadPlan200ResponseCommentarea
from openapi_client.models.tool_lp_data_for_competency_summary200_response import ToolLpDataForCompetencySummary200Response
from openapi_client.models.tool_lp_data_for_course_competencies_page200_response_competencies_inner_usercompetencycourse import ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse
from openapi_client.models.tool_lp_data_for_user_competency_summary200_response_evidence_inner import ToolLpDataForUserCompetencySummary200ResponseEvidenceInner
from openapi_client.models.tool_lp_data_for_user_competency_summary200_response_usercompetency import ToolLpDataForUserCompetencySummary200ResponseUsercompetency
from openapi_client.models.tool_lp_data_for_user_competency_summary200_response_usercompetencyplan import ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan
from typing import Optional, Set
from typing_extensions import Self

class ToolLpDataForUserCompetencySummaryInCourse200ResponseUsercompetencysummary(BaseModel):
    """
    ToolLpDataForUserCompetencySummaryInCourse200ResponseUsercompetencysummary
    """ # noqa: E501
    cangrade: StrictBool = Field(description="cangrade")
    commentarea: Optional[CoreCompetencyReadPlan200ResponseCommentarea] = None
    competency: ToolLpDataForCompetencySummary200Response
    evidence: List[ToolLpDataForUserCompetencySummary200ResponseEvidenceInner]
    showrelatedcompetencies: StrictBool = Field(description="showrelatedcompetencies")
    user: CoreCompetencyGradeCompetency200ResponseActionuser
    usercompetency: Optional[ToolLpDataForUserCompetencySummary200ResponseUsercompetency] = None
    usercompetencycourse: Optional[ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse] = None
    usercompetencyplan: Optional[ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan] = None
    __properties: ClassVar[List[str]] = ["cangrade", "commentarea", "competency", "evidence", "showrelatedcompetencies", "user", "usercompetency", "usercompetencycourse", "usercompetencyplan"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ToolLpDataForUserCompetencySummaryInCourse200ResponseUsercompetencysummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of commentarea
        if self.commentarea:
            _dict['commentarea'] = self.commentarea.to_dict()
        # override the default output from pydantic by calling `to_dict()` of competency
        if self.competency:
            _dict['competency'] = self.competency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in evidence (list)
        _items = []
        if self.evidence:
            for _item in self.evidence:
                if _item:
                    _items.append(_item.to_dict())
            _dict['evidence'] = _items
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usercompetency
        if self.usercompetency:
            _dict['usercompetency'] = self.usercompetency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usercompetencycourse
        if self.usercompetencycourse:
            _dict['usercompetencycourse'] = self.usercompetencycourse.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usercompetencyplan
        if self.usercompetencyplan:
            _dict['usercompetencyplan'] = self.usercompetencyplan.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ToolLpDataForUserCompetencySummaryInCourse200ResponseUsercompetencysummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cangrade": obj.get("cangrade"),
            "commentarea": CoreCompetencyReadPlan200ResponseCommentarea.from_dict(obj["commentarea"]) if obj.get("commentarea") is not None else None,
            "competency": ToolLpDataForCompetencySummary200Response.from_dict(obj["competency"]) if obj.get("competency") is not None else None,
            "evidence": [ToolLpDataForUserCompetencySummary200ResponseEvidenceInner.from_dict(_item) for _item in obj["evidence"]] if obj.get("evidence") is not None else None,
            "showrelatedcompetencies": obj.get("showrelatedcompetencies"),
            "user": CoreCompetencyGradeCompetency200ResponseActionuser.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "usercompetency": ToolLpDataForUserCompetencySummary200ResponseUsercompetency.from_dict(obj["usercompetency"]) if obj.get("usercompetency") is not None else None,
            "usercompetencycourse": ToolLpDataForCourseCompetenciesPage200ResponseCompetenciesInnerUsercompetencycourse.from_dict(obj["usercompetencycourse"]) if obj.get("usercompetencycourse") is not None else None,
            "usercompetencyplan": ToolLpDataForUserCompetencySummary200ResponseUsercompetencyplan.from_dict(obj["usercompetencyplan"]) if obj.get("usercompetencyplan") is not None else None
        })
        return _obj


