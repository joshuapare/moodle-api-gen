# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.block_iomad_company_admin_get_company_courses200_response_companies_inner_courses_inner import BlockIomadCompanyAdminGetCompanyCourses200ResponseCompaniesInnerCoursesInner
from typing import Optional, Set
from typing_extensions import Self

class BlockIomadCompanyAdminGetCompanyCourses200ResponseCompaniesInner(BaseModel):
    """
    BlockIomadCompanyAdminGetCompanyCourses200ResponseCompaniesInner
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default='null', description="Company address")
    city: Optional[StrictStr] = Field(default='null', description="Company city")
    code: Optional[StrictStr] = Field(default='null', description="Company code")
    country: Optional[StrictStr] = Field(default='null', description="Company country")
    courses: Optional[List[BlockIomadCompanyAdminGetCompanyCourses200ResponseCompaniesInnerCoursesInner]] = None
    custom1: Optional[StrictStr] = Field(default='null', description="Company custom1")
    custom2: Optional[StrictStr] = Field(default='null', description="Company custom2")
    custom3: Optional[StrictStr] = Field(default='null', description="Company custom3")
    id: Optional[StrictInt] = Field(default=None, description="Company ID")
    name: Optional[StrictStr] = Field(default='null', description="Company name")
    postcode: Optional[StrictStr] = Field(default='null', description="Company postcode")
    region: Optional[StrictStr] = Field(default='null', description="Company region")
    shortname: Optional[StrictStr] = Field(default='null', description="Company shortname")
    __properties: ClassVar[List[str]] = ["address", "city", "code", "country", "courses", "custom1", "custom2", "custom3", "id", "name", "postcode", "region", "shortname"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BlockIomadCompanyAdminGetCompanyCourses200ResponseCompaniesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in courses (list)
        _items = []
        if self.courses:
            for _item in self.courses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['courses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BlockIomadCompanyAdminGetCompanyCourses200ResponseCompaniesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address") if obj.get("address") is not None else 'null',
            "city": obj.get("city") if obj.get("city") is not None else 'null',
            "code": obj.get("code") if obj.get("code") is not None else 'null',
            "country": obj.get("country") if obj.get("country") is not None else 'null',
            "courses": [BlockIomadCompanyAdminGetCompanyCourses200ResponseCompaniesInnerCoursesInner.from_dict(_item) for _item in obj["courses"]] if obj.get("courses") is not None else None,
            "custom1": obj.get("custom1") if obj.get("custom1") is not None else 'null',
            "custom2": obj.get("custom2") if obj.get("custom2") is not None else 'null',
            "custom3": obj.get("custom3") if obj.get("custom3") is not None else 'null',
            "id": obj.get("id"),
            "name": obj.get("name") if obj.get("name") is not None else 'null',
            "postcode": obj.get("postcode") if obj.get("postcode") is not None else 'null',
            "region": obj.get("region") if obj.get("region") is not None else 'null',
            "shortname": obj.get("shortname") if obj.get("shortname") is not None else 'null'
        })
        return _obj


