# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_block_get_dashboard_blocks200_response_blocks_inner_contents_files_inner import CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner
from openapi_client.models.core_course_get_courses_by_field200_response_courses_inner_contacts_inner import CoreCourseGetCoursesByField200ResponseCoursesInnerContactsInner
from openapi_client.models.core_course_get_courses_by_field200_response_courses_inner_courseformatoptions_inner import CoreCourseGetCoursesByField200ResponseCoursesInnerCourseformatoptionsInner
from openapi_client.models.core_course_get_courses_by_field200_response_courses_inner_customfields_inner import CoreCourseGetCoursesByField200ResponseCoursesInnerCustomfieldsInner
from openapi_client.models.core_course_get_courses_by_field200_response_courses_inner_filters_inner import CoreCourseGetCoursesByField200ResponseCoursesInnerFiltersInner
from typing import Optional, Set
from typing_extensions import Self

class CoreCourseGetCoursesByField200ResponseCoursesInner(BaseModel):
    """
    CoreCourseGetCoursesByField200ResponseCoursesInner
    """ # noqa: E501
    cacherev: Optional[StrictInt] = Field(default=null, description="Cache revision number")
    calendartype: Optional[StrictStr] = Field(default='null', description="Calendar type")
    categoryid: Optional[StrictInt] = Field(default=None, description="category id")
    categoryname: Optional[StrictStr] = Field(default='null', description="category name")
    completionnotify: Optional[StrictInt] = Field(default=None, description="1: yes 0: no")
    contacts: Optional[List[CoreCourseGetCoursesByField200ResponseCoursesInnerContactsInner]] = None
    courseformatoptions: Optional[List[CoreCourseGetCoursesByField200ResponseCoursesInnerCourseformatoptionsInner]] = None
    courseimage: Optional[StrictStr] = Field(default='null', description="Course image")
    customfields: Optional[List[CoreCourseGetCoursesByField200ResponseCoursesInnerCustomfieldsInner]] = None
    defaultgroupingid: Optional[StrictInt] = Field(default=null, description="default grouping id")
    displayname: Optional[StrictStr] = Field(default='null', description="course display name")
    enablecompletion: Optional[StrictInt] = Field(default=null, description="Completion enabled? 1: yes 0: no")
    enddate: Optional[StrictInt] = Field(default=null, description="Timestamp when the course end")
    enrollmentmethods: Optional[List[Dict[str, Any]]] = None
    filters: Optional[List[CoreCourseGetCoursesByField200ResponseCoursesInnerFiltersInner]] = None
    format: Optional[StrictStr] = Field(default='null', description="Course format: weeks, topics, social, site,..")
    fullname: Optional[StrictStr] = Field(default='null', description="course full name")
    groupmode: Optional[StrictInt] = Field(default=null, description="no group, separate, visible")
    groupmodeforce: Optional[StrictInt] = Field(default=null, description="1: yes, 0: no")
    id: Optional[StrictInt] = Field(default=None, description="course id")
    idnumber: Optional[StrictStr] = Field(default='null', description="Id number")
    lang: Optional[StrictStr] = Field(default='null', description="Forced course language")
    legacyfiles: Optional[StrictInt] = Field(default=null, description="If legacy files are enabled")
    marker: Optional[StrictInt] = Field(default=null, description="Current course marker")
    maxbytes: Optional[StrictInt] = Field(default=null, description="Largest size of file that can be uploaded into")
    newsitems: Optional[StrictInt] = Field(default=null, description="Number of recent items appearing on the course page")
    overviewfiles: Optional[List[CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner]] = None
    requested: Optional[StrictInt] = Field(default=null, description="If is a requested course")
    shortname: Optional[StrictStr] = Field(default=None, description="course short name")
    showactivitydates: Optional[StrictBool] = Field(default=False, description="Whether the activity dates are shown or not")
    showcompletionconditions: Optional[StrictBool] = Field(default=False, description="Whether the activity completion conditions are shown or not")
    showgrades: Optional[StrictInt] = Field(default=null, description="1 if grades are shown, otherwise 0")
    showreports: Optional[StrictInt] = Field(default=null, description="Are activity report shown (yes = 1, no =0)")
    sortorder: Optional[StrictInt] = Field(default=null, description="Sort order in the category")
    startdate: Optional[StrictInt] = Field(default=null, description="Timestamp when the course start")
    summary: Optional[StrictStr] = Field(default=None, description="summary")
    summaryfiles: Optional[List[CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner]] = None
    summaryformat: Optional[StrictInt] = Field(default=None, description="summary format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    theme: Optional[StrictStr] = Field(default='null', description="Fame of the forced theme")
    timecreated: Optional[StrictInt] = Field(default=null, description="Time when the course was created")
    timemodified: Optional[StrictInt] = Field(default=null, description="Last time  the course was updated")
    visible: Optional[StrictInt] = Field(default=None, description="1: available to student, 0:not available")
    __properties: ClassVar[List[str]] = ["cacherev", "calendartype", "categoryid", "categoryname", "completionnotify", "contacts", "courseformatoptions", "courseimage", "customfields", "defaultgroupingid", "displayname", "enablecompletion", "enddate", "enrollmentmethods", "filters", "format", "fullname", "groupmode", "groupmodeforce", "id", "idnumber", "lang", "legacyfiles", "marker", "maxbytes", "newsitems", "overviewfiles", "requested", "shortname", "showactivitydates", "showcompletionconditions", "showgrades", "showreports", "sortorder", "startdate", "summary", "summaryfiles", "summaryformat", "theme", "timecreated", "timemodified", "visible"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreCourseGetCoursesByField200ResponseCoursesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contacts (list)
        _items = []
        if self.contacts:
            for _item in self.contacts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['contacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in courseformatoptions (list)
        _items = []
        if self.courseformatoptions:
            for _item in self.courseformatoptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['courseformatoptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in customfields (list)
        _items = []
        if self.customfields:
            for _item in self.customfields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['customfields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item in self.filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['filters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in overviewfiles (list)
        _items = []
        if self.overviewfiles:
            for _item in self.overviewfiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['overviewfiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in summaryfiles (list)
        _items = []
        if self.summaryfiles:
            for _item in self.summaryfiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['summaryfiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreCourseGetCoursesByField200ResponseCoursesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cacherev": obj.get("cacherev") if obj.get("cacherev") is not None else null,
            "calendartype": obj.get("calendartype") if obj.get("calendartype") is not None else 'null',
            "categoryid": obj.get("categoryid"),
            "categoryname": obj.get("categoryname") if obj.get("categoryname") is not None else 'null',
            "completionnotify": obj.get("completionnotify"),
            "contacts": [CoreCourseGetCoursesByField200ResponseCoursesInnerContactsInner.from_dict(_item) for _item in obj["contacts"]] if obj.get("contacts") is not None else None,
            "courseformatoptions": [CoreCourseGetCoursesByField200ResponseCoursesInnerCourseformatoptionsInner.from_dict(_item) for _item in obj["courseformatoptions"]] if obj.get("courseformatoptions") is not None else None,
            "courseimage": obj.get("courseimage") if obj.get("courseimage") is not None else 'null',
            "customfields": [CoreCourseGetCoursesByField200ResponseCoursesInnerCustomfieldsInner.from_dict(_item) for _item in obj["customfields"]] if obj.get("customfields") is not None else None,
            "defaultgroupingid": obj.get("defaultgroupingid") if obj.get("defaultgroupingid") is not None else null,
            "displayname": obj.get("displayname") if obj.get("displayname") is not None else 'null',
            "enablecompletion": obj.get("enablecompletion") if obj.get("enablecompletion") is not None else null,
            "enddate": obj.get("enddate") if obj.get("enddate") is not None else null,
            "enrollmentmethods": obj.get("enrollmentmethods"),
            "filters": [CoreCourseGetCoursesByField200ResponseCoursesInnerFiltersInner.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "format": obj.get("format") if obj.get("format") is not None else 'null',
            "fullname": obj.get("fullname") if obj.get("fullname") is not None else 'null',
            "groupmode": obj.get("groupmode") if obj.get("groupmode") is not None else null,
            "groupmodeforce": obj.get("groupmodeforce") if obj.get("groupmodeforce") is not None else null,
            "id": obj.get("id"),
            "idnumber": obj.get("idnumber") if obj.get("idnumber") is not None else 'null',
            "lang": obj.get("lang") if obj.get("lang") is not None else 'null',
            "legacyfiles": obj.get("legacyfiles") if obj.get("legacyfiles") is not None else null,
            "marker": obj.get("marker") if obj.get("marker") is not None else null,
            "maxbytes": obj.get("maxbytes") if obj.get("maxbytes") is not None else null,
            "newsitems": obj.get("newsitems") if obj.get("newsitems") is not None else null,
            "overviewfiles": [CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["overviewfiles"]] if obj.get("overviewfiles") is not None else None,
            "requested": obj.get("requested") if obj.get("requested") is not None else null,
            "shortname": obj.get("shortname"),
            "showactivitydates": obj.get("showactivitydates") if obj.get("showactivitydates") is not None else False,
            "showcompletionconditions": obj.get("showcompletionconditions") if obj.get("showcompletionconditions") is not None else False,
            "showgrades": obj.get("showgrades") if obj.get("showgrades") is not None else null,
            "showreports": obj.get("showreports") if obj.get("showreports") is not None else null,
            "sortorder": obj.get("sortorder") if obj.get("sortorder") is not None else null,
            "startdate": obj.get("startdate") if obj.get("startdate") is not None else null,
            "summary": obj.get("summary"),
            "summaryfiles": [CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["summaryfiles"]] if obj.get("summaryfiles") is not None else None,
            "summaryformat": obj.get("summaryformat"),
            "theme": obj.get("theme") if obj.get("theme") is not None else 'null',
            "timecreated": obj.get("timecreated") if obj.get("timecreated") is not None else null,
            "timemodified": obj.get("timemodified") if obj.get("timemodified") is not None else null,
            "visible": obj.get("visible")
        })
        return _obj


