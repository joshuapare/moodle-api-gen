# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.mod_h5pactivity_get_results200_response_attempts_inner_results_inner_options_inner import ModH5pactivityGetResults200ResponseAttemptsInnerResultsInnerOptionsInner
from typing import Optional, Set
from typing_extensions import Self

class ModH5pactivityGetResults200ResponseAttemptsInnerResultsInner(BaseModel):
    """
    A single result statement tracking information
    """ # noqa: E501
    answerlabel: Optional[StrictStr] = Field(default='null', description="Label used for user answers")
    attemptid: Optional[StrictInt] = Field(default=null, description="ID of the H5P attempt")
    completion: Optional[StrictInt] = Field(default=null, description="Result completion")
    content: Optional[StrictStr] = Field(default='null', description="Result extra content")
    correctlabel: Optional[StrictStr] = Field(default='null', description="Label used for correct answers")
    description: Optional[StrictStr] = Field(default='null', description="Result description")
    duration: Optional[StrictInt] = Field(default=0, description="Result duration in seconds")
    id: Optional[StrictInt] = Field(default=None, description="ID of the context")
    interactiontype: Optional[StrictStr] = Field(default='null', description="Interaction type")
    maxscore: Optional[StrictInt] = Field(default=null, description="Result max score")
    options: Optional[List[ModH5pactivityGetResults200ResponseAttemptsInnerResultsInnerOptionsInner]] = None
    optionslabel: Optional[StrictStr] = Field(default='null', description="Label used for result options")
    rawscore: Optional[StrictInt] = Field(default=null, description="Result score value")
    subcontent: Optional[StrictStr] = Field(default='null', description="Subcontent identifier")
    success: Optional[StrictInt] = Field(default=null, description="Result success")
    timecreated: Optional[StrictInt] = Field(default=null, description="Result creation")
    track: Optional[StrictBool] = Field(default=False, description="If the result has valid track information")
    __properties: ClassVar[List[str]] = ["answerlabel", "attemptid", "completion", "content", "correctlabel", "description", "duration", "id", "interactiontype", "maxscore", "options", "optionslabel", "rawscore", "subcontent", "success", "timecreated", "track"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModH5pactivityGetResults200ResponseAttemptsInnerResultsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in options (list)
        _items = []
        if self.options:
            for _item in self.options:
                if _item:
                    _items.append(_item.to_dict())
            _dict['options'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModH5pactivityGetResults200ResponseAttemptsInnerResultsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "answerlabel": obj.get("answerlabel") if obj.get("answerlabel") is not None else 'null',
            "attemptid": obj.get("attemptid") if obj.get("attemptid") is not None else null,
            "completion": obj.get("completion") if obj.get("completion") is not None else null,
            "content": obj.get("content") if obj.get("content") is not None else 'null',
            "correctlabel": obj.get("correctlabel") if obj.get("correctlabel") is not None else 'null',
            "description": obj.get("description") if obj.get("description") is not None else 'null',
            "duration": obj.get("duration") if obj.get("duration") is not None else 0,
            "id": obj.get("id"),
            "interactiontype": obj.get("interactiontype") if obj.get("interactiontype") is not None else 'null',
            "maxscore": obj.get("maxscore") if obj.get("maxscore") is not None else null,
            "options": [ModH5pactivityGetResults200ResponseAttemptsInnerResultsInnerOptionsInner.from_dict(_item) for _item in obj["options"]] if obj.get("options") is not None else None,
            "optionslabel": obj.get("optionslabel") if obj.get("optionslabel") is not None else 'null',
            "rawscore": obj.get("rawscore") if obj.get("rawscore") is not None else null,
            "subcontent": obj.get("subcontent") if obj.get("subcontent") is not None else 'null',
            "success": obj.get("success") if obj.get("success") is not None else null,
            "timecreated": obj.get("timecreated") if obj.get("timecreated") is not None else null,
            "track": obj.get("track") if obj.get("track") is not None else False
        })
        return _obj


