# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreMessageDataForMessageareaSearchMessages200ResponseContactsInner(BaseModel):
    """
    CoreMessageDataForMessageareaSearchMessages200ResponseContactsInner
    """ # noqa: E501
    conversationid: Optional[StrictInt] = Field(default=null, description="The id of the conversation")
    fullname: Optional[StrictStr] = Field(default='null', description="The user's name")
    isblocked: Optional[StrictBool] = Field(default=False, description="If the user has been blocked")
    ismessaging: Optional[StrictBool] = Field(default=False, description="If we are messaging the user")
    isonline: Optional[StrictBool] = Field(default=False, description="The user's online status")
    isread: Optional[StrictBool] = Field(default=False, description="If the user has read the message")
    lastmessage: Optional[StrictStr] = Field(default='null', description="The user's last message")
    lastmessagedate: Optional[StrictInt] = Field(default=null, description="Timestamp for last message")
    messageid: Optional[StrictInt] = Field(default=null, description="The unique search message id")
    profileimageurl: Optional[StrictStr] = Field(default='null', description="User picture URL")
    profileimageurlsmall: Optional[StrictStr] = Field(default='null', description="Small user picture URL")
    sentfromcurrentuser: Optional[StrictBool] = Field(default=False, description="Was the last message sent from the current user?")
    showonlinestatus: Optional[StrictBool] = Field(default=False, description="Show the user's online status?")
    unreadcount: Optional[StrictInt] = Field(default=null, description="The number of unread messages in this conversation")
    userid: Optional[StrictInt] = Field(default=null, description="The user's id")
    __properties: ClassVar[List[str]] = ["conversationid", "fullname", "isblocked", "ismessaging", "isonline", "isread", "lastmessage", "lastmessagedate", "messageid", "profileimageurl", "profileimageurlsmall", "sentfromcurrentuser", "showonlinestatus", "unreadcount", "userid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreMessageDataForMessageareaSearchMessages200ResponseContactsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreMessageDataForMessageareaSearchMessages200ResponseContactsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversationid": obj.get("conversationid") if obj.get("conversationid") is not None else null,
            "fullname": obj.get("fullname") if obj.get("fullname") is not None else 'null',
            "isblocked": obj.get("isblocked") if obj.get("isblocked") is not None else False,
            "ismessaging": obj.get("ismessaging") if obj.get("ismessaging") is not None else False,
            "isonline": obj.get("isonline") if obj.get("isonline") is not None else False,
            "isread": obj.get("isread") if obj.get("isread") is not None else False,
            "lastmessage": obj.get("lastmessage") if obj.get("lastmessage") is not None else 'null',
            "lastmessagedate": obj.get("lastmessagedate") if obj.get("lastmessagedate") is not None else null,
            "messageid": obj.get("messageid") if obj.get("messageid") is not None else null,
            "profileimageurl": obj.get("profileimageurl") if obj.get("profileimageurl") is not None else 'null',
            "profileimageurlsmall": obj.get("profileimageurlsmall") if obj.get("profileimageurlsmall") is not None else 'null',
            "sentfromcurrentuser": obj.get("sentfromcurrentuser") if obj.get("sentfromcurrentuser") is not None else False,
            "showonlinestatus": obj.get("showonlinestatus") if obj.get("showonlinestatus") is not None else False,
            "unreadcount": obj.get("unreadcount") if obj.get("unreadcount") is not None else null,
            "userid": obj.get("userid") if obj.get("userid") is not None else null
        })
        return _obj


