# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_block_get_dashboard_blocks200_response_blocks_inner_contents_files_inner import CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner
from typing import Optional, Set
from typing_extensions import Self

class ModForumGetForumDiscussionsPaginated200ResponseDiscussionsInner(BaseModel):
    """
    post
    """ # noqa: E501
    attachment: Optional[StrictStr] = Field(default=None, description="Has attachments?")
    attachments: Optional[List[CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner]] = None
    canlock: Optional[StrictBool] = Field(default=None, description="Can the user lock the discussion")
    canreply: Optional[StrictBool] = Field(default=None, description="Can the user reply to the discussion")
    created: Optional[StrictInt] = Field(default=None, description="Creation time")
    discussion: Optional[StrictInt] = Field(default=None, description="Discussion id")
    groupid: Optional[StrictInt] = Field(default=None, description="Group id")
    id: Optional[StrictInt] = Field(default=None, description="Post id")
    locked: Optional[StrictBool] = Field(default=None, description="Is the discussion locked")
    mailed: Optional[StrictInt] = Field(default=None, description="Mailed?")
    mailnow: Optional[StrictInt] = Field(default=None, description="Mail now?")
    message: Optional[StrictStr] = Field(default=None, description="The post message")
    messageformat: Optional[StrictInt] = Field(default=None, description="message format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    messageinlinefiles: Optional[List[CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner]] = None
    messagetrust: Optional[StrictInt] = Field(default=None, description="Can we trust?")
    modified: Optional[StrictInt] = Field(default=None, description="Time modified")
    name: Optional[StrictStr] = Field(default=None, description="Discussion name")
    numreplies: Optional[StrictInt] = Field(default=None, description="The number of replies in the discussion")
    numunread: Optional[StrictInt] = Field(default=None, description="The number of unread discussions.")
    parent: Optional[StrictInt] = Field(default=None, description="Parent id")
    pinned: Optional[StrictBool] = Field(default=None, description="Is the discussion pinned")
    subject: Optional[StrictStr] = Field(default=None, description="The post subject")
    timeend: Optional[StrictInt] = Field(default=None, description="Time discussion ends")
    timemodified: Optional[StrictInt] = Field(default=None, description="Time modified")
    timestart: Optional[StrictInt] = Field(default=None, description="Time discussion can start")
    totalscore: Optional[StrictInt] = Field(default=None, description="The post message total score")
    userfullname: Optional[StrictStr] = Field(default=None, description="Post author full name")
    userid: Optional[StrictInt] = Field(default=None, description="User who started the discussion id")
    usermodified: Optional[StrictInt] = Field(default=None, description="The id of the user who last modified")
    usermodifiedfullname: Optional[StrictStr] = Field(default=None, description="Post modifier full name")
    usermodifiedpictureurl: Optional[StrictStr] = Field(default=None, description="Post modifier picture.")
    userpictureurl: Optional[StrictStr] = Field(default=None, description="Post author picture.")
    __properties: ClassVar[List[str]] = ["attachment", "attachments", "canlock", "canreply", "created", "discussion", "groupid", "id", "locked", "mailed", "mailnow", "message", "messageformat", "messageinlinefiles", "messagetrust", "modified", "name", "numreplies", "numunread", "parent", "pinned", "subject", "timeend", "timemodified", "timestart", "totalscore", "userfullname", "userid", "usermodified", "usermodifiedfullname", "usermodifiedpictureurl", "userpictureurl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModForumGetForumDiscussionsPaginated200ResponseDiscussionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item in self.attachments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in messageinlinefiles (list)
        _items = []
        if self.messageinlinefiles:
            for _item in self.messageinlinefiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['messageinlinefiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModForumGetForumDiscussionsPaginated200ResponseDiscussionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachment": obj.get("attachment"),
            "attachments": [CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "canlock": obj.get("canlock"),
            "canreply": obj.get("canreply"),
            "created": obj.get("created"),
            "discussion": obj.get("discussion"),
            "groupid": obj.get("groupid"),
            "id": obj.get("id"),
            "locked": obj.get("locked"),
            "mailed": obj.get("mailed"),
            "mailnow": obj.get("mailnow"),
            "message": obj.get("message"),
            "messageformat": obj.get("messageformat"),
            "messageinlinefiles": [CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["messageinlinefiles"]] if obj.get("messageinlinefiles") is not None else None,
            "messagetrust": obj.get("messagetrust"),
            "modified": obj.get("modified"),
            "name": obj.get("name"),
            "numreplies": obj.get("numreplies"),
            "numunread": obj.get("numunread"),
            "parent": obj.get("parent"),
            "pinned": obj.get("pinned"),
            "subject": obj.get("subject"),
            "timeend": obj.get("timeend"),
            "timemodified": obj.get("timemodified"),
            "timestart": obj.get("timestart"),
            "totalscore": obj.get("totalscore"),
            "userfullname": obj.get("userfullname"),
            "userid": obj.get("userid"),
            "usermodified": obj.get("usermodified"),
            "usermodifiedfullname": obj.get("usermodifiedfullname"),
            "usermodifiedpictureurl": obj.get("usermodifiedpictureurl"),
            "userpictureurl": obj.get("userpictureurl")
        })
        return _obj


