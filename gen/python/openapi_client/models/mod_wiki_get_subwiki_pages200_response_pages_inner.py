# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.mod_data_get_entries200_response_entries_inner_tags_inner import ModDataGetEntries200ResponseEntriesInnerTagsInner
from typing import Optional, Set
from typing_extensions import Self

class ModWikiGetSubwikiPages200ResponsePagesInner(BaseModel):
    """
    Pages
    """ # noqa: E501
    cachedcontent: Optional[StrictStr] = Field(default=None, description="Page contents.")
    caneditpage: Optional[StrictBool] = Field(default=None, description="True if user can edit the page.")
    contentformat: Optional[StrictInt] = Field(default=None, description="cachedcontent format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    contentsize: Optional[StrictInt] = Field(default=null, description="Size of page contents in bytes (doesn't include size of attached files).")
    firstpage: Optional[StrictBool] = Field(default=False, description="True if it's the first page.")
    id: Optional[StrictInt] = Field(default=None, description="Page ID.")
    pageviews: Optional[StrictInt] = Field(default=null, description="Number of times the page has been viewed.")
    readonly: Optional[StrictInt] = Field(default=null, description="1 if readonly, 0 otherwise.")
    subwikiid: Optional[StrictInt] = Field(default=None, description="Page's subwiki ID.")
    tags: Optional[List[ModDataGetEntries200ResponseEntriesInnerTagsInner]] = None
    timecreated: Optional[StrictInt] = Field(default=null, description="Time of creation.")
    timemodified: Optional[StrictInt] = Field(default=null, description="Time of last modification.")
    timerendered: Optional[StrictInt] = Field(default=null, description="Time of last renderization.")
    title: Optional[StrictStr] = Field(default=None, description="Page title.")
    userid: Optional[StrictInt] = Field(default=null, description="ID of the user that last modified the page.")
    __properties: ClassVar[List[str]] = ["cachedcontent", "caneditpage", "contentformat", "contentsize", "firstpage", "id", "pageviews", "readonly", "subwikiid", "tags", "timecreated", "timemodified", "timerendered", "title", "userid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModWikiGetSubwikiPages200ResponsePagesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModWikiGetSubwikiPages200ResponsePagesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cachedcontent": obj.get("cachedcontent"),
            "caneditpage": obj.get("caneditpage"),
            "contentformat": obj.get("contentformat"),
            "contentsize": obj.get("contentsize") if obj.get("contentsize") is not None else null,
            "firstpage": obj.get("firstpage") if obj.get("firstpage") is not None else False,
            "id": obj.get("id"),
            "pageviews": obj.get("pageviews") if obj.get("pageviews") is not None else null,
            "readonly": obj.get("readonly") if obj.get("readonly") is not None else null,
            "subwikiid": obj.get("subwikiid"),
            "tags": [ModDataGetEntries200ResponseEntriesInnerTagsInner.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "timecreated": obj.get("timecreated") if obj.get("timecreated") is not None else null,
            "timemodified": obj.get("timemodified") if obj.get("timemodified") is not None else null,
            "timerendered": obj.get("timerendered") if obj.get("timerendered") is not None else null,
            "title": obj.get("title"),
            "userid": obj.get("userid") if obj.get("userid") is not None else null
        })
        return _obj


