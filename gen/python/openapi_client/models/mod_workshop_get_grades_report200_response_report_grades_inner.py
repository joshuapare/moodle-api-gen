# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.mod_workshop_get_grades_report200_response_report_grades_inner_reviewedby_inner import ModWorkshopGetGradesReport200ResponseReportGradesInnerReviewedbyInner
from openapi_client.models.mod_workshop_get_grades_report200_response_report_grades_inner_reviewerof_inner import ModWorkshopGetGradesReport200ResponseReportGradesInnerReviewerofInner
from typing import Optional, Set
from typing_extensions import Self

class ModWorkshopGetGradesReport200ResponseReportGradesInner(BaseModel):
    """
    ModWorkshopGetGradesReport200ResponseReportGradesInner
    """ # noqa: E501
    gradinggrade: Optional[Union[StrictFloat, StrictInt]] = Field(default=null, description="Computed grade for the assessment.")
    reviewedby: Optional[List[ModWorkshopGetGradesReport200ResponseReportGradesInnerReviewedbyInner]] = None
    reviewerof: Optional[List[ModWorkshopGetGradesReport200ResponseReportGradesInnerReviewerofInner]] = None
    submissiongrade: Optional[Union[StrictFloat, StrictInt]] = Field(default=null, description="Aggregated grade for the submission.")
    submissiongradeover: Optional[Union[StrictFloat, StrictInt]] = Field(default=null, description="Grade for the assessment overrided                                         by the teacher.")
    submissiongradeoverby: Optional[StrictInt] = Field(default=null, description="The id of the user who overrided                                         the grade.")
    submissionid: Optional[StrictInt] = Field(default=null, description="Submission id.")
    submissionmodified: Optional[StrictInt] = Field(default=null, description="Timestamp submission was updated.")
    submissionpublished: Optional[StrictInt] = Field(default=null, description="Whether is a submission published.")
    submissiontitle: Optional[StrictStr] = Field(default='null', description="Submission title.")
    userid: Optional[StrictInt] = Field(default=null, description="The id of the user being displayed in the report.")
    __properties: ClassVar[List[str]] = ["gradinggrade", "reviewedby", "reviewerof", "submissiongrade", "submissiongradeover", "submissiongradeoverby", "submissionid", "submissionmodified", "submissionpublished", "submissiontitle", "userid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModWorkshopGetGradesReport200ResponseReportGradesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reviewedby (list)
        _items = []
        if self.reviewedby:
            for _item in self.reviewedby:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reviewedby'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in reviewerof (list)
        _items = []
        if self.reviewerof:
            for _item in self.reviewerof:
                if _item:
                    _items.append(_item.to_dict())
            _dict['reviewerof'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModWorkshopGetGradesReport200ResponseReportGradesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gradinggrade": obj.get("gradinggrade") if obj.get("gradinggrade") is not None else null,
            "reviewedby": [ModWorkshopGetGradesReport200ResponseReportGradesInnerReviewedbyInner.from_dict(_item) for _item in obj["reviewedby"]] if obj.get("reviewedby") is not None else None,
            "reviewerof": [ModWorkshopGetGradesReport200ResponseReportGradesInnerReviewerofInner.from_dict(_item) for _item in obj["reviewerof"]] if obj.get("reviewerof") is not None else None,
            "submissiongrade": obj.get("submissiongrade") if obj.get("submissiongrade") is not None else null,
            "submissiongradeover": obj.get("submissiongradeover") if obj.get("submissiongradeover") is not None else null,
            "submissiongradeoverby": obj.get("submissiongradeoverby") if obj.get("submissiongradeoverby") is not None else null,
            "submissionid": obj.get("submissionid") if obj.get("submissionid") is not None else null,
            "submissionmodified": obj.get("submissionmodified") if obj.get("submissionmodified") is not None else null,
            "submissionpublished": obj.get("submissionpublished") if obj.get("submissionpublished") is not None else null,
            "submissiontitle": obj.get("submissiontitle") if obj.get("submissiontitle") is not None else 'null',
            "userid": obj.get("userid") if obj.get("userid") is not None else null
        })
        return _obj


