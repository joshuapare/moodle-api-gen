# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreGradesCreateGradecategoriesRequestCategoriesInnerOptions(BaseModel):
    """
    CoreGradesCreateGradecategoriesRequestCategoriesInnerOptions
    """ # noqa: E501
    aggregateonlygraded: Optional[StrictBool] = Field(default=False, description="exclude empty grades")
    aggregateoutcomes: Optional[StrictBool] = Field(default=False, description="aggregate outcomes")
    aggregation: Optional[StrictInt] = Field(default=null, description="aggregation method")
    aggregationcoef2: Optional[StrictStr] = Field(default='null', description="weight coefficient")
    decimals: Optional[StrictInt] = Field(default=null, description="the decimal count")
    display: Optional[StrictInt] = Field(default=null, description="the display type")
    droplow: Optional[StrictInt] = Field(default=null, description="drop low grades")
    grademax: Optional[StrictInt] = Field(default=null, description="the grade max")
    grademin: Optional[StrictInt] = Field(default=null, description="the grade min")
    gradepass: Optional[StrictInt] = Field(default=null, description="the grade to pass")
    gradetype: Optional[StrictInt] = Field(default=null, description="the grade type")
    hiddenuntil: Optional[StrictInt] = Field(default=null, description="grades hidden until")
    idnumber: Optional[StrictStr] = Field(default='null', description="the category idnumber")
    iteminfo: Optional[StrictStr] = Field(default='null', description="the category iteminfo")
    itemname: Optional[StrictStr] = Field(default='null', description="the category total name")
    locktime: Optional[StrictInt] = Field(default=null, description="lock grades after")
    parentcategoryid: Optional[StrictInt] = Field(default=null, description="The parent category id")
    parentcategoryidnumber: Optional[StrictStr] = Field(default='null', description="the parent category idnumber")
    weightoverride: Optional[StrictBool] = Field(default=False, description="weight adjusted")
    __properties: ClassVar[List[str]] = ["aggregateonlygraded", "aggregateoutcomes", "aggregation", "aggregationcoef2", "decimals", "display", "droplow", "grademax", "grademin", "gradepass", "gradetype", "hiddenuntil", "idnumber", "iteminfo", "itemname", "locktime", "parentcategoryid", "parentcategoryidnumber", "weightoverride"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreGradesCreateGradecategoriesRequestCategoriesInnerOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreGradesCreateGradecategoriesRequestCategoriesInnerOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregateonlygraded": obj.get("aggregateonlygraded") if obj.get("aggregateonlygraded") is not None else False,
            "aggregateoutcomes": obj.get("aggregateoutcomes") if obj.get("aggregateoutcomes") is not None else False,
            "aggregation": obj.get("aggregation") if obj.get("aggregation") is not None else null,
            "aggregationcoef2": obj.get("aggregationcoef2") if obj.get("aggregationcoef2") is not None else 'null',
            "decimals": obj.get("decimals") if obj.get("decimals") is not None else null,
            "display": obj.get("display") if obj.get("display") is not None else null,
            "droplow": obj.get("droplow") if obj.get("droplow") is not None else null,
            "grademax": obj.get("grademax") if obj.get("grademax") is not None else null,
            "grademin": obj.get("grademin") if obj.get("grademin") is not None else null,
            "gradepass": obj.get("gradepass") if obj.get("gradepass") is not None else null,
            "gradetype": obj.get("gradetype") if obj.get("gradetype") is not None else null,
            "hiddenuntil": obj.get("hiddenuntil") if obj.get("hiddenuntil") is not None else null,
            "idnumber": obj.get("idnumber") if obj.get("idnumber") is not None else 'null',
            "iteminfo": obj.get("iteminfo") if obj.get("iteminfo") is not None else 'null',
            "itemname": obj.get("itemname") if obj.get("itemname") is not None else 'null',
            "locktime": obj.get("locktime") if obj.get("locktime") is not None else null,
            "parentcategoryid": obj.get("parentcategoryid") if obj.get("parentcategoryid") is not None else null,
            "parentcategoryidnumber": obj.get("parentcategoryidnumber") if obj.get("parentcategoryidnumber") is not None else 'null',
            "weightoverride": obj.get("weightoverride") if obj.get("weightoverride") is not None else False
        })
        return _obj


