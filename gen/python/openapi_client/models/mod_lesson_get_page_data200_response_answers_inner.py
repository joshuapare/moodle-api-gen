# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_block_get_dashboard_blocks200_response_blocks_inner_contents_files_inner import CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner
from typing import Optional, Set
from typing_extensions import Self

class ModLessonGetPageData200ResponseAnswersInner(BaseModel):
    """
    The page answers
    """ # noqa: E501
    answer: Optional[StrictStr] = Field(default='null', description="Possible answer text")
    answerfiles: Optional[List[CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner]] = None
    answerformat: Optional[StrictInt] = Field(default=null, description="answer format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    flags: Optional[StrictInt] = Field(default=null, description="Used to store options for the answer")
    grade: Optional[StrictInt] = Field(default=null, description="The grade this answer is worth")
    id: Optional[StrictInt] = Field(default=null, description="The ID of this answer in the database")
    jumpto: Optional[StrictInt] = Field(default=null, description="Identifies where the user goes upon completing a page with this answer")
    response: Optional[StrictStr] = Field(default='null', description="Response text for the answer")
    responsefiles: Optional[List[CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner]] = None
    responseformat: Optional[StrictInt] = Field(default=null, description="response format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    score: Optional[StrictInt] = Field(default=null, description="The score this answer will give")
    timecreated: Optional[StrictInt] = Field(default=null, description="A timestamp of when the answer was created")
    timemodified: Optional[StrictInt] = Field(default=null, description="A timestamp of when the answer was modified")
    __properties: ClassVar[List[str]] = ["answer", "answerfiles", "answerformat", "flags", "grade", "id", "jumpto", "response", "responsefiles", "responseformat", "score", "timecreated", "timemodified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModLessonGetPageData200ResponseAnswersInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in answerfiles (list)
        _items = []
        if self.answerfiles:
            for _item in self.answerfiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['answerfiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in responsefiles (list)
        _items = []
        if self.responsefiles:
            for _item in self.responsefiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['responsefiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModLessonGetPageData200ResponseAnswersInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "answer": obj.get("answer") if obj.get("answer") is not None else 'null',
            "answerfiles": [CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["answerfiles"]] if obj.get("answerfiles") is not None else None,
            "answerformat": obj.get("answerformat") if obj.get("answerformat") is not None else null,
            "flags": obj.get("flags") if obj.get("flags") is not None else null,
            "grade": obj.get("grade") if obj.get("grade") is not None else null,
            "id": obj.get("id") if obj.get("id") is not None else null,
            "jumpto": obj.get("jumpto") if obj.get("jumpto") is not None else null,
            "response": obj.get("response") if obj.get("response") is not None else 'null',
            "responsefiles": [CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["responsefiles"]] if obj.get("responsefiles") is not None else None,
            "responseformat": obj.get("responseformat") if obj.get("responseformat") is not None else null,
            "score": obj.get("score") if obj.get("score") is not None else null,
            "timecreated": obj.get("timecreated") if obj.get("timecreated") is not None else null,
            "timemodified": obj.get("timemodified") if obj.get("timemodified") is not None else null
        })
        return _obj


