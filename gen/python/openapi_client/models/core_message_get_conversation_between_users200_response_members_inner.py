# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_message_get_conversation_between_users200_response_members_inner_contactrequests_inner import CoreMessageGetConversationBetweenUsers200ResponseMembersInnerContactrequestsInner
from openapi_client.models.core_message_get_conversation_between_users200_response_members_inner_conversations_inner import CoreMessageGetConversationBetweenUsers200ResponseMembersInnerConversationsInner
from typing import Optional, Set
from typing_extensions import Self

class CoreMessageGetConversationBetweenUsers200ResponseMembersInner(BaseModel):
    """
    CoreMessageGetConversationBetweenUsers200ResponseMembersInner
    """ # noqa: E501
    canmessage: Optional[StrictBool] = Field(default=None, description="If the user can be messaged")
    canmessageevenifblocked: Optional[StrictBool] = Field(default=None, description="If the user can still message even if they get blocked")
    contactrequests: Optional[List[CoreMessageGetConversationBetweenUsers200ResponseMembersInnerContactrequestsInner]] = None
    conversations: Optional[List[CoreMessageGetConversationBetweenUsers200ResponseMembersInnerConversationsInner]] = None
    fullname: Optional[StrictStr] = Field(default=None, description="The user's name")
    id: Optional[StrictInt] = Field(default=None, description="The user id")
    isblocked: Optional[StrictBool] = Field(default=None, description="If the user has been blocked")
    iscontact: Optional[StrictBool] = Field(default=None, description="Is the user a contact?")
    isdeleted: Optional[StrictBool] = Field(default=None, description="Is the user deleted?")
    isonline: Optional[StrictBool] = Field(default=None, description="The user's online status")
    profileimageurl: Optional[StrictStr] = Field(default=None, description="User picture URL")
    profileimageurlsmall: Optional[StrictStr] = Field(default=None, description="Small user picture URL")
    profileurl: Optional[StrictStr] = Field(default=None, description="The link to the user's profile page")
    requirescontact: Optional[StrictBool] = Field(default=None, description="If the user requires to be contacts")
    showonlinestatus: Optional[StrictBool] = Field(default=None, description="Show the user's online status?")
    __properties: ClassVar[List[str]] = ["canmessage", "canmessageevenifblocked", "contactrequests", "conversations", "fullname", "id", "isblocked", "iscontact", "isdeleted", "isonline", "profileimageurl", "profileimageurlsmall", "profileurl", "requirescontact", "showonlinestatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreMessageGetConversationBetweenUsers200ResponseMembersInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contactrequests (list)
        _items = []
        if self.contactrequests:
            for _item in self.contactrequests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['contactrequests'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in conversations (list)
        _items = []
        if self.conversations:
            for _item in self.conversations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['conversations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreMessageGetConversationBetweenUsers200ResponseMembersInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "canmessage": obj.get("canmessage"),
            "canmessageevenifblocked": obj.get("canmessageevenifblocked"),
            "contactrequests": [CoreMessageGetConversationBetweenUsers200ResponseMembersInnerContactrequestsInner.from_dict(_item) for _item in obj["contactrequests"]] if obj.get("contactrequests") is not None else None,
            "conversations": [CoreMessageGetConversationBetweenUsers200ResponseMembersInnerConversationsInner.from_dict(_item) for _item in obj["conversations"]] if obj.get("conversations") is not None else None,
            "fullname": obj.get("fullname"),
            "id": obj.get("id"),
            "isblocked": obj.get("isblocked"),
            "iscontact": obj.get("iscontact"),
            "isdeleted": obj.get("isdeleted"),
            "isonline": obj.get("isonline"),
            "profileimageurl": obj.get("profileimageurl"),
            "profileimageurlsmall": obj.get("profileimageurlsmall"),
            "profileurl": obj.get("profileurl"),
            "requirescontact": obj.get("requirescontact"),
            "showonlinestatus": obj.get("showonlinestatus")
        })
        return _obj


