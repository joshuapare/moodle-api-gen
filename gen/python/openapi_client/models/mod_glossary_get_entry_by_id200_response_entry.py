# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_block_get_dashboard_blocks200_response_blocks_inner_contents_files_inner import CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner
from openapi_client.models.mod_data_get_entries200_response_entries_inner_tags_inner import ModDataGetEntries200ResponseEntriesInnerTagsInner
from typing import Optional, Set
from typing_extensions import Self

class ModGlossaryGetEntryById200ResponseEntry(BaseModel):
    """
    ModGlossaryGetEntryById200ResponseEntry
    """ # noqa: E501
    approved: StrictBool = Field(description="Whether the entry was approved")
    attachment: StrictBool = Field(description="Whether or not the entry has attachments")
    attachments: Optional[List[CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner]] = None
    casesensitive: StrictBool = Field(description="When true, the matching is case sensitive")
    concept: StrictStr = Field(description="The concept")
    definition: StrictStr = Field(description="The definition")
    definitionformat: StrictInt = Field(description="definition format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    definitioninlinefiles: Optional[List[CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner]] = None
    definitiontrust: StrictBool = Field(description="The definition trust flag")
    fullmatch: StrictBool = Field(description="When true, the matching is done on full words only")
    glossaryid: StrictInt = Field(description="The glossary ID")
    id: StrictInt = Field(description="The entry ID")
    sourceglossaryid: StrictInt = Field(description="The source glossary ID")
    tags: Optional[List[ModDataGetEntries200ResponseEntriesInnerTagsInner]] = None
    teacherentry: StrictBool = Field(description="The entry was created by a teacher, or equivalent.")
    timecreated: StrictInt = Field(description="Time created")
    timemodified: StrictInt = Field(description="Time modified")
    usedynalink: StrictBool = Field(description="Whether the concept should be automatically linked")
    userfullname: StrictStr = Field(description="Author full name")
    userid: StrictInt = Field(description="Author ID")
    userpictureurl: StrictStr = Field(description="Author picture")
    __properties: ClassVar[List[str]] = ["approved", "attachment", "attachments", "casesensitive", "concept", "definition", "definitionformat", "definitioninlinefiles", "definitiontrust", "fullmatch", "glossaryid", "id", "sourceglossaryid", "tags", "teacherentry", "timecreated", "timemodified", "usedynalink", "userfullname", "userid", "userpictureurl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModGlossaryGetEntryById200ResponseEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item in self.attachments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in definitioninlinefiles (list)
        _items = []
        if self.definitioninlinefiles:
            for _item in self.definitioninlinefiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['definitioninlinefiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModGlossaryGetEntryById200ResponseEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approved": obj.get("approved"),
            "attachment": obj.get("attachment"),
            "attachments": [CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "casesensitive": obj.get("casesensitive"),
            "concept": obj.get("concept"),
            "definition": obj.get("definition"),
            "definitionformat": obj.get("definitionformat"),
            "definitioninlinefiles": [CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["definitioninlinefiles"]] if obj.get("definitioninlinefiles") is not None else None,
            "definitiontrust": obj.get("definitiontrust"),
            "fullmatch": obj.get("fullmatch"),
            "glossaryid": obj.get("glossaryid"),
            "id": obj.get("id"),
            "sourceglossaryid": obj.get("sourceglossaryid"),
            "tags": [ModDataGetEntries200ResponseEntriesInnerTagsInner.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "teacherentry": obj.get("teacherentry"),
            "timecreated": obj.get("timecreated"),
            "timemodified": obj.get("timemodified"),
            "usedynalink": obj.get("usedynalink"),
            "userfullname": obj.get("userfullname"),
            "userid": obj.get("userid"),
            "userpictureurl": obj.get("userpictureurl")
        })
        return _obj


