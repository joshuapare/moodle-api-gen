# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_table_get_dynamic_table_content_request_filters_inner import CoreTableGetDynamicTableContentRequestFiltersInner
from openapi_client.models.core_table_get_dynamic_table_content_request_sortdata_inner import CoreTableGetDynamicTableContentRequestSortdataInner
from typing import Optional, Set
from typing_extensions import Self

class CoreTableGetDynamicTableContentRequest(BaseModel):
    """
    CoreTableGetDynamicTableContentRequest
    """ # noqa: E501
    component: StrictStr = Field(description="Component")
    filters: Optional[List[CoreTableGetDynamicTableContentRequestFiltersInner]] = None
    firstinitial: StrictStr = Field(description="The first initial to sort filter on")
    handler: StrictStr = Field(description="Handler")
    hiddencolumns: List[Dict[str, Any]]
    jointype: StrictInt = Field(description="Type of join to join all filters together")
    lastinitial: StrictStr = Field(description="The last initial to sort filter on")
    pagenumber: StrictInt = Field(description="The page number")
    pagesize: StrictInt = Field(description="The number of records per page")
    resetpreferences: StrictBool = Field(description="Whether the table preferences should be reset")
    sortdata: Optional[List[CoreTableGetDynamicTableContentRequestSortdataInner]] = None
    uniqueid: StrictStr = Field(description="Unique ID for the container")
    __properties: ClassVar[List[str]] = ["component", "filters", "firstinitial", "handler", "hiddencolumns", "jointype", "lastinitial", "pagenumber", "pagesize", "resetpreferences", "sortdata", "uniqueid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreTableGetDynamicTableContentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item in self.filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['filters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sortdata (list)
        _items = []
        if self.sortdata:
            for _item in self.sortdata:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sortdata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreTableGetDynamicTableContentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "component": obj.get("component"),
            "filters": [CoreTableGetDynamicTableContentRequestFiltersInner.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "firstinitial": obj.get("firstinitial") if obj.get("firstinitial") is not None else 'null',
            "handler": obj.get("handler") if obj.get("handler") is not None else 'null',
            "hiddencolumns": obj.get("hiddencolumns"),
            "jointype": obj.get("jointype") if obj.get("jointype") is not None else null,
            "lastinitial": obj.get("lastinitial") if obj.get("lastinitial") is not None else 'null',
            "pagenumber": obj.get("pagenumber") if obj.get("pagenumber") is not None else null,
            "pagesize": obj.get("pagesize") if obj.get("pagesize") is not None else null,
            "resetpreferences": obj.get("resetpreferences") if obj.get("resetpreferences") is not None else False,
            "sortdata": [CoreTableGetDynamicTableContentRequestSortdataInner.from_dict(_item) for _item in obj["sortdata"]] if obj.get("sortdata") is not None else None,
            "uniqueid": obj.get("uniqueid") if obj.get("uniqueid") is not None else 'null'
        })
        return _obj


