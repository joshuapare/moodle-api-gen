# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_block_get_dashboard_blocks200_response_blocks_inner_contents_files_inner import CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner
from typing import Optional, Set
from typing_extensions import Self

class ModPageGetPagesByCourses200ResponsePagesInner(BaseModel):
    """
    ModPageGetPagesByCourses200ResponsePagesInner
    """ # noqa: E501
    content: Optional[StrictStr] = Field(default='null', description="Page content")
    contentfiles: Optional[List[CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner]] = None
    contentformat: Optional[StrictInt] = Field(default=None, description="content format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    course: Optional[StrictInt] = Field(default=None, description="Course id")
    coursemodule: Optional[StrictInt] = Field(default=None, description="Course module id")
    display: Optional[StrictInt] = Field(default=null, description="How to display the page")
    displayoptions: Optional[StrictStr] = Field(default='null', description="Display options (width, height)")
    groupingid: Optional[StrictInt] = Field(default=None, description="Group id")
    groupmode: Optional[StrictInt] = Field(default=None, description="Group mode")
    id: Optional[StrictInt] = Field(default=None, description="Activity instance id")
    intro: Optional[StrictStr] = Field(default=None, description="Activity introduction")
    introfiles: Optional[List[CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner]] = None
    introformat: Optional[StrictInt] = Field(default=None, description="intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    lang: Optional[StrictStr] = Field(default=None, description="Forced activity language")
    legacyfiles: Optional[StrictInt] = Field(default=null, description="Legacy files flag")
    legacyfileslast: Optional[StrictInt] = Field(default=null, description="Legacy files last control flag")
    name: Optional[StrictStr] = Field(default=None, description="Activity name")
    revision: Optional[StrictInt] = Field(default=None, description="Incremented when after each file changes, to avoid cache")
    section: Optional[StrictInt] = Field(default=None, description="Course section id")
    timemodified: Optional[StrictInt] = Field(default=null, description="Last time the page was modified")
    visible: Optional[StrictBool] = Field(default=None, description="Visible")
    __properties: ClassVar[List[str]] = ["content", "contentfiles", "contentformat", "course", "coursemodule", "display", "displayoptions", "groupingid", "groupmode", "id", "intro", "introfiles", "introformat", "lang", "legacyfiles", "legacyfileslast", "name", "revision", "section", "timemodified", "visible"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModPageGetPagesByCourses200ResponsePagesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contentfiles (list)
        _items = []
        if self.contentfiles:
            for _item in self.contentfiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['contentfiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in introfiles (list)
        _items = []
        if self.introfiles:
            for _item in self.introfiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['introfiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModPageGetPagesByCourses200ResponsePagesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content") if obj.get("content") is not None else 'null',
            "contentfiles": [CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["contentfiles"]] if obj.get("contentfiles") is not None else None,
            "contentformat": obj.get("contentformat"),
            "course": obj.get("course"),
            "coursemodule": obj.get("coursemodule"),
            "display": obj.get("display") if obj.get("display") is not None else null,
            "displayoptions": obj.get("displayoptions") if obj.get("displayoptions") is not None else 'null',
            "groupingid": obj.get("groupingid"),
            "groupmode": obj.get("groupmode"),
            "id": obj.get("id"),
            "intro": obj.get("intro"),
            "introfiles": [CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["introfiles"]] if obj.get("introfiles") is not None else None,
            "introformat": obj.get("introformat"),
            "lang": obj.get("lang"),
            "legacyfiles": obj.get("legacyfiles") if obj.get("legacyfiles") is not None else null,
            "legacyfileslast": obj.get("legacyfileslast") if obj.get("legacyfileslast") is not None else null,
            "name": obj.get("name"),
            "revision": obj.get("revision"),
            "section": obj.get("section"),
            "timemodified": obj.get("timemodified") if obj.get("timemodified") is not None else null,
            "visible": obj.get("visible")
        })
        return _obj


