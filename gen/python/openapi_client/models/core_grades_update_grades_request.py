# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_grades_update_grades_request_grades_inner import CoreGradesUpdateGradesRequestGradesInner
from openapi_client.models.core_grades_update_grades_request_itemdetails import CoreGradesUpdateGradesRequestItemdetails
from typing import Optional, Set
from typing_extensions import Self

class CoreGradesUpdateGradesRequest(BaseModel):
    """
    CoreGradesUpdateGradesRequest
    """ # noqa: E501
    activityid: StrictInt = Field(description="The activity ID")
    component: StrictStr = Field(description="A component, for example mod_forum or mod_quiz")
    courseid: StrictInt = Field(description="id of course")
    grades: Optional[List[CoreGradesUpdateGradesRequestGradesInner]] = None
    itemdetails: Optional[CoreGradesUpdateGradesRequestItemdetails] = None
    itemnumber: StrictInt = Field(description="grade item ID number for modules that have multiple grades. Typically this is 0.")
    source: StrictStr = Field(description="The source of the grade update")
    __properties: ClassVar[List[str]] = ["activityid", "component", "courseid", "grades", "itemdetails", "itemnumber", "source"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreGradesUpdateGradesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in grades (list)
        _items = []
        if self.grades:
            for _item in self.grades:
                if _item:
                    _items.append(_item.to_dict())
            _dict['grades'] = _items
        # override the default output from pydantic by calling `to_dict()` of itemdetails
        if self.itemdetails:
            _dict['itemdetails'] = self.itemdetails.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreGradesUpdateGradesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activityid": obj.get("activityid") if obj.get("activityid") is not None else null,
            "component": obj.get("component") if obj.get("component") is not None else 'null',
            "courseid": obj.get("courseid"),
            "grades": [CoreGradesUpdateGradesRequestGradesInner.from_dict(_item) for _item in obj["grades"]] if obj.get("grades") is not None else None,
            "itemdetails": CoreGradesUpdateGradesRequestItemdetails.from_dict(obj["itemdetails"]) if obj.get("itemdetails") is not None else None,
            "itemnumber": obj.get("itemnumber") if obj.get("itemnumber") is not None else null,
            "source": obj.get("source") if obj.get("source") is not None else 'null'
        })
        return _obj


