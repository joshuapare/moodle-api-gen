# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreCommentGetComments200ResponseCommentsInner(BaseModel):
    """
    comment
    """ # noqa: E501
    avatar: Optional[StrictStr] = Field(default='null', description="HTML user picture")
    content: Optional[StrictStr] = Field(default='null', description="The content text formatted")
    delete: Optional[StrictBool] = Field(default=False, description="Permission to delete=true/false")
    format: Optional[StrictInt] = Field(default=None, description="content format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    fullname: Optional[StrictStr] = Field(default='null', description="fullname")
    id: Optional[StrictInt] = Field(default=null, description="Comment ID")
    profileurl: Optional[StrictStr] = Field(default='null', description="URL profile")
    strftimeformat: Optional[StrictStr] = Field(default='null', description="Time format")
    time: Optional[StrictStr] = Field(default='null', description="Time in human format")
    timecreated: Optional[StrictInt] = Field(default=null, description="Time created (timestamp)")
    userid: Optional[StrictInt] = Field(default=None, description="User ID")
    __properties: ClassVar[List[str]] = ["avatar", "content", "delete", "format", "fullname", "id", "profileurl", "strftimeformat", "time", "timecreated", "userid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreCommentGetComments200ResponseCommentsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreCommentGetComments200ResponseCommentsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avatar": obj.get("avatar") if obj.get("avatar") is not None else 'null',
            "content": obj.get("content") if obj.get("content") is not None else 'null',
            "delete": obj.get("delete") if obj.get("delete") is not None else False,
            "format": obj.get("format"),
            "fullname": obj.get("fullname") if obj.get("fullname") is not None else 'null',
            "id": obj.get("id") if obj.get("id") is not None else null,
            "profileurl": obj.get("profileurl") if obj.get("profileurl") is not None else 'null',
            "strftimeformat": obj.get("strftimeformat") if obj.get("strftimeformat") is not None else 'null',
            "time": obj.get("time") if obj.get("time") is not None else 'null',
            "timecreated": obj.get("timecreated") if obj.get("timecreated") is not None else null,
            "userid": obj.get("userid")
        })
        return _obj


