# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MessageAirnotifierGetUserDevices200ResponseDevicesInner(BaseModel):
    """
    MessageAirnotifierGetUserDevices200ResponseDevicesInner
    """ # noqa: E501
    appid: Optional[StrictStr] = Field(default=None, description="The app id, something like com.moodle.moodlemobile")
    enable: Optional[StrictInt] = Field(default=null, description="Whether the device is enabled or not")
    id: Optional[StrictInt] = Field(default=null, description="Device id (in the message_airnotifier table)")
    model: Optional[StrictStr] = Field(default='null', description="The device model 'Nexus4' or 'iPad1,1' etc.")
    name: Optional[StrictStr] = Field(default='null', description="The device name, 'occam' or 'iPhone' etc.")
    platform: Optional[StrictStr] = Field(default='null', description="The device platform 'iOS' or 'Android' etc.")
    pushid: Optional[StrictStr] = Field(default='null', description="The device PUSH token/key/identifier/registration id")
    timecreated: Optional[StrictInt] = Field(default=None, description="Time created")
    timemodified: Optional[StrictInt] = Field(default=null, description="Time modified")
    uuid: Optional[StrictStr] = Field(default='null', description="The device UUID")
    version: Optional[StrictStr] = Field(default='null', description="The device version '6.1.2' or '4.2.2' etc.")
    __properties: ClassVar[List[str]] = ["appid", "enable", "id", "model", "name", "platform", "pushid", "timecreated", "timemodified", "uuid", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessageAirnotifierGetUserDevices200ResponseDevicesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessageAirnotifierGetUserDevices200ResponseDevicesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appid": obj.get("appid"),
            "enable": obj.get("enable") if obj.get("enable") is not None else null,
            "id": obj.get("id") if obj.get("id") is not None else null,
            "model": obj.get("model") if obj.get("model") is not None else 'null',
            "name": obj.get("name") if obj.get("name") is not None else 'null',
            "platform": obj.get("platform") if obj.get("platform") is not None else 'null',
            "pushid": obj.get("pushid") if obj.get("pushid") is not None else 'null',
            "timecreated": obj.get("timecreated"),
            "timemodified": obj.get("timemodified") if obj.get("timemodified") is not None else null,
            "uuid": obj.get("uuid") if obj.get("uuid") is not None else 'null',
            "version": obj.get("version") if obj.get("version") is not None else 'null'
        })
        return _obj


