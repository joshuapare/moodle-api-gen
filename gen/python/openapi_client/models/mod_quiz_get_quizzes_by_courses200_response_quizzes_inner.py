# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.core_block_get_dashboard_blocks200_response_blocks_inner_contents_files_inner import CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner
from typing import Optional, Set
from typing_extensions import Self

class ModQuizGetQuizzesByCourses200ResponseQuizzesInner(BaseModel):
    """
    ModQuizGetQuizzesByCourses200ResponseQuizzesInner
    """ # noqa: E501
    allowofflineattempts: Optional[StrictInt] = Field(default=null, description="Whether to allow the quiz to be attempted                                                                             offline in the mobile app")
    attemptonlast: Optional[StrictInt] = Field(default=null, description="Whether subsequent attempts start from the answer                                                                     to the previous attempt (1) or start blank (0).")
    attempts: Optional[StrictInt] = Field(default=null, description="The maximum number of attempts a student is allowed.")
    autosaveperiod: Optional[StrictInt] = Field(default=null, description="Auto-save delay")
    browsersecurity: Optional[StrictStr] = Field(default='null', description="Restriciton on the browser the student must                                                                     use. E.g. 'securewindow'.")
    canredoquestions: Optional[StrictInt] = Field(default=null, description="Allows students to redo any completed question                                                                         within a quiz attempt.")
    completionattemptsexhausted: Optional[StrictInt] = Field(default=null, description="Mark quiz complete when the student has                                                                                 exhausted the maximum number of attempts")
    completionpass: Optional[StrictInt] = Field(default=null, description="Whether to require passing grade")
    course: Optional[StrictInt] = Field(default=None, description="Course id")
    coursemodule: Optional[StrictInt] = Field(default=None, description="Course module id")
    decimalpoints: Optional[StrictInt] = Field(default=null, description="Number of decimal points to use when displaying                                                                     grades.")
    delay1: Optional[StrictInt] = Field(default=null, description="Delay that must be left between the first and second attempt,                                                             in seconds.")
    delay2: Optional[StrictInt] = Field(default=null, description="Delay that must be left between the second and subsequent                                                             attempt, in seconds.")
    graceperiod: Optional[StrictInt] = Field(default=null, description="The amount of time (in seconds) after the time limit                                                                 runs out during which attempts can still be submitted,                                                                 if overduehandling is set to allow it.")
    grade: Optional[Union[StrictFloat, StrictInt]] = Field(default=null, description="The total that the quiz overall grade is scaled to be                                                             out of.")
    grademethod: Optional[StrictInt] = Field(default=null, description="One of the values QUIZ_GRADEHIGHEST, QUIZ_GRADEAVERAGE,                                                                     QUIZ_ATTEMPTFIRST or QUIZ_ATTEMPTLAST.")
    groupingid: Optional[StrictInt] = Field(default=None, description="Group id")
    groupmode: Optional[StrictInt] = Field(default=None, description="Group mode")
    hasfeedback: Optional[StrictInt] = Field(default=null, description="Whether the quiz has any non-blank feedback text")
    hasquestions: Optional[StrictInt] = Field(default=null, description="Whether the quiz has questions")
    id: Optional[StrictInt] = Field(default=None, description="Activity instance id")
    intro: Optional[StrictStr] = Field(default=None, description="Activity introduction")
    introfiles: Optional[List[CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner]] = None
    introformat: Optional[StrictInt] = Field(default=None, description="intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    lang: Optional[StrictStr] = Field(default=None, description="Forced activity language")
    name: Optional[StrictStr] = Field(default=None, description="Activity name")
    navmethod: Optional[StrictStr] = Field(default='null', description="Any constraints on how the user is allowed to navigate                                                                 around the quiz. Currently recognised values are                                                                 'free' and 'seq'.")
    overduehandling: Optional[StrictStr] = Field(default='null', description="The method used to handle overdue attempts.                                                                     'autosubmit', 'graceperiod' or 'autoabandon'.")
    password: Optional[StrictStr] = Field(default='null', description="A password that the student must enter before starting or                                                                 continuing a quiz attempt.")
    preferredbehaviour: Optional[StrictStr] = Field(default='null', description="The behaviour to ask questions to use.")
    questiondecimalpoints: Optional[StrictInt] = Field(default=null, description="Number of decimal points to use when                                                                             displaying question grades.                                                                             (-1 means use decimalpoints.)")
    questionsperpage: Optional[StrictInt] = Field(default=null, description="How often to insert a page break when editing                                                                         the quiz, or when shuffling the question order.")
    reviewattempt: Optional[StrictInt] = Field(default=null, description="Whether users are allowed to review their quiz                                                                     attempts at various times. This is a bit field, decoded by the                                                                     \\mod_quiz\\question\\display_options class. It is formed by ORing                                                                     together the constants defined there.")
    reviewcorrectness: Optional[StrictInt] = Field(default=null, description="Whether users are allowed to review their quiz                                                        attempts at various times.A bit field, like reviewattempt.")
    reviewgeneralfeedback: Optional[StrictInt] = Field(default=null, description="Whether users are allowed to review their                                                                             quiz attempts at various times. A bit field, like                                                                             reviewattempt.")
    reviewmarks: Optional[StrictInt] = Field(default=null, description="Whether users are allowed to review their quiz attempts                                                                 at various times. A bit field, like reviewattempt.")
    reviewmaxmarks: Optional[StrictInt] = Field(default=null, description="Whether users are allowed to review their quiz                                                   attempts at various times. A bit field, like reviewattempt.")
    reviewoverallfeedback: Optional[StrictInt] = Field(default=null, description="Whether users are allowed to review their quiz                                                                             attempts at various times. A bit field, like                                                                             reviewattempt.")
    reviewrightanswer: Optional[StrictInt] = Field(default=null, description="Whether users are allowed to review their quiz                                                                         attempts at various times. A bit field, like                                                                         reviewattempt.")
    reviewspecificfeedback: Optional[StrictInt] = Field(default=None, description="Whether users are allowed to review their                                                                             quiz attempts at various times. A bit field, like                                                                             reviewattempt.")
    section: Optional[StrictInt] = Field(default=None, description="Course section id")
    showblocks: Optional[StrictInt] = Field(default=null, description="Whether blocks should be shown on the attempt.php and                                                                 review.php pages.")
    showuserpicture: Optional[StrictInt] = Field(default=null, description="Option to show the user's picture during the                                                                     attempt and on the review page.")
    shuffleanswers: Optional[StrictInt] = Field(default=null, description="Whether the parts of the question should be shuffled,                                                                     in those question types that support it.")
    subnet: Optional[StrictStr] = Field(default='null', description="Used to restrict the IP addresses from which this quiz can                                                             be attempted. The format is as requried by the address_in_subnet                                                             function.")
    sumgrades: Optional[Union[StrictFloat, StrictInt]] = Field(default=null, description="The total of all the question instance maxmarks.")
    timeclose: Optional[StrictInt] = Field(default=null, description="The time when this quiz closes. (0 = no restriction.)")
    timecreated: Optional[StrictInt] = Field(default=null, description="The time when the quiz was added to the course.")
    timelimit: Optional[StrictInt] = Field(default=null, description="The time limit for quiz attempts, in seconds.")
    timemodified: Optional[StrictInt] = Field(default=None, description="Last modified time.")
    timeopen: Optional[StrictInt] = Field(default=null, description="The time when this quiz opens. (0 = no restriction.)")
    visible: Optional[StrictBool] = Field(default=None, description="Visible")
    __properties: ClassVar[List[str]] = ["allowofflineattempts", "attemptonlast", "attempts", "autosaveperiod", "browsersecurity", "canredoquestions", "completionattemptsexhausted", "completionpass", "course", "coursemodule", "decimalpoints", "delay1", "delay2", "graceperiod", "grade", "grademethod", "groupingid", "groupmode", "hasfeedback", "hasquestions", "id", "intro", "introfiles", "introformat", "lang", "name", "navmethod", "overduehandling", "password", "preferredbehaviour", "questiondecimalpoints", "questionsperpage", "reviewattempt", "reviewcorrectness", "reviewgeneralfeedback", "reviewmarks", "reviewmaxmarks", "reviewoverallfeedback", "reviewrightanswer", "reviewspecificfeedback", "section", "showblocks", "showuserpicture", "shuffleanswers", "subnet", "sumgrades", "timeclose", "timecreated", "timelimit", "timemodified", "timeopen", "visible"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModQuizGetQuizzesByCourses200ResponseQuizzesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in introfiles (list)
        _items = []
        if self.introfiles:
            for _item in self.introfiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['introfiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModQuizGetQuizzesByCourses200ResponseQuizzesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowofflineattempts": obj.get("allowofflineattempts") if obj.get("allowofflineattempts") is not None else null,
            "attemptonlast": obj.get("attemptonlast") if obj.get("attemptonlast") is not None else null,
            "attempts": obj.get("attempts") if obj.get("attempts") is not None else null,
            "autosaveperiod": obj.get("autosaveperiod") if obj.get("autosaveperiod") is not None else null,
            "browsersecurity": obj.get("browsersecurity") if obj.get("browsersecurity") is not None else 'null',
            "canredoquestions": obj.get("canredoquestions") if obj.get("canredoquestions") is not None else null,
            "completionattemptsexhausted": obj.get("completionattemptsexhausted") if obj.get("completionattemptsexhausted") is not None else null,
            "completionpass": obj.get("completionpass") if obj.get("completionpass") is not None else null,
            "course": obj.get("course"),
            "coursemodule": obj.get("coursemodule"),
            "decimalpoints": obj.get("decimalpoints") if obj.get("decimalpoints") is not None else null,
            "delay1": obj.get("delay1") if obj.get("delay1") is not None else null,
            "delay2": obj.get("delay2") if obj.get("delay2") is not None else null,
            "graceperiod": obj.get("graceperiod") if obj.get("graceperiod") is not None else null,
            "grade": obj.get("grade") if obj.get("grade") is not None else null,
            "grademethod": obj.get("grademethod") if obj.get("grademethod") is not None else null,
            "groupingid": obj.get("groupingid"),
            "groupmode": obj.get("groupmode"),
            "hasfeedback": obj.get("hasfeedback") if obj.get("hasfeedback") is not None else null,
            "hasquestions": obj.get("hasquestions") if obj.get("hasquestions") is not None else null,
            "id": obj.get("id"),
            "intro": obj.get("intro"),
            "introfiles": [CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner.from_dict(_item) for _item in obj["introfiles"]] if obj.get("introfiles") is not None else None,
            "introformat": obj.get("introformat"),
            "lang": obj.get("lang"),
            "name": obj.get("name"),
            "navmethod": obj.get("navmethod") if obj.get("navmethod") is not None else 'null',
            "overduehandling": obj.get("overduehandling") if obj.get("overduehandling") is not None else 'null',
            "password": obj.get("password") if obj.get("password") is not None else 'null',
            "preferredbehaviour": obj.get("preferredbehaviour") if obj.get("preferredbehaviour") is not None else 'null',
            "questiondecimalpoints": obj.get("questiondecimalpoints") if obj.get("questiondecimalpoints") is not None else null,
            "questionsperpage": obj.get("questionsperpage") if obj.get("questionsperpage") is not None else null,
            "reviewattempt": obj.get("reviewattempt") if obj.get("reviewattempt") is not None else null,
            "reviewcorrectness": obj.get("reviewcorrectness") if obj.get("reviewcorrectness") is not None else null,
            "reviewgeneralfeedback": obj.get("reviewgeneralfeedback") if obj.get("reviewgeneralfeedback") is not None else null,
            "reviewmarks": obj.get("reviewmarks") if obj.get("reviewmarks") is not None else null,
            "reviewmaxmarks": obj.get("reviewmaxmarks") if obj.get("reviewmaxmarks") is not None else null,
            "reviewoverallfeedback": obj.get("reviewoverallfeedback") if obj.get("reviewoverallfeedback") is not None else null,
            "reviewrightanswer": obj.get("reviewrightanswer") if obj.get("reviewrightanswer") is not None else null,
            "reviewspecificfeedback": obj.get("reviewspecificfeedback"),
            "section": obj.get("section"),
            "showblocks": obj.get("showblocks") if obj.get("showblocks") is not None else null,
            "showuserpicture": obj.get("showuserpicture") if obj.get("showuserpicture") is not None else null,
            "shuffleanswers": obj.get("shuffleanswers") if obj.get("shuffleanswers") is not None else null,
            "subnet": obj.get("subnet") if obj.get("subnet") is not None else 'null',
            "sumgrades": obj.get("sumgrades") if obj.get("sumgrades") is not None else null,
            "timeclose": obj.get("timeclose") if obj.get("timeclose") is not None else null,
            "timecreated": obj.get("timecreated") if obj.get("timecreated") is not None else null,
            "timelimit": obj.get("timelimit") if obj.get("timelimit") is not None else null,
            "timemodified": obj.get("timemodified"),
            "timeopen": obj.get("timeopen") if obj.get("timeopen") is not None else null,
            "visible": obj.get("visible")
        })
        return _obj


