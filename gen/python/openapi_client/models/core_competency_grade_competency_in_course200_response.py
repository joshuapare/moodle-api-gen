# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_competency_grade_competency200_response_actionuser import CoreCompetencyGradeCompetency200ResponseActionuser
from typing import Optional, Set
from typing_extensions import Self

class CoreCompetencyGradeCompetencyInCourse200Response(BaseModel):
    """
    CoreCompetencyGradeCompetencyInCourse200Response
    """ # noqa: E501
    action: StrictInt = Field(description="action")
    actionuser: Optional[CoreCompetencyGradeCompetency200ResponseActionuser] = None
    actionuserid: StrictInt = Field(description="actionuserid")
    candelete: StrictBool = Field(description="candelete")
    contextid: StrictInt = Field(description="contextid")
    desca: StrictStr = Field(description="desca")
    desccomponent: StrictStr = Field(description="desccomponent")
    descidentifier: StrictStr = Field(description="descidentifier")
    description: StrictStr = Field(description="description")
    grade: StrictInt = Field(description="grade")
    gradename: StrictStr = Field(description="gradename")
    id: StrictInt = Field(description="id")
    note: StrictStr = Field(description="note")
    timecreated: StrictInt = Field(description="timecreated")
    timemodified: StrictInt = Field(description="timemodified")
    url: StrictStr = Field(description="url")
    usercompetencyid: StrictInt = Field(description="usercompetencyid")
    userdate: StrictStr = Field(description="userdate")
    usermodified: StrictInt = Field(description="usermodified")
    __properties: ClassVar[List[str]] = ["action", "actionuser", "actionuserid", "candelete", "contextid", "desca", "desccomponent", "descidentifier", "description", "grade", "gradename", "id", "note", "timecreated", "timemodified", "url", "usercompetencyid", "userdate", "usermodified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreCompetencyGradeCompetencyInCourse200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of actionuser
        if self.actionuser:
            _dict['actionuser'] = self.actionuser.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreCompetencyGradeCompetencyInCourse200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "actionuser": CoreCompetencyGradeCompetency200ResponseActionuser.from_dict(obj["actionuser"]) if obj.get("actionuser") is not None else None,
            "actionuserid": obj.get("actionuserid"),
            "candelete": obj.get("candelete"),
            "contextid": obj.get("contextid"),
            "desca": obj.get("desca"),
            "desccomponent": obj.get("desccomponent"),
            "descidentifier": obj.get("descidentifier"),
            "description": obj.get("description"),
            "grade": obj.get("grade"),
            "gradename": obj.get("gradename"),
            "id": obj.get("id") if obj.get("id") is not None else 0,
            "note": obj.get("note"),
            "timecreated": obj.get("timecreated") if obj.get("timecreated") is not None else 0,
            "timemodified": obj.get("timemodified") if obj.get("timemodified") is not None else 0,
            "url": obj.get("url"),
            "usercompetencyid": obj.get("usercompetencyid"),
            "userdate": obj.get("userdate"),
            "usermodified": obj.get("usermodified") if obj.get("usermodified") is not None else 0
        })
        return _obj


