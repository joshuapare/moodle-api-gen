# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.core_competency_create_plan200_response_commentarea import CoreCompetencyCreatePlan200ResponseCommentarea
from openapi_client.models.core_competency_create_plan200_response_reviewer import CoreCompetencyCreatePlan200ResponseReviewer
from openapi_client.models.core_competency_create_plan200_response_template import CoreCompetencyCreatePlan200ResponseTemplate
from typing import Optional, Set
from typing_extensions import Self

class CoreCompetencyCreatePlan200Response(BaseModel):
    """
    CoreCompetencyCreatePlan200Response
    """ # noqa: E501
    canbeedited: StrictBool = Field(description="canbeedited")
    canmanage: StrictBool = Field(description="canmanage")
    canrequestreview: StrictBool = Field(description="canrequestreview")
    canreview: StrictBool = Field(description="canreview")
    commentarea: CoreCompetencyCreatePlan200ResponseCommentarea
    description: StrictStr = Field(description="description")
    descriptionformat: Optional[StrictInt] = Field(default=1, description="description format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)")
    duedate: StrictInt = Field(description="duedate")
    duedateformatted: StrictStr = Field(description="duedateformatted")
    id: StrictInt = Field(description="id")
    isactive: StrictBool = Field(description="isactive")
    isapproveallowed: StrictBool = Field(description="isapproveallowed")
    isbasedontemplate: StrictBool = Field(description="isbasedontemplate")
    iscancelreviewrequestallowed: StrictBool = Field(description="iscancelreviewrequestallowed")
    iscompleteallowed: StrictBool = Field(description="iscompleteallowed")
    iscompleted: StrictBool = Field(description="iscompleted")
    isdraft: StrictBool = Field(description="isdraft")
    isinreview: StrictBool = Field(description="isinreview")
    isreopenallowed: StrictBool = Field(description="isreopenallowed")
    isrequestreviewallowed: StrictBool = Field(description="isrequestreviewallowed")
    isstartreviewallowed: StrictBool = Field(description="isstartreviewallowed")
    isstopreviewallowed: StrictBool = Field(description="isstopreviewallowed")
    isunapproveallowed: StrictBool = Field(description="isunapproveallowed")
    isunlinkallowed: StrictBool = Field(description="isunlinkallowed")
    iswaitingforreview: StrictBool = Field(description="iswaitingforreview")
    name: StrictStr = Field(description="name")
    origtemplateid: StrictInt = Field(description="origtemplateid")
    reviewer: Optional[CoreCompetencyCreatePlan200ResponseReviewer] = None
    reviewerid: StrictInt = Field(description="reviewerid")
    status: StrictInt = Field(description="status")
    statusname: StrictStr = Field(description="statusname")
    template: Optional[CoreCompetencyCreatePlan200ResponseTemplate] = None
    templateid: StrictInt = Field(description="templateid")
    timecreated: StrictInt = Field(description="timecreated")
    timemodified: StrictInt = Field(description="timemodified")
    url: StrictStr = Field(description="url")
    userid: StrictInt = Field(description="userid")
    usermodified: StrictInt = Field(description="usermodified")
    __properties: ClassVar[List[str]] = ["canbeedited", "canmanage", "canrequestreview", "canreview", "commentarea", "description", "descriptionformat", "duedate", "duedateformatted", "id", "isactive", "isapproveallowed", "isbasedontemplate", "iscancelreviewrequestallowed", "iscompleteallowed", "iscompleted", "isdraft", "isinreview", "isreopenallowed", "isrequestreviewallowed", "isstartreviewallowed", "isstopreviewallowed", "isunapproveallowed", "isunlinkallowed", "iswaitingforreview", "name", "origtemplateid", "reviewer", "reviewerid", "status", "statusname", "template", "templateid", "timecreated", "timemodified", "url", "userid", "usermodified"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreCompetencyCreatePlan200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of commentarea
        if self.commentarea:
            _dict['commentarea'] = self.commentarea.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reviewer
        if self.reviewer:
            _dict['reviewer'] = self.reviewer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of template
        if self.template:
            _dict['template'] = self.template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreCompetencyCreatePlan200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "canbeedited": obj.get("canbeedited") if obj.get("canbeedited") is not None else False,
            "canmanage": obj.get("canmanage"),
            "canrequestreview": obj.get("canrequestreview") if obj.get("canrequestreview") is not None else False,
            "canreview": obj.get("canreview") if obj.get("canreview") is not None else False,
            "commentarea": CoreCompetencyCreatePlan200ResponseCommentarea.from_dict(obj["commentarea"]) if obj.get("commentarea") is not None else None,
            "description": obj.get("description") if obj.get("description") is not None else '',
            "descriptionformat": obj.get("descriptionformat") if obj.get("descriptionformat") is not None else 1,
            "duedate": obj.get("duedate") if obj.get("duedate") is not None else 0,
            "duedateformatted": obj.get("duedateformatted") if obj.get("duedateformatted") is not None else 'null',
            "id": obj.get("id") if obj.get("id") is not None else 0,
            "isactive": obj.get("isactive") if obj.get("isactive") is not None else False,
            "isapproveallowed": obj.get("isapproveallowed") if obj.get("isapproveallowed") is not None else False,
            "isbasedontemplate": obj.get("isbasedontemplate") if obj.get("isbasedontemplate") is not None else False,
            "iscancelreviewrequestallowed": obj.get("iscancelreviewrequestallowed") if obj.get("iscancelreviewrequestallowed") is not None else False,
            "iscompleteallowed": obj.get("iscompleteallowed") if obj.get("iscompleteallowed") is not None else False,
            "iscompleted": obj.get("iscompleted") if obj.get("iscompleted") is not None else False,
            "isdraft": obj.get("isdraft") if obj.get("isdraft") is not None else False,
            "isinreview": obj.get("isinreview") if obj.get("isinreview") is not None else False,
            "isreopenallowed": obj.get("isreopenallowed") if obj.get("isreopenallowed") is not None else False,
            "isrequestreviewallowed": obj.get("isrequestreviewallowed") if obj.get("isrequestreviewallowed") is not None else False,
            "isstartreviewallowed": obj.get("isstartreviewallowed") if obj.get("isstartreviewallowed") is not None else False,
            "isstopreviewallowed": obj.get("isstopreviewallowed") if obj.get("isstopreviewallowed") is not None else False,
            "isunapproveallowed": obj.get("isunapproveallowed") if obj.get("isunapproveallowed") is not None else False,
            "isunlinkallowed": obj.get("isunlinkallowed") if obj.get("isunlinkallowed") is not None else False,
            "iswaitingforreview": obj.get("iswaitingforreview") if obj.get("iswaitingforreview") is not None else False,
            "name": obj.get("name"),
            "origtemplateid": obj.get("origtemplateid"),
            "reviewer": CoreCompetencyCreatePlan200ResponseReviewer.from_dict(obj["reviewer"]) if obj.get("reviewer") is not None else None,
            "reviewerid": obj.get("reviewerid"),
            "status": obj.get("status") if obj.get("status") is not None else 0,
            "statusname": obj.get("statusname") if obj.get("statusname") is not None else 'null',
            "template": CoreCompetencyCreatePlan200ResponseTemplate.from_dict(obj["template"]) if obj.get("template") is not None else None,
            "templateid": obj.get("templateid"),
            "timecreated": obj.get("timecreated") if obj.get("timecreated") is not None else 0,
            "timemodified": obj.get("timemodified") if obj.get("timemodified") is not None else 0,
            "url": obj.get("url"),
            "userid": obj.get("userid"),
            "usermodified": obj.get("usermodified") if obj.get("usermodified") is not None else 0
        })
        return _obj


