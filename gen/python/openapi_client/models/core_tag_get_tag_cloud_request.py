# coding: utf-8

"""
    Moodle Webservice API

    Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.

    The version of the OpenAPI document: 4.3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CoreTagGetTagCloudRequest(BaseModel):
    """
    CoreTagGetTagCloudRequest
    """ # noqa: E501
    ctx: Optional[StrictInt] = Field(default=0, description="Only retrieve tag instances in this context.")
    fromctx: Optional[StrictInt] = Field(default=0, description="Context id where this tag cloud is displayed.")
    isstandard: Optional[StrictBool] = Field(default=False, description="Whether to return only standard tags.")
    limit: Optional[StrictInt] = Field(default=150, description="Maximum number of tags to retrieve.")
    rec: Optional[StrictInt] = Field(default=1, description="Retrieve tag instances in the $ctx context and it's children.")
    search: Optional[StrictStr] = Field(default='', description="Search string.")
    sort: Optional[StrictStr] = Field(default='name', description="Sort order for display                     (id, name, rawname, count, flag, isstandard, tagcollid).")
    tagcollid: Optional[StrictInt] = Field(default=0, description="Tag collection id.")
    __properties: ClassVar[List[str]] = ["ctx", "fromctx", "isstandard", "limit", "rec", "search", "sort", "tagcollid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CoreTagGetTagCloudRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CoreTagGetTagCloudRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ctx": obj.get("ctx") if obj.get("ctx") is not None else 0,
            "fromctx": obj.get("fromctx") if obj.get("fromctx") is not None else 0,
            "isstandard": obj.get("isstandard") if obj.get("isstandard") is not None else False,
            "limit": obj.get("limit") if obj.get("limit") is not None else 150,
            "rec": obj.get("rec") if obj.get("rec") is not None else 1,
            "search": obj.get("search") if obj.get("search") is not None else '',
            "sort": obj.get("sort") if obj.get("sort") is not None else 'name',
            "tagcollid": obj.get("tagcollid") if obj.get("tagcollid") is not None else 0
        })
        return _obj


