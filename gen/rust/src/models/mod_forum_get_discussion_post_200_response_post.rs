/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModForumGetDiscussionPost200ResponsePost {
    #[serde(rename = "attachments")]
    pub attachments: Vec<models::ModForumGetDiscussionPost200ResponsePostAttachmentsInner>,
    #[serde(rename = "author")]
    pub author: Box<models::ModForumGetDiscussionPost200ResponsePostAuthor>,
    #[serde(rename = "capabilities")]
    pub capabilities: Box<models::ModForumGetDiscussionPost200ResponsePostCapabilities>,
    /// charcount
    #[serde(rename = "charcount", skip_serializing_if = "Option::is_none")]
    pub charcount: Option<i32>,
    /// discussionid
    #[serde(rename = "discussionid")]
    pub discussionid: i32,
    /// hasparent
    #[serde(rename = "hasparent")]
    pub hasparent: bool,
    /// haswordcount
    #[serde(rename = "haswordcount")]
    pub haswordcount: bool,
    #[serde(rename = "html", skip_serializing_if = "Option::is_none")]
    pub html: Option<Box<models::ModForumGetDiscussionPost200ResponsePostHtml>>,
    /// id
    #[serde(rename = "id")]
    pub id: i32,
    /// isdeleted
    #[serde(rename = "isdeleted")]
    pub isdeleted: bool,
    /// isprivatereply
    #[serde(rename = "isprivatereply")]
    pub isprivatereply: bool,
    /// message
    #[serde(rename = "message")]
    pub message: String,
    /// message format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "messageformat")]
    pub messageformat: i32,
    #[serde(rename = "messageinlinefiles", skip_serializing_if = "Option::is_none")]
    pub messageinlinefiles: Option<Vec<models::ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner>>,
    /// parentid
    #[serde(rename = "parentid", skip_serializing_if = "Option::is_none")]
    pub parentid: Option<i32>,
    /// replysubject
    #[serde(rename = "replysubject")]
    pub replysubject: String,
    /// subject
    #[serde(rename = "subject")]
    pub subject: String,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<models::ModForumGetDiscussionPost200ResponsePostTagsInner>>,
    /// timecreated
    #[serde(rename = "timecreated")]
    pub timecreated: i32,
    /// timemodified
    #[serde(rename = "timemodified")]
    pub timemodified: i32,
    /// unread
    #[serde(rename = "unread", skip_serializing_if = "Option::is_none")]
    pub unread: Option<bool>,
    #[serde(rename = "urls", skip_serializing_if = "Option::is_none")]
    pub urls: Option<Box<models::ModForumGetDiscussionPost200ResponsePostUrls>>,
    /// wordcount
    #[serde(rename = "wordcount", skip_serializing_if = "Option::is_none")]
    pub wordcount: Option<i32>,
}

impl ModForumGetDiscussionPost200ResponsePost {
    pub fn new(attachments: Vec<models::ModForumGetDiscussionPost200ResponsePostAttachmentsInner>, author: models::ModForumGetDiscussionPost200ResponsePostAuthor, capabilities: models::ModForumGetDiscussionPost200ResponsePostCapabilities, discussionid: i32, hasparent: bool, haswordcount: bool, id: i32, isdeleted: bool, isprivatereply: bool, message: String, messageformat: i32, replysubject: String, subject: String, timecreated: i32, timemodified: i32) -> ModForumGetDiscussionPost200ResponsePost {
        ModForumGetDiscussionPost200ResponsePost {
            attachments,
            author: Box::new(author),
            capabilities: Box::new(capabilities),
            charcount: None,
            discussionid,
            hasparent,
            haswordcount,
            html: None,
            id,
            isdeleted,
            isprivatereply,
            message,
            messageformat,
            messageinlinefiles: None,
            parentid: None,
            replysubject,
            subject,
            tags: None,
            timecreated,
            timemodified,
            unread: None,
            urls: None,
            wordcount: None,
        }
    }
}

