/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ToolLpDataForCompetenciesManagePage200Response {
    /// True if this user has permission to manage competency frameworks
    #[serde(rename = "canmanage")]
    pub canmanage: bool,
    #[serde(rename = "framework")]
    pub framework: Box<models::CoreCompetencyDuplicateCompetencyFramework200Response>,
    /// Context id for the framework
    #[serde(rename = "pagecontextid")]
    pub pagecontextid: i32,
    /// Plugin base url
    #[serde(rename = "pluginbaseurl")]
    pub pluginbaseurl: String,
    /// JSON encoded data for rules
    #[serde(rename = "rulesmodules")]
    pub rulesmodules: String,
    /// Current search string
    #[serde(rename = "search")]
    pub search: String,
}

impl ToolLpDataForCompetenciesManagePage200Response {
    pub fn new(canmanage: bool, framework: models::CoreCompetencyDuplicateCompetencyFramework200Response, pagecontextid: i32, pluginbaseurl: String, rulesmodules: String, search: String) -> ToolLpDataForCompetenciesManagePage200Response {
        ToolLpDataForCompetenciesManagePage200Response {
            canmanage,
            framework: Box::new(framework),
            pagecontextid,
            pluginbaseurl,
            rulesmodules,
            search,
        }
    }
}

