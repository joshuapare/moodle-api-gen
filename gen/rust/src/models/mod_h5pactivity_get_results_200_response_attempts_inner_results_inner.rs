/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// ModH5pactivityGetResults200ResponseAttemptsInnerResultsInner : A single result statement tracking information
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModH5pactivityGetResults200ResponseAttemptsInnerResultsInner {
    /// Label used for user answers
    #[serde(rename = "answerlabel", skip_serializing_if = "Option::is_none")]
    pub answerlabel: Option<String>,
    /// ID of the H5P attempt
    #[serde(rename = "attemptid", skip_serializing_if = "Option::is_none")]
    pub attemptid: Option<i32>,
    /// Result completion
    #[serde(rename = "completion", skip_serializing_if = "Option::is_none")]
    pub completion: Option<i32>,
    /// Result extra content
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// Label used for correct answers
    #[serde(rename = "correctlabel", skip_serializing_if = "Option::is_none")]
    pub correctlabel: Option<String>,
    /// Result description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Result duration in seconds
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    /// ID of the context
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Interaction type
    #[serde(rename = "interactiontype", skip_serializing_if = "Option::is_none")]
    pub interactiontype: Option<String>,
    /// Result max score
    #[serde(rename = "maxscore", skip_serializing_if = "Option::is_none")]
    pub maxscore: Option<i32>,
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<Vec<models::ModH5pactivityGetResults200ResponseAttemptsInnerResultsInnerOptionsInner>>,
    /// Label used for result options
    #[serde(rename = "optionslabel", skip_serializing_if = "Option::is_none")]
    pub optionslabel: Option<String>,
    /// Result score value
    #[serde(rename = "rawscore", skip_serializing_if = "Option::is_none")]
    pub rawscore: Option<i32>,
    /// Subcontent identifier
    #[serde(rename = "subcontent", skip_serializing_if = "Option::is_none")]
    pub subcontent: Option<String>,
    /// Result success
    #[serde(rename = "success", skip_serializing_if = "Option::is_none")]
    pub success: Option<i32>,
    /// Result creation
    #[serde(rename = "timecreated", skip_serializing_if = "Option::is_none")]
    pub timecreated: Option<i32>,
    /// If the result has valid track information
    #[serde(rename = "track", skip_serializing_if = "Option::is_none")]
    pub track: Option<bool>,
}

impl ModH5pactivityGetResults200ResponseAttemptsInnerResultsInner {
    /// A single result statement tracking information
    pub fn new() -> ModH5pactivityGetResults200ResponseAttemptsInnerResultsInner {
        ModH5pactivityGetResults200ResponseAttemptsInnerResultsInner {
            answerlabel: None,
            attemptid: None,
            completion: None,
            content: None,
            correctlabel: None,
            description: None,
            duration: None,
            id: None,
            interactiontype: None,
            maxscore: None,
            options: None,
            optionslabel: None,
            rawscore: None,
            subcontent: None,
            success: None,
            timecreated: None,
            track: None,
        }
    }
}

