/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModFeedbackGetItems200ResponseItemsInner {
    /// The item id this item depend on.
    #[serde(rename = "dependitem", skip_serializing_if = "Option::is_none")]
    pub dependitem: Option<i32>,
    /// The depend value.
    #[serde(rename = "dependvalue", skip_serializing_if = "Option::is_none")]
    pub dependvalue: Option<String>,
    /// The feedback instance id this records belongs to.
    #[serde(rename = "feedback", skip_serializing_if = "Option::is_none")]
    pub feedback: Option<i32>,
    /// Whether it has a value or not.
    #[serde(rename = "hasvalue", skip_serializing_if = "Option::is_none")]
    pub hasvalue: Option<i32>,
    /// The record id.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "itemfiles", skip_serializing_if = "Option::is_none")]
    pub itemfiles: Option<Vec<models::ModFeedbackGetAnalysis200ResponseItemsdataInnerItemItemfilesInner>>,
    /// The item position number
    #[serde(rename = "itemnumber", skip_serializing_if = "Option::is_none")]
    pub itemnumber: Option<i32>,
    /// The item label.
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// The item name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Different additional settings for the item (question).
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<String>,
    /// Additional data that may be required by external functions
    #[serde(rename = "otherdata", skip_serializing_if = "Option::is_none")]
    pub otherdata: Option<String>,
    /// The position in the list of questions.
    #[serde(rename = "position", skip_serializing_if = "Option::is_none")]
    pub position: Option<i32>,
    /// The text describing the item or the available possible answers.
    #[serde(rename = "presentation", skip_serializing_if = "Option::is_none")]
    pub presentation: Option<String>,
    /// Whether is a item (question) required or not.
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    /// If it belogns to a template, the template id.
    #[serde(rename = "template", skip_serializing_if = "Option::is_none")]
    pub template: Option<i32>,
    /// The type of the item.
    #[serde(rename = "typ", skip_serializing_if = "Option::is_none")]
    pub typ: Option<String>,
}

impl ModFeedbackGetItems200ResponseItemsInner {
    pub fn new() -> ModFeedbackGetItems200ResponseItemsInner {
        ModFeedbackGetItems200ResponseItemsInner {
            dependitem: None,
            dependvalue: None,
            feedback: None,
            hasvalue: None,
            id: None,
            itemfiles: None,
            itemnumber: None,
            label: None,
            name: None,
            options: None,
            otherdata: None,
            position: None,
            presentation: None,
            required: None,
            template: None,
            typ: None,
        }
    }
}

