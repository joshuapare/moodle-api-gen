/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreUpdateInplaceEditable200Response {
    /// component responsible for the update
    #[serde(rename = "component", skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    /// display value (may contain link or other html tags)
    #[serde(rename = "displayvalue")]
    pub displayvalue: String,
    /// hint for editing element
    #[serde(rename = "edithint", skip_serializing_if = "Option::is_none")]
    pub edithint: Option<String>,
    #[serde(rename = "editicon", skip_serializing_if = "Option::is_none")]
    pub editicon: Option<Box<models::CoreUpdateInplaceEditable200ResponseEditicon>>,
    /// label for editing element
    #[serde(rename = "editlabel", skip_serializing_if = "Option::is_none")]
    pub editlabel: Option<String>,
    /// identifier of the updated item
    #[serde(rename = "itemid", skip_serializing_if = "Option::is_none")]
    pub itemid: Option<String>,
    /// itemtype
    #[serde(rename = "itemtype", skip_serializing_if = "Option::is_none")]
    pub itemtype: Option<String>,
    /// Should everything be wrapped in the edit link or link displayed separately
    #[serde(rename = "linkeverything", skip_serializing_if = "Option::is_none")]
    pub linkeverything: Option<i32>,
    /// options of the element, format depends on type
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<String>,
    /// type of the element (text, toggle, select)
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// value of the item as it is stored
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

impl CoreUpdateInplaceEditable200Response {
    pub fn new(displayvalue: String) -> CoreUpdateInplaceEditable200Response {
        CoreUpdateInplaceEditable200Response {
            component: None,
            displayvalue,
            edithint: None,
            editicon: None,
            editlabel: None,
            itemid: None,
            itemtype: None,
            linkeverything: None,
            options: None,
            r#type: None,
            value: None,
        }
    }
}

