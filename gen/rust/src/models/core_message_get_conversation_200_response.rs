/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreMessageGetConversation200Response {
    /// If the user can delete messages in the conversation for all users
    #[serde(rename = "candeletemessagesforallusers", skip_serializing_if = "Option::is_none")]
    pub candeletemessagesforallusers: Option<bool>,
    /// The conversation id
    #[serde(rename = "id")]
    pub id: i32,
    /// A link to the conversation picture, if set
    #[serde(rename = "imageurl", skip_serializing_if = "Option::is_none")]
    pub imageurl: Option<String>,
    /// If the user marked this conversation as a favourite
    #[serde(rename = "isfavourite")]
    pub isfavourite: bool,
    /// If the user muted this conversation
    #[serde(rename = "ismuted")]
    pub ismuted: bool,
    /// If the user has read all messages in the conversation
    #[serde(rename = "isread")]
    pub isread: bool,
    /// Total number of conversation members
    #[serde(rename = "membercount")]
    pub membercount: i32,
    #[serde(rename = "members")]
    pub members: Vec<models::CoreMessageGetConversation200ResponseMembersInner>,
    #[serde(rename = "messages")]
    pub messages: Vec<models::CoreMessageGetConversation200ResponseMessagesInner>,
    /// The conversation name, if set
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A subtitle for the conversation name, if set
    #[serde(rename = "subname", skip_serializing_if = "Option::is_none")]
    pub subname: Option<String>,
    /// The type of the conversation (1=individual,2=group,3=self)
    #[serde(rename = "type")]
    pub r#type: i32,
    /// The number of unread messages in this conversation
    #[serde(rename = "unreadcount", skip_serializing_if = "Option::is_none")]
    pub unreadcount: Option<i32>,
}

impl CoreMessageGetConversation200Response {
    pub fn new(id: i32, isfavourite: bool, ismuted: bool, isread: bool, membercount: i32, members: Vec<models::CoreMessageGetConversation200ResponseMembersInner>, messages: Vec<models::CoreMessageGetConversation200ResponseMessagesInner>, r#type: i32) -> CoreMessageGetConversation200Response {
        CoreMessageGetConversation200Response {
            candeletemessagesforallusers: None,
            id,
            imageurl: None,
            isfavourite,
            ismuted,
            isread,
            membercount,
            members,
            messages,
            name: None,
            subname: None,
            r#type,
            unreadcount: None,
        }
    }
}

