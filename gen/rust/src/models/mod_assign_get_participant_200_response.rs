/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModAssignGetParticipant200Response {
    /// allowsubmissionsfromdate for the user
    #[serde(rename = "allowsubmissionsfromdate")]
    pub allowsubmissionsfromdate: i32,
    /// is blind marking enabled for this assignment
    #[serde(rename = "blindmarking")]
    pub blindmarking: bool,
    /// cutoffdate for the user
    #[serde(rename = "cutoffdate")]
    pub cutoffdate: i32,
    /// duedate for the user
    #[serde(rename = "duedate")]
    pub duedate: i32,
    /// duedate for the user
    #[serde(rename = "duedatestr")]
    pub duedatestr: String,
    /// The fullname of the user
    #[serde(rename = "fullname")]
    pub fullname: String,
    /// have they been granted an extension
    #[serde(rename = "grantedextension")]
    pub grantedextension: bool,
    /// for group assignments this is the group id
    #[serde(rename = "groupid", skip_serializing_if = "Option::is_none")]
    pub groupid: Option<i32>,
    /// for group assignments this is the group name
    #[serde(rename = "groupname", skip_serializing_if = "Option::is_none")]
    pub groupname: Option<String>,
    /// ID of the user
    #[serde(rename = "id")]
    pub id: i32,
    /// is their submission waiting for grading
    #[serde(rename = "requiregrading")]
    pub requiregrading: bool,
    /// The submission status (new, draft, reopened or submitted).                 Empty when not submitted.
    #[serde(rename = "submissionstatus", skip_serializing_if = "Option::is_none")]
    pub submissionstatus: Option<String>,
    /// have they submitted their assignment
    #[serde(rename = "submitted")]
    pub submitted: bool,
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<models::ModAssignGetParticipant200ResponseUser>>,
}

impl ModAssignGetParticipant200Response {
    pub fn new(allowsubmissionsfromdate: i32, blindmarking: bool, cutoffdate: i32, duedate: i32, duedatestr: String, fullname: String, grantedextension: bool, id: i32, requiregrading: bool, submitted: bool) -> ModAssignGetParticipant200Response {
        ModAssignGetParticipant200Response {
            allowsubmissionsfromdate,
            blindmarking,
            cutoffdate,
            duedate,
            duedatestr,
            fullname,
            grantedextension,
            groupid: None,
            groupname: None,
            id,
            requiregrading,
            submissionstatus: None,
            submitted,
            user: None,
        }
    }
}

