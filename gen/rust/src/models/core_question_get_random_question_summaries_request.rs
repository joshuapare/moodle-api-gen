/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreQuestionGetRandomQuestionSummariesRequest {
    /// Category id to find random questions
    #[serde(rename = "categoryid")]
    pub categoryid: i32,
    /// Context id that the questions will be rendered in (used for exporting)
    #[serde(rename = "contextid")]
    pub contextid: i32,
    /// Include the subcategories in the search
    #[serde(rename = "includesubcategories")]
    pub includesubcategories: bool,
    /// Maximum number of results to return
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    /// Number of items to skip from the begging of the result set
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<i32>,
    #[serde(rename = "tagids")]
    pub tagids: Vec<serde_json::Value>,
}

impl CoreQuestionGetRandomQuestionSummariesRequest {
    pub fn new(categoryid: i32, contextid: i32, includesubcategories: bool, tagids: Vec<serde_json::Value>) -> CoreQuestionGetRandomQuestionSummariesRequest {
        CoreQuestionGetRandomQuestionSummariesRequest {
            categoryid,
            contextid,
            includesubcategories,
            limit: None,
            offset: None,
            tagids,
        }
    }
}

