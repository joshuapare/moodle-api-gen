/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// BlockIomadCompanyAdminCreateLicensesRequestLicensesInner : one or many licenses
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlockIomadCompanyAdminCreateLicensesRequestLicensesInner {
    /// Number of license slots
    #[serde(rename = "allocation", skip_serializing_if = "Option::is_none")]
    pub allocation: Option<i32>,
    /// Clear license assignments on expire - 0 = no, 1 = yes
    #[serde(rename = "clearonexpire", skip_serializing_if = "Option::is_none")]
    pub clearonexpire: Option<i32>,
    /// Company id
    #[serde(rename = "companyid", skip_serializing_if = "Option::is_none")]
    pub companyid: Option<i32>,
    #[serde(rename = "courses", skip_serializing_if = "Option::is_none")]
    pub courses: Option<Vec<models::BlockIomadCompanyAdminCreateLicensesRequestLicensesInnerCoursesInner>>,
    /// License cut off date (int = timestamp)
    #[serde(rename = "cutoffdate", skip_serializing_if = "Option::is_none")]
    pub cutoffdate: Option<i32>,
    /// License expiry date (int = timestamp)
    #[serde(rename = "expirydate", skip_serializing_if = "Option::is_none")]
    pub expirydate: Option<i32>,
    /// Instant access - 0 = no, 1 = yes
    #[serde(rename = "instant", skip_serializing_if = "Option::is_none")]
    pub instant: Option<i32>,
    /// License name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Parent license id
    #[serde(rename = "parentid", skip_serializing_if = "Option::is_none")]
    pub parentid: Option<i32>,
    /// Program pf courses 0 = no, 1 = yes
    #[serde(rename = "program", skip_serializing_if = "Option::is_none")]
    pub program: Option<i32>,
    /// License reference
    #[serde(rename = "reference", skip_serializing_if = "Option::is_none")]
    pub reference: Option<String>,
    /// Date from which the liucense is available (int = timestamp) 
    #[serde(rename = "startdate", skip_serializing_if = "Option::is_none")]
    pub startdate: Option<i32>,
    /// License type - 0 = standard, 1 = reusable, 2 = standard educator, 3 = reusable educator
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<i32>,
    /// Number how often the lic can be allocated
    #[serde(rename = "used", skip_serializing_if = "Option::is_none")]
    pub used: Option<i32>,
    /// Course access length (days)
    #[serde(rename = "validlength", skip_serializing_if = "Option::is_none")]
    pub validlength: Option<i32>,
}

impl BlockIomadCompanyAdminCreateLicensesRequestLicensesInner {
    /// one or many licenses
    pub fn new() -> BlockIomadCompanyAdminCreateLicensesRequestLicensesInner {
        BlockIomadCompanyAdminCreateLicensesRequestLicensesInner {
            allocation: None,
            clearonexpire: None,
            companyid: None,
            courses: None,
            cutoffdate: None,
            expirydate: None,
            instant: None,
            name: None,
            parentid: None,
            program: None,
            reference: None,
            startdate: None,
            r#type: None,
            used: None,
            validlength: None,
        }
    }
}

