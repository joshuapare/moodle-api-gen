/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner {
    /// 0 = will be closed manually, greater than 0 the timestamp of the end of the assessment phase.
    #[serde(rename = "assessmentend", skip_serializing_if = "Option::is_none")]
    pub assessmentend: Option<i32>,
    /// 0 = will be started manually, greater than 0 the timestamp of the start of the assessment phase.
    #[serde(rename = "assessmentstart", skip_serializing_if = "Option::is_none")]
    pub assessmentstart: Option<i32>,
    /// A text to be displayed at the end of the workshop.
    #[serde(rename = "conclusion", skip_serializing_if = "Option::is_none")]
    pub conclusion: Option<String>,
    #[serde(rename = "conclusionfiles", skip_serializing_if = "Option::is_none")]
    pub conclusionfiles: Option<Vec<models::CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>>,
    /// conclusion format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "conclusionformat", skip_serializing_if = "Option::is_none")]
    pub conclusionformat: Option<i32>,
    /// Course id this workshop is part of.
    #[serde(rename = "course", skip_serializing_if = "Option::is_none")]
    pub course: Option<i32>,
    /// coursemodule
    #[serde(rename = "coursemodule", skip_serializing_if = "Option::is_none")]
    pub coursemodule: Option<i32>,
    /// The recently used grading evaluation method.
    #[serde(rename = "evaluation", skip_serializing_if = "Option::is_none")]
    pub evaluation: Option<String>,
    /// 0 = example assessments are voluntary, 1 = examples must be assessed before submission,                     2 = examples are available after own submission and must be assessed before peer/self assessment phase.
    #[serde(rename = "examplesmode", skip_serializing_if = "Option::is_none")]
    pub examplesmode: Option<i32>,
    /// The maximum grade for submission.
    #[serde(rename = "grade", skip_serializing_if = "Option::is_none")]
    pub grade: Option<f64>,
    /// Number of digits that should be shown after the decimal point when displaying grades.
    #[serde(rename = "gradedecimals", skip_serializing_if = "Option::is_none")]
    pub gradedecimals: Option<i32>,
    /// The maximum grade for assessment.
    #[serde(rename = "gradinggrade", skip_serializing_if = "Option::is_none")]
    pub gradinggrade: Option<f64>,
    /// The primary key of the record.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Instructions for the submission phase.
    #[serde(rename = "instructauthors", skip_serializing_if = "Option::is_none")]
    pub instructauthors: Option<String>,
    #[serde(rename = "instructauthorsfiles", skip_serializing_if = "Option::is_none")]
    pub instructauthorsfiles: Option<Vec<models::CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>>,
    /// instructauthors format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "instructauthorsformat", skip_serializing_if = "Option::is_none")]
    pub instructauthorsformat: Option<i32>,
    /// Instructions for the assessment phase.
    #[serde(rename = "instructreviewers", skip_serializing_if = "Option::is_none")]
    pub instructreviewers: Option<String>,
    #[serde(rename = "instructreviewersfiles", skip_serializing_if = "Option::is_none")]
    pub instructreviewersfiles: Option<Vec<models::CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>>,
    /// instructreviewers format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "instructreviewersformat", skip_serializing_if = "Option::is_none")]
    pub instructreviewersformat: Option<i32>,
    /// Workshop introduction text.
    #[serde(rename = "intro", skip_serializing_if = "Option::is_none")]
    pub intro: Option<String>,
    #[serde(rename = "introfiles", skip_serializing_if = "Option::is_none")]
    pub introfiles: Option<Vec<models::CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>>,
    /// intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "introformat", skip_serializing_if = "Option::is_none")]
    pub introformat: Option<i32>,
    /// Forced activity language
    #[serde(rename = "lang", skip_serializing_if = "Option::is_none")]
    pub lang: Option<String>,
    /// Allow submitting the work after the deadline.
    #[serde(rename = "latesubmissions", skip_serializing_if = "Option::is_none")]
    pub latesubmissions: Option<bool>,
    /// Maximum size of the one attached file.
    #[serde(rename = "maxbytes", skip_serializing_if = "Option::is_none")]
    pub maxbytes: Option<i32>,
    /// Workshop name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Maximum number of submission attachments.
    #[serde(rename = "nattachments", skip_serializing_if = "Option::is_none")]
    pub nattachments: Option<i32>,
    /// Number of allowed attachments to the overall feedback.
    #[serde(rename = "overallfeedbackfiles", skip_serializing_if = "Option::is_none")]
    pub overallfeedbackfiles: Option<i32>,
    /// Comma separated list of file extensions.
    #[serde(rename = "overallfeedbackfiletypes", skip_serializing_if = "Option::is_none")]
    pub overallfeedbackfiletypes: Option<String>,
    /// Maximum size of one file attached to the overall feedback.
    #[serde(rename = "overallfeedbackmaxbytes", skip_serializing_if = "Option::is_none")]
    pub overallfeedbackmaxbytes: Option<i32>,
    /// Mode of the overall feedback support.
    #[serde(rename = "overallfeedbackmode", skip_serializing_if = "Option::is_none")]
    pub overallfeedbackmode: Option<i32>,
    /// The current phase of workshop (0 = not available, 1 = submission, 2 = assessment, 3 = closed).
    #[serde(rename = "phase", skip_serializing_if = "Option::is_none")]
    pub phase: Option<i32>,
    /// Automatically switch to the assessment phase after the submissions deadline.
    #[serde(rename = "phaseswitchassessment", skip_serializing_if = "Option::is_none")]
    pub phaseswitchassessment: Option<bool>,
    /// The type of the current grading strategy used in this workshop.
    #[serde(rename = "strategy", skip_serializing_if = "Option::is_none")]
    pub strategy: Option<String>,
    /// 0 = will be closed manually, greater than 0 the timestamp of the end of the submission phase.
    #[serde(rename = "submissionend", skip_serializing_if = "Option::is_none")]
    pub submissionend: Option<i32>,
    /// Comma separated list of file extensions.
    #[serde(rename = "submissionfiletypes", skip_serializing_if = "Option::is_none")]
    pub submissionfiletypes: Option<String>,
    /// 0 = will be started manually, greater than 0 the timestamp of the start of the submission phase.
    #[serde(rename = "submissionstart", skip_serializing_if = "Option::is_none")]
    pub submissionstart: Option<i32>,
    /// Indicates whether a file upload is required as part of each submission. 0 for no, 1 for optional, 2 for required.
    #[serde(rename = "submissiontypefile", skip_serializing_if = "Option::is_none")]
    pub submissiontypefile: Option<i32>,
    /// Indicates whether text is required as part of each submission. 0 for no, 1 for optional, 2 for required.
    #[serde(rename = "submissiontypetext", skip_serializing_if = "Option::is_none")]
    pub submissiontypetext: Option<i32>,
    /// The timestamp when the module was modified.
    #[serde(rename = "timemodified", skip_serializing_if = "Option::is_none")]
    pub timemodified: Option<i32>,
    /// Optional feature: students practise evaluating on example submissions from teacher.
    #[serde(rename = "useexamples", skip_serializing_if = "Option::is_none")]
    pub useexamples: Option<bool>,
    /// Optional feature: students perform peer assessment of others' work.
    #[serde(rename = "usepeerassessment", skip_serializing_if = "Option::is_none")]
    pub usepeerassessment: Option<bool>,
    /// Optional feature: students perform self assessment of their own work.
    #[serde(rename = "useselfassessment", skip_serializing_if = "Option::is_none")]
    pub useselfassessment: Option<bool>,
}

impl ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner {
    pub fn new() -> ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner {
        ModWorkshopGetWorkshopsByCourses200ResponseWorkshopsInner {
            assessmentend: None,
            assessmentstart: None,
            conclusion: None,
            conclusionfiles: None,
            conclusionformat: None,
            course: None,
            coursemodule: None,
            evaluation: None,
            examplesmode: None,
            grade: None,
            gradedecimals: None,
            gradinggrade: None,
            id: None,
            instructauthors: None,
            instructauthorsfiles: None,
            instructauthorsformat: None,
            instructreviewers: None,
            instructreviewersfiles: None,
            instructreviewersformat: None,
            intro: None,
            introfiles: None,
            introformat: None,
            lang: None,
            latesubmissions: None,
            maxbytes: None,
            name: None,
            nattachments: None,
            overallfeedbackfiles: None,
            overallfeedbackfiletypes: None,
            overallfeedbackmaxbytes: None,
            overallfeedbackmode: None,
            phase: None,
            phaseswitchassessment: None,
            strategy: None,
            submissionend: None,
            submissionfiletypes: None,
            submissionstart: None,
            submissiontypefile: None,
            submissiontypetext: None,
            timemodified: None,
            useexamples: None,
            usepeerassessment: None,
            useselfassessment: None,
        }
    }
}

