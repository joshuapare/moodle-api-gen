/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModAssignGetSubmissionStatus200ResponseLastattempt {
    /// Whether blind marking is enabled.
    #[serde(rename = "blindmarking")]
    pub blindmarking: bool,
    /// Whether the user can edit the current submission.
    #[serde(rename = "canedit")]
    pub canedit: bool,
    /// Whether the owner of the submission can edit it.
    #[serde(rename = "caneditowner")]
    pub caneditowner: bool,
    /// Whether the user can submit.
    #[serde(rename = "cansubmit")]
    pub cansubmit: bool,
    /// Extension due date.
    #[serde(rename = "extensionduedate")]
    pub extensionduedate: i32,
    /// Whether the submission is graded.
    #[serde(rename = "graded")]
    pub graded: bool,
    /// Grading status.
    #[serde(rename = "gradingstatus")]
    pub gradingstatus: String,
    /// Whether new submissions are locked.
    #[serde(rename = "locked")]
    pub locked: bool,
    #[serde(rename = "submission", skip_serializing_if = "Option::is_none")]
    pub submission: Option<Box<models::ModAssignGetSubmissionStatus200ResponseLastattemptSubmission>>,
    /// The submission group id (for group submissions only).
    #[serde(rename = "submissiongroup", skip_serializing_if = "Option::is_none")]
    pub submissiongroup: Option<i32>,
    #[serde(rename = "submissiongroupmemberswhoneedtosubmit", skip_serializing_if = "Option::is_none")]
    pub submissiongroupmemberswhoneedtosubmit: Option<Vec<serde_json::Value>>,
    /// Whether submissions are enabled or not.
    #[serde(rename = "submissionsenabled")]
    pub submissionsenabled: bool,
    #[serde(rename = "teamsubmission", skip_serializing_if = "Option::is_none")]
    pub teamsubmission: Option<Box<models::ModAssignGetSubmissionStatus200ResponseLastattemptTeamsubmission>>,
    /// Time limit for submission.
    #[serde(rename = "timelimit", skip_serializing_if = "Option::is_none")]
    pub timelimit: Option<i32>,
    #[serde(rename = "usergroups")]
    pub usergroups: Vec<serde_json::Value>,
}

impl ModAssignGetSubmissionStatus200ResponseLastattempt {
    pub fn new(blindmarking: bool, canedit: bool, caneditowner: bool, cansubmit: bool, extensionduedate: i32, graded: bool, gradingstatus: String, locked: bool, submissionsenabled: bool, usergroups: Vec<serde_json::Value>) -> ModAssignGetSubmissionStatus200ResponseLastattempt {
        ModAssignGetSubmissionStatus200ResponseLastattempt {
            blindmarking,
            canedit,
            caneditowner,
            cansubmit,
            extensionduedate,
            graded,
            gradingstatus,
            locked,
            submission: None,
            submissiongroup: None,
            submissiongroupmemberswhoneedtosubmit: None,
            submissionsenabled,
            teamsubmission: None,
            timelimit: None,
            usergroups,
        }
    }
}

