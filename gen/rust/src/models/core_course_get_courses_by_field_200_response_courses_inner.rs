/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreCourseGetCoursesByField200ResponseCoursesInner {
    /// Cache revision number
    #[serde(rename = "cacherev", skip_serializing_if = "Option::is_none")]
    pub cacherev: Option<i32>,
    /// Calendar type
    #[serde(rename = "calendartype", skip_serializing_if = "Option::is_none")]
    pub calendartype: Option<String>,
    /// category id
    #[serde(rename = "categoryid", skip_serializing_if = "Option::is_none")]
    pub categoryid: Option<i32>,
    /// category name
    #[serde(rename = "categoryname", skip_serializing_if = "Option::is_none")]
    pub categoryname: Option<String>,
    /// 1: yes 0: no
    #[serde(rename = "completionnotify", skip_serializing_if = "Option::is_none")]
    pub completionnotify: Option<i32>,
    #[serde(rename = "contacts", skip_serializing_if = "Option::is_none")]
    pub contacts: Option<Vec<models::CoreCourseGetCoursesByField200ResponseCoursesInnerContactsInner>>,
    #[serde(rename = "courseformatoptions", skip_serializing_if = "Option::is_none")]
    pub courseformatoptions: Option<Vec<models::CoreCourseGetCoursesByField200ResponseCoursesInnerCourseformatoptionsInner>>,
    /// Course image
    #[serde(rename = "courseimage", skip_serializing_if = "Option::is_none")]
    pub courseimage: Option<String>,
    #[serde(rename = "customfields", skip_serializing_if = "Option::is_none")]
    pub customfields: Option<Vec<models::CoreCourseGetCoursesByField200ResponseCoursesInnerCustomfieldsInner>>,
    /// default grouping id
    #[serde(rename = "defaultgroupingid", skip_serializing_if = "Option::is_none")]
    pub defaultgroupingid: Option<i32>,
    /// course display name
    #[serde(rename = "displayname", skip_serializing_if = "Option::is_none")]
    pub displayname: Option<String>,
    /// Completion enabled? 1: yes 0: no
    #[serde(rename = "enablecompletion", skip_serializing_if = "Option::is_none")]
    pub enablecompletion: Option<i32>,
    /// Timestamp when the course end
    #[serde(rename = "enddate", skip_serializing_if = "Option::is_none")]
    pub enddate: Option<i32>,
    #[serde(rename = "enrollmentmethods", skip_serializing_if = "Option::is_none")]
    pub enrollmentmethods: Option<Vec<serde_json::Value>>,
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<models::CoreCourseGetCoursesByField200ResponseCoursesInnerFiltersInner>>,
    /// Course format: weeks, topics, social, site,..
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// course full name
    #[serde(rename = "fullname", skip_serializing_if = "Option::is_none")]
    pub fullname: Option<String>,
    /// no group, separate, visible
    #[serde(rename = "groupmode", skip_serializing_if = "Option::is_none")]
    pub groupmode: Option<i32>,
    /// 1: yes, 0: no
    #[serde(rename = "groupmodeforce", skip_serializing_if = "Option::is_none")]
    pub groupmodeforce: Option<i32>,
    /// course id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Id number
    #[serde(rename = "idnumber", skip_serializing_if = "Option::is_none")]
    pub idnumber: Option<String>,
    /// Forced course language
    #[serde(rename = "lang", skip_serializing_if = "Option::is_none")]
    pub lang: Option<String>,
    /// If legacy files are enabled
    #[serde(rename = "legacyfiles", skip_serializing_if = "Option::is_none")]
    pub legacyfiles: Option<i32>,
    /// Current course marker
    #[serde(rename = "marker", skip_serializing_if = "Option::is_none")]
    pub marker: Option<i32>,
    /// Largest size of file that can be uploaded into
    #[serde(rename = "maxbytes", skip_serializing_if = "Option::is_none")]
    pub maxbytes: Option<i32>,
    /// Number of recent items appearing on the course page
    #[serde(rename = "newsitems", skip_serializing_if = "Option::is_none")]
    pub newsitems: Option<i32>,
    #[serde(rename = "overviewfiles", skip_serializing_if = "Option::is_none")]
    pub overviewfiles: Option<Vec<models::CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>>,
    /// If is a requested course
    #[serde(rename = "requested", skip_serializing_if = "Option::is_none")]
    pub requested: Option<i32>,
    /// course short name
    #[serde(rename = "shortname", skip_serializing_if = "Option::is_none")]
    pub shortname: Option<String>,
    /// Whether the activity dates are shown or not
    #[serde(rename = "showactivitydates", skip_serializing_if = "Option::is_none")]
    pub showactivitydates: Option<bool>,
    /// Whether the activity completion conditions are shown or not
    #[serde(rename = "showcompletionconditions", skip_serializing_if = "Option::is_none")]
    pub showcompletionconditions: Option<bool>,
    /// 1 if grades are shown, otherwise 0
    #[serde(rename = "showgrades", skip_serializing_if = "Option::is_none")]
    pub showgrades: Option<i32>,
    /// Are activity report shown (yes = 1, no =0)
    #[serde(rename = "showreports", skip_serializing_if = "Option::is_none")]
    pub showreports: Option<i32>,
    /// Sort order in the category
    #[serde(rename = "sortorder", skip_serializing_if = "Option::is_none")]
    pub sortorder: Option<i32>,
    /// Timestamp when the course start
    #[serde(rename = "startdate", skip_serializing_if = "Option::is_none")]
    pub startdate: Option<i32>,
    /// summary
    #[serde(rename = "summary", skip_serializing_if = "Option::is_none")]
    pub summary: Option<String>,
    #[serde(rename = "summaryfiles", skip_serializing_if = "Option::is_none")]
    pub summaryfiles: Option<Vec<models::CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>>,
    /// summary format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "summaryformat", skip_serializing_if = "Option::is_none")]
    pub summaryformat: Option<i32>,
    /// Fame of the forced theme
    #[serde(rename = "theme", skip_serializing_if = "Option::is_none")]
    pub theme: Option<String>,
    /// Time when the course was created
    #[serde(rename = "timecreated", skip_serializing_if = "Option::is_none")]
    pub timecreated: Option<i32>,
    /// Last time  the course was updated
    #[serde(rename = "timemodified", skip_serializing_if = "Option::is_none")]
    pub timemodified: Option<i32>,
    /// 1: available to student, 0:not available
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<i32>,
}

impl CoreCourseGetCoursesByField200ResponseCoursesInner {
    pub fn new() -> CoreCourseGetCoursesByField200ResponseCoursesInner {
        CoreCourseGetCoursesByField200ResponseCoursesInner {
            cacherev: None,
            calendartype: None,
            categoryid: None,
            categoryname: None,
            completionnotify: None,
            contacts: None,
            courseformatoptions: None,
            courseimage: None,
            customfields: None,
            defaultgroupingid: None,
            displayname: None,
            enablecompletion: None,
            enddate: None,
            enrollmentmethods: None,
            filters: None,
            format: None,
            fullname: None,
            groupmode: None,
            groupmodeforce: None,
            id: None,
            idnumber: None,
            lang: None,
            legacyfiles: None,
            marker: None,
            maxbytes: None,
            newsitems: None,
            overviewfiles: None,
            requested: None,
            shortname: None,
            showactivitydates: None,
            showcompletionconditions: None,
            showgrades: None,
            showreports: None,
            sortorder: None,
            startdate: None,
            summary: None,
            summaryfiles: None,
            summaryformat: None,
            theme: None,
            timecreated: None,
            timemodified: None,
            visible: None,
        }
    }
}

