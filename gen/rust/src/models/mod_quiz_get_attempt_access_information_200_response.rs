/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModQuizGetAttemptAccessInformation200Response {
    /// When the attempt must be submitted (determined by rules).
    #[serde(rename = "endtime", skip_serializing_if = "Option::is_none")]
    pub endtime: Option<i32>,
    /// Whether there is no way the user will ever be allowed to attempt.
    #[serde(rename = "isfinished")]
    pub isfinished: bool,
    /// whether a check is required before the user                                                                     starts/continues his attempt.
    #[serde(rename = "ispreflightcheckrequired", skip_serializing_if = "Option::is_none")]
    pub ispreflightcheckrequired: Option<bool>,
    #[serde(rename = "preventnewattemptreasons")]
    pub preventnewattemptreasons: Vec<serde_json::Value>,
    #[serde(rename = "warnings", skip_serializing_if = "Option::is_none")]
    pub warnings: Option<Vec<models::AuthEmailSignupUser200ResponseWarningsInner>>,
}

impl ModQuizGetAttemptAccessInformation200Response {
    pub fn new(isfinished: bool, preventnewattemptreasons: Vec<serde_json::Value>) -> ModQuizGetAttemptAccessInformation200Response {
        ModQuizGetAttemptAccessInformation200Response {
            endtime: None,
            isfinished,
            ispreflightcheckrequired: None,
            preventnewattemptreasons,
            warnings: None,
        }
    }
}

