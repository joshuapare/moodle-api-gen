/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// ModWikiGetSubwikiPages200ResponsePagesInner : Pages
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModWikiGetSubwikiPages200ResponsePagesInner {
    /// Page contents.
    #[serde(rename = "cachedcontent", skip_serializing_if = "Option::is_none")]
    pub cachedcontent: Option<String>,
    /// True if user can edit the page.
    #[serde(rename = "caneditpage", skip_serializing_if = "Option::is_none")]
    pub caneditpage: Option<bool>,
    /// cachedcontent format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "contentformat", skip_serializing_if = "Option::is_none")]
    pub contentformat: Option<i32>,
    /// Size of page contents in bytes (doesn't include size of attached files).
    #[serde(rename = "contentsize", skip_serializing_if = "Option::is_none")]
    pub contentsize: Option<i32>,
    /// True if it's the first page.
    #[serde(rename = "firstpage", skip_serializing_if = "Option::is_none")]
    pub firstpage: Option<bool>,
    /// Page ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Number of times the page has been viewed.
    #[serde(rename = "pageviews", skip_serializing_if = "Option::is_none")]
    pub pageviews: Option<i32>,
    /// 1 if readonly, 0 otherwise.
    #[serde(rename = "readonly", skip_serializing_if = "Option::is_none")]
    pub readonly: Option<i32>,
    /// Page's subwiki ID.
    #[serde(rename = "subwikiid", skip_serializing_if = "Option::is_none")]
    pub subwikiid: Option<i32>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<models::ModDataGetEntries200ResponseEntriesInnerTagsInner>>,
    /// Time of creation.
    #[serde(rename = "timecreated", skip_serializing_if = "Option::is_none")]
    pub timecreated: Option<i32>,
    /// Time of last modification.
    #[serde(rename = "timemodified", skip_serializing_if = "Option::is_none")]
    pub timemodified: Option<i32>,
    /// Time of last renderization.
    #[serde(rename = "timerendered", skip_serializing_if = "Option::is_none")]
    pub timerendered: Option<i32>,
    /// Page title.
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// ID of the user that last modified the page.
    #[serde(rename = "userid", skip_serializing_if = "Option::is_none")]
    pub userid: Option<i32>,
}

impl ModWikiGetSubwikiPages200ResponsePagesInner {
    /// Pages
    pub fn new() -> ModWikiGetSubwikiPages200ResponsePagesInner {
        ModWikiGetSubwikiPages200ResponsePagesInner {
            cachedcontent: None,
            caneditpage: None,
            contentformat: None,
            contentsize: None,
            firstpage: None,
            id: None,
            pageviews: None,
            readonly: None,
            subwikiid: None,
            tags: None,
            timecreated: None,
            timemodified: None,
            timerendered: None,
            title: None,
            userid: None,
        }
    }
}

