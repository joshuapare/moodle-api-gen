/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreTagGetTagCloudRequest {
    /// Only retrieve tag instances in this context.
    #[serde(rename = "ctx", skip_serializing_if = "Option::is_none")]
    pub ctx: Option<i32>,
    /// Context id where this tag cloud is displayed.
    #[serde(rename = "fromctx", skip_serializing_if = "Option::is_none")]
    pub fromctx: Option<i32>,
    /// Whether to return only standard tags.
    #[serde(rename = "isstandard", skip_serializing_if = "Option::is_none")]
    pub isstandard: Option<bool>,
    /// Maximum number of tags to retrieve.
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
    /// Retrieve tag instances in the $ctx context and it's children.
    #[serde(rename = "rec", skip_serializing_if = "Option::is_none")]
    pub rec: Option<i32>,
    /// Search string.
    #[serde(rename = "search", skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    /// Sort order for display                     (id, name, rawname, count, flag, isstandard, tagcollid).
    #[serde(rename = "sort", skip_serializing_if = "Option::is_none")]
    pub sort: Option<String>,
    /// Tag collection id.
    #[serde(rename = "tagcollid", skip_serializing_if = "Option::is_none")]
    pub tagcollid: Option<i32>,
}

impl CoreTagGetTagCloudRequest {
    pub fn new() -> CoreTagGetTagCloudRequest {
        CoreTagGetTagCloudRequest {
            ctx: None,
            fromctx: None,
            isstandard: None,
            limit: None,
            rec: None,
            search: None,
            sort: None,
            tagcollid: None,
        }
    }
}

