/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModWorkshopGetWorkshopAccessInformation200Response {
    /// Is the user allowed to create/edit his assessments?
    #[serde(rename = "assessingallowed")]
    pub assessingallowed: bool,
    /// Are reviewers allowed to create/edit their assessments of the example submissions?.
    #[serde(rename = "assessingexamplesallowed")]
    pub assessingexamplesallowed: bool,
    /// Whether the user has the capability mod/workshop:addinstance allowed.
    #[serde(rename = "canaddinstance")]
    pub canaddinstance: bool,
    /// Whether the user has the capability mod/workshop:allocate allowed.
    #[serde(rename = "canallocate")]
    pub canallocate: bool,
    /// Whether the user has the capability mod/workshop:deletesubmissions allowed.
    #[serde(rename = "candeletesubmissions")]
    pub candeletesubmissions: bool,
    /// Whether the user has the capability mod/workshop:editdimensions allowed.
    #[serde(rename = "caneditdimensions")]
    pub caneditdimensions: bool,
    /// Whether the user has the capability mod/workshop:exportsubmissions allowed.
    #[serde(rename = "canexportsubmissions")]
    pub canexportsubmissions: bool,
    /// Whether the user has the capability mod/workshop:ignoredeadlines allowed.
    #[serde(rename = "canignoredeadlines")]
    pub canignoredeadlines: bool,
    /// Whether the user has the capability mod/workshop:manageexamples allowed.
    #[serde(rename = "canmanageexamples")]
    pub canmanageexamples: bool,
    /// Whether the user has the capability mod/workshop:overridegrades allowed.
    #[serde(rename = "canoverridegrades")]
    pub canoverridegrades: bool,
    /// Whether the user has the capability mod/workshop:peerassess allowed.
    #[serde(rename = "canpeerassess")]
    pub canpeerassess: bool,
    /// Whether the user has the capability mod/workshop:publishsubmissions allowed.
    #[serde(rename = "canpublishsubmissions")]
    pub canpublishsubmissions: bool,
    /// Whether the user has the capability mod/workshop:submit allowed.
    #[serde(rename = "cansubmit")]
    pub cansubmit: bool,
    /// Whether the user has the capability mod/workshop:switchphase allowed.
    #[serde(rename = "canswitchphase")]
    pub canswitchphase: bool,
    /// Whether the user has the capability mod/workshop:view allowed.
    #[serde(rename = "canview")]
    pub canview: bool,
    /// Whether the user has the capability mod/workshop:viewallassessments allowed.
    #[serde(rename = "canviewallassessments")]
    pub canviewallassessments: bool,
    /// Whether the user has the capability mod/workshop:viewallsubmissions allowed.
    #[serde(rename = "canviewallsubmissions")]
    pub canviewallsubmissions: bool,
    /// Whether the user has the capability mod/workshop:viewauthornames allowed.
    #[serde(rename = "canviewauthornames")]
    pub canviewauthornames: bool,
    /// Whether the user has the capability mod/workshop:viewauthorpublished allowed.
    #[serde(rename = "canviewauthorpublished")]
    pub canviewauthorpublished: bool,
    /// Whether the user has the capability mod/workshop:viewpublishedsubmissions allowed.
    #[serde(rename = "canviewpublishedsubmissions")]
    pub canviewpublishedsubmissions: bool,
    /// Whether the user has the capability mod/workshop:viewreviewernames allowed.
    #[serde(rename = "canviewreviewernames")]
    pub canviewreviewernames: bool,
    /// Is the given user allowed to create their submission?
    #[serde(rename = "creatingsubmissionallowed")]
    pub creatingsubmissionallowed: bool,
    /// Whether the given user has assessed all his required examples before assessment                 (always true if there are not examples to assessor not configured to check before assessment).
    #[serde(rename = "examplesassessedbeforeassessment")]
    pub examplesassessedbeforeassessment: bool,
    /// Whether the given user has assessed all his required examples before submission                 (always true if there are not examples to assess or not configured to check before submission).
    #[serde(rename = "examplesassessedbeforesubmission")]
    pub examplesassessedbeforesubmission: bool,
    /// Is the user allowed to modify his existing submission?
    #[serde(rename = "modifyingsubmissionallowed")]
    pub modifyingsubmissionallowed: bool,
    #[serde(rename = "warnings", skip_serializing_if = "Option::is_none")]
    pub warnings: Option<Vec<models::AuthEmailSignupUser200ResponseWarningsInner>>,
}

impl ModWorkshopGetWorkshopAccessInformation200Response {
    pub fn new(assessingallowed: bool, assessingexamplesallowed: bool, canaddinstance: bool, canallocate: bool, candeletesubmissions: bool, caneditdimensions: bool, canexportsubmissions: bool, canignoredeadlines: bool, canmanageexamples: bool, canoverridegrades: bool, canpeerassess: bool, canpublishsubmissions: bool, cansubmit: bool, canswitchphase: bool, canview: bool, canviewallassessments: bool, canviewallsubmissions: bool, canviewauthornames: bool, canviewauthorpublished: bool, canviewpublishedsubmissions: bool, canviewreviewernames: bool, creatingsubmissionallowed: bool, examplesassessedbeforeassessment: bool, examplesassessedbeforesubmission: bool, modifyingsubmissionallowed: bool) -> ModWorkshopGetWorkshopAccessInformation200Response {
        ModWorkshopGetWorkshopAccessInformation200Response {
            assessingallowed,
            assessingexamplesallowed,
            canaddinstance,
            canallocate,
            candeletesubmissions,
            caneditdimensions,
            canexportsubmissions,
            canignoredeadlines,
            canmanageexamples,
            canoverridegrades,
            canpeerassess,
            canpublishsubmissions,
            cansubmit,
            canswitchphase,
            canview,
            canviewallassessments,
            canviewallsubmissions,
            canviewauthornames,
            canviewauthorpublished,
            canviewpublishedsubmissions,
            canviewreviewernames,
            creatingsubmissionallowed,
            examplesassessedbeforeassessment,
            examplesassessedbeforesubmission,
            modifyingsubmissionallowed,
            warnings: None,
        }
    }
}

