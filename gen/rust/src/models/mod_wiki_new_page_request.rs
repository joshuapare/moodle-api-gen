/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModWikiNewPageRequest {
    /// Page contents.
    #[serde(rename = "content")]
    pub content: String,
    /// Page contents format. If an invalid format is provided, default                     wiki format is used.
    #[serde(rename = "contentformat", skip_serializing_if = "Option::is_none")]
    pub contentformat: Option<String>,
    /// Subwiki's group ID. Used if subwiki does not exists.
    #[serde(rename = "groupid", skip_serializing_if = "Option::is_none")]
    pub groupid: Option<i32>,
    /// Page's subwiki ID.
    #[serde(rename = "subwikiid", skip_serializing_if = "Option::is_none")]
    pub subwikiid: Option<i32>,
    /// New page title.
    #[serde(rename = "title")]
    pub title: String,
    /// Subwiki's user ID. Used if subwiki does not exists.
    #[serde(rename = "userid", skip_serializing_if = "Option::is_none")]
    pub userid: Option<i32>,
    /// Page's wiki ID. Used if subwiki does not exists.
    #[serde(rename = "wikiid", skip_serializing_if = "Option::is_none")]
    pub wikiid: Option<i32>,
}

impl ModWikiNewPageRequest {
    pub fn new(content: String, title: String) -> ModWikiNewPageRequest {
        ModWikiNewPageRequest {
            content,
            contentformat: None,
            groupid: None,
            subwikiid: None,
            title,
            userid: None,
            wikiid: None,
        }
    }
}

