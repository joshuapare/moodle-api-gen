/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreMessageGetConversations200ResponseConversationsInner {
    /// If the user can delete messages in the conversation for all users
    #[serde(rename = "candeletemessagesforallusers", skip_serializing_if = "Option::is_none")]
    pub candeletemessagesforallusers: Option<bool>,
    /// The conversation id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// A link to the conversation picture, if set
    #[serde(rename = "imageurl", skip_serializing_if = "Option::is_none")]
    pub imageurl: Option<String>,
    /// If the user marked this conversation as a favourite
    #[serde(rename = "isfavourite", skip_serializing_if = "Option::is_none")]
    pub isfavourite: Option<bool>,
    /// If the user muted this conversation
    #[serde(rename = "ismuted", skip_serializing_if = "Option::is_none")]
    pub ismuted: Option<bool>,
    /// If the user has read all messages in the conversation
    #[serde(rename = "isread", skip_serializing_if = "Option::is_none")]
    pub isread: Option<bool>,
    /// Total number of conversation members
    #[serde(rename = "membercount", skip_serializing_if = "Option::is_none")]
    pub membercount: Option<i32>,
    #[serde(rename = "members", skip_serializing_if = "Option::is_none")]
    pub members: Option<Vec<models::CoreMessageGetConversationBetweenUsers200ResponseMembersInner>>,
    #[serde(rename = "messages", skip_serializing_if = "Option::is_none")]
    pub messages: Option<Vec<models::CoreMessageGetConversationBetweenUsers200ResponseMessagesInner>>,
    /// The conversation name, if set
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A subtitle for the conversation name, if set
    #[serde(rename = "subname", skip_serializing_if = "Option::is_none")]
    pub subname: Option<String>,
    /// The type of the conversation (1=individual,2=group,3=self)
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<i32>,
    /// The number of unread messages in this conversation
    #[serde(rename = "unreadcount", skip_serializing_if = "Option::is_none")]
    pub unreadcount: Option<i32>,
}

impl CoreMessageGetConversations200ResponseConversationsInner {
    pub fn new() -> CoreMessageGetConversations200ResponseConversationsInner {
        CoreMessageGetConversations200ResponseConversationsInner {
            candeletemessagesforallusers: None,
            id: None,
            imageurl: None,
            isfavourite: None,
            ismuted: None,
            isread: None,
            membercount: None,
            members: None,
            messages: None,
            name: None,
            subname: None,
            r#type: None,
            unreadcount: None,
        }
    }
}

