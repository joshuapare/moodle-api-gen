/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetency {
    /// canrequestreview
    #[serde(rename = "canrequestreview")]
    pub canrequestreview: bool,
    /// canreview
    #[serde(rename = "canreview")]
    pub canreview: bool,
    /// competencyid
    #[serde(rename = "competencyid")]
    pub competencyid: i32,
    /// grade
    #[serde(rename = "grade")]
    pub grade: i32,
    /// gradename
    #[serde(rename = "gradename")]
    pub gradename: String,
    /// id
    #[serde(rename = "id")]
    pub id: i32,
    /// iscancelreviewrequestallowed
    #[serde(rename = "iscancelreviewrequestallowed")]
    pub iscancelreviewrequestallowed: bool,
    /// isrequestreviewallowed
    #[serde(rename = "isrequestreviewallowed")]
    pub isrequestreviewallowed: bool,
    /// isstartreviewallowed
    #[serde(rename = "isstartreviewallowed")]
    pub isstartreviewallowed: bool,
    /// isstatusidle
    #[serde(rename = "isstatusidle")]
    pub isstatusidle: bool,
    /// isstatusinreview
    #[serde(rename = "isstatusinreview")]
    pub isstatusinreview: bool,
    /// isstatuswaitingforreview
    #[serde(rename = "isstatuswaitingforreview")]
    pub isstatuswaitingforreview: bool,
    /// isstopreviewallowed
    #[serde(rename = "isstopreviewallowed")]
    pub isstopreviewallowed: bool,
    /// proficiency
    #[serde(rename = "proficiency")]
    pub proficiency: bool,
    /// proficiencyname
    #[serde(rename = "proficiencyname")]
    pub proficiencyname: String,
    #[serde(rename = "reviewer", skip_serializing_if = "Option::is_none")]
    pub reviewer: Option<Box<models::CoreCompetencyGradeCompetency200ResponseActionuser>>,
    /// reviewerid
    #[serde(rename = "reviewerid")]
    pub reviewerid: i32,
    /// status
    #[serde(rename = "status")]
    pub status: i32,
    /// statusname
    #[serde(rename = "statusname")]
    pub statusname: String,
    /// timecreated
    #[serde(rename = "timecreated")]
    pub timecreated: i32,
    /// timemodified
    #[serde(rename = "timemodified")]
    pub timemodified: i32,
    /// url
    #[serde(rename = "url")]
    pub url: String,
    /// userid
    #[serde(rename = "userid")]
    pub userid: i32,
    /// usermodified
    #[serde(rename = "usermodified")]
    pub usermodified: i32,
}

impl ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetency {
    pub fn new(canrequestreview: bool, canreview: bool, competencyid: i32, grade: i32, gradename: String, id: i32, iscancelreviewrequestallowed: bool, isrequestreviewallowed: bool, isstartreviewallowed: bool, isstatusidle: bool, isstatusinreview: bool, isstatuswaitingforreview: bool, isstopreviewallowed: bool, proficiency: bool, proficiencyname: String, reviewerid: i32, status: i32, statusname: String, timecreated: i32, timemodified: i32, url: String, userid: i32, usermodified: i32) -> ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetency {
        ToolLpDataForPlanPage200ResponseCompetenciesInnerUsercompetency {
            canrequestreview,
            canreview,
            competencyid,
            grade,
            gradename,
            id,
            iscancelreviewrequestallowed,
            isrequestreviewallowed,
            isstartreviewallowed,
            isstatusidle,
            isstatusinreview,
            isstatuswaitingforreview,
            isstopreviewallowed,
            proficiency,
            proficiencyname,
            reviewer: None,
            reviewerid,
            status,
            statusname,
            timecreated,
            timemodified,
            url,
            userid,
            usermodified,
        }
    }
}

