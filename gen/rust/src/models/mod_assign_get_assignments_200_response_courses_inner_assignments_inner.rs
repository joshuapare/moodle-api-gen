/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner : assignment information object
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner {
    /// Description of activity
    #[serde(rename = "activity", skip_serializing_if = "Option::is_none")]
    pub activity: Option<String>,
    #[serde(rename = "activityattachments", skip_serializing_if = "Option::is_none")]
    pub activityattachments: Option<Vec<models::CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>>,
    /// activity format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "activityformat", skip_serializing_if = "Option::is_none")]
    pub activityformat: Option<i32>,
    /// allow submissions from date
    #[serde(rename = "allowsubmissionsfromdate", skip_serializing_if = "Option::is_none")]
    pub allowsubmissionsfromdate: Option<i32>,
    /// method used to control opening new attempts
    #[serde(rename = "attemptreopenmethod", skip_serializing_if = "Option::is_none")]
    pub attemptreopenmethod: Option<String>,
    /// if enabled, hide identities until reveal identities actioned
    #[serde(rename = "blindmarking", skip_serializing_if = "Option::is_none")]
    pub blindmarking: Option<i32>,
    /// course module id
    #[serde(rename = "cmid", skip_serializing_if = "Option::is_none")]
    pub cmid: Option<i32>,
    /// if enabled, set activity as complete following submission
    #[serde(rename = "completionsubmit", skip_serializing_if = "Option::is_none")]
    pub completionsubmit: Option<i32>,
    #[serde(rename = "configs", skip_serializing_if = "Option::is_none")]
    pub configs: Option<Vec<models::ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInnerConfigsInner>>,
    /// course id
    #[serde(rename = "course", skip_serializing_if = "Option::is_none")]
    pub course: Option<i32>,
    /// date after which submission is not accepted without an extension
    #[serde(rename = "cutoffdate", skip_serializing_if = "Option::is_none")]
    pub cutoffdate: Option<i32>,
    /// assignment due date
    #[serde(rename = "duedate", skip_serializing_if = "Option::is_none")]
    pub duedate: Option<i32>,
    /// grade type
    #[serde(rename = "grade", skip_serializing_if = "Option::is_none")]
    pub grade: Option<i32>,
    /// the expected date for marking the submissions
    #[serde(rename = "gradingduedate", skip_serializing_if = "Option::is_none")]
    pub gradingduedate: Option<i32>,
    /// If enabled, hide grader to student
    #[serde(rename = "hidegrader", skip_serializing_if = "Option::is_none")]
    pub hidegrader: Option<i32>,
    /// assignment id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// assignment intro, not allways returned because it deppends on the activity configuration
    #[serde(rename = "intro", skip_serializing_if = "Option::is_none")]
    pub intro: Option<String>,
    #[serde(rename = "introattachments", skip_serializing_if = "Option::is_none")]
    pub introattachments: Option<Vec<models::CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>>,
    #[serde(rename = "introfiles", skip_serializing_if = "Option::is_none")]
    pub introfiles: Option<Vec<models::CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>>,
    /// intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "introformat", skip_serializing_if = "Option::is_none")]
    pub introformat: Option<i32>,
    /// enable marking allocation
    #[serde(rename = "markingallocation", skip_serializing_if = "Option::is_none")]
    pub markingallocation: Option<i32>,
    /// enable marking workflow
    #[serde(rename = "markingworkflow", skip_serializing_if = "Option::is_none")]
    pub markingworkflow: Option<i32>,
    /// maximum number of attempts allowed
    #[serde(rename = "maxattempts", skip_serializing_if = "Option::is_none")]
    pub maxattempts: Option<i32>,
    /// assignment name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// no submissions
    #[serde(rename = "nosubmissions", skip_serializing_if = "Option::is_none")]
    pub nosubmissions: Option<i32>,
    /// Prevent submission not in group
    #[serde(rename = "preventsubmissionnotingroup", skip_serializing_if = "Option::is_none")]
    pub preventsubmissionnotingroup: Option<i32>,
    /// if enabled, all team members must submit
    #[serde(rename = "requireallteammemberssubmit", skip_serializing_if = "Option::is_none")]
    pub requireallteammemberssubmit: Option<i32>,
    /// student must accept submission statement
    #[serde(rename = "requiresubmissionstatement", skip_serializing_if = "Option::is_none")]
    pub requiresubmissionstatement: Option<i32>,
    /// show identities for a blind marking assignment
    #[serde(rename = "revealidentities", skip_serializing_if = "Option::is_none")]
    pub revealidentities: Option<i32>,
    /// send notifications
    #[serde(rename = "sendlatenotifications", skip_serializing_if = "Option::is_none")]
    pub sendlatenotifications: Option<i32>,
    /// send notifications
    #[serde(rename = "sendnotifications", skip_serializing_if = "Option::is_none")]
    pub sendnotifications: Option<i32>,
    /// send student notifications (default)
    #[serde(rename = "sendstudentnotifications", skip_serializing_if = "Option::is_none")]
    pub sendstudentnotifications: Option<i32>,
    /// Flag to only show files during submission
    #[serde(rename = "submissionattachments", skip_serializing_if = "Option::is_none")]
    pub submissionattachments: Option<i32>,
    /// submissions drafts
    #[serde(rename = "submissiondrafts", skip_serializing_if = "Option::is_none")]
    pub submissiondrafts: Option<i32>,
    /// Submission statement formatted.
    #[serde(rename = "submissionstatement", skip_serializing_if = "Option::is_none")]
    pub submissionstatement: Option<String>,
    /// submissionstatement format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "submissionstatementformat", skip_serializing_if = "Option::is_none")]
    pub submissionstatementformat: Option<i32>,
    /// if enabled, students submit as a team
    #[serde(rename = "teamsubmission", skip_serializing_if = "Option::is_none")]
    pub teamsubmission: Option<i32>,
    /// the grouping id for the team submission groups
    #[serde(rename = "teamsubmissiongroupingid", skip_serializing_if = "Option::is_none")]
    pub teamsubmissiongroupingid: Option<i32>,
    /// Time limit to complete assigment
    #[serde(rename = "timelimit", skip_serializing_if = "Option::is_none")]
    pub timelimit: Option<i32>,
    /// last time assignment was modified
    #[serde(rename = "timemodified", skip_serializing_if = "Option::is_none")]
    pub timemodified: Option<i32>,
}

impl ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner {
    /// assignment information object
    pub fn new() -> ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner {
        ModAssignGetAssignments200ResponseCoursesInnerAssignmentsInner {
            activity: None,
            activityattachments: None,
            activityformat: None,
            allowsubmissionsfromdate: None,
            attemptreopenmethod: None,
            blindmarking: None,
            cmid: None,
            completionsubmit: None,
            configs: None,
            course: None,
            cutoffdate: None,
            duedate: None,
            grade: None,
            gradingduedate: None,
            hidegrader: None,
            id: None,
            intro: None,
            introattachments: None,
            introfiles: None,
            introformat: None,
            markingallocation: None,
            markingworkflow: None,
            maxattempts: None,
            name: None,
            nosubmissions: None,
            preventsubmissionnotingroup: None,
            requireallteammemberssubmit: None,
            requiresubmissionstatement: None,
            revealidentities: None,
            sendlatenotifications: None,
            sendnotifications: None,
            sendstudentnotifications: None,
            submissionattachments: None,
            submissiondrafts: None,
            submissionstatement: None,
            submissionstatementformat: None,
            teamsubmission: None,
            teamsubmissiongroupingid: None,
            timelimit: None,
            timemodified: None,
        }
    }
}

