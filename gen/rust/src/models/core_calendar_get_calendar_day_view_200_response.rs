/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreCalendarGetCalendarDayView200Response {
    /// categoryid
    #[serde(rename = "categoryid", skip_serializing_if = "Option::is_none")]
    pub categoryid: Option<i32>,
    /// courseid
    #[serde(rename = "courseid")]
    pub courseid: i32,
    #[serde(rename = "date")]
    pub date: Box<models::CoreCalendarGetCalendarDayView200ResponseDate>,
    /// defaulteventcontext
    #[serde(rename = "defaulteventcontext")]
    pub defaulteventcontext: i32,
    #[serde(rename = "events")]
    pub events: Vec<models::CoreCalendarGetCalendarDayView200ResponseEventsInner>,
    /// filter_selector
    #[serde(rename = "filter_selector")]
    pub filter_selector: String,
    /// larrow
    #[serde(rename = "larrow")]
    pub larrow: String,
    /// neweventtimestamp
    #[serde(rename = "neweventtimestamp")]
    pub neweventtimestamp: i32,
    #[serde(rename = "nextperiod")]
    pub nextperiod: Box<models::CoreCalendarGetCalendarDayView200ResponseNextperiod>,
    /// nextperiodlink
    #[serde(rename = "nextperiodlink")]
    pub nextperiodlink: String,
    /// nextperiodname
    #[serde(rename = "nextperiodname")]
    pub nextperiodname: String,
    /// periodname
    #[serde(rename = "periodname")]
    pub periodname: String,
    #[serde(rename = "previousperiod")]
    pub previousperiod: Box<models::CoreCalendarGetCalendarDayView200ResponseNextperiod>,
    /// previousperiodlink
    #[serde(rename = "previousperiodlink")]
    pub previousperiodlink: String,
    /// previousperiodname
    #[serde(rename = "previousperiodname")]
    pub previousperiodname: String,
    /// rarrow
    #[serde(rename = "rarrow")]
    pub rarrow: String,
}

impl CoreCalendarGetCalendarDayView200Response {
    pub fn new(courseid: i32, date: models::CoreCalendarGetCalendarDayView200ResponseDate, defaulteventcontext: i32, events: Vec<models::CoreCalendarGetCalendarDayView200ResponseEventsInner>, filter_selector: String, larrow: String, neweventtimestamp: i32, nextperiod: models::CoreCalendarGetCalendarDayView200ResponseNextperiod, nextperiodlink: String, nextperiodname: String, periodname: String, previousperiod: models::CoreCalendarGetCalendarDayView200ResponseNextperiod, previousperiodlink: String, previousperiodname: String, rarrow: String) -> CoreCalendarGetCalendarDayView200Response {
        CoreCalendarGetCalendarDayView200Response {
            categoryid: None,
            courseid,
            date: Box::new(date),
            defaulteventcontext,
            events,
            filter_selector,
            larrow,
            neweventtimestamp,
            nextperiod: Box::new(nextperiod),
            nextperiodlink,
            nextperiodname,
            periodname,
            previousperiod: Box::new(previousperiod),
            previousperiodlink,
            previousperiodname,
            rarrow,
        }
    }
}

