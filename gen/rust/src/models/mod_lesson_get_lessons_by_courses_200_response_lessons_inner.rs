/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModLessonGetLessonsByCourses200ResponseLessonsInner {
    /// Id of the next activity to be linked once the lesson is completed
    #[serde(rename = "activitylink", skip_serializing_if = "Option::is_none")]
    pub activitylink: Option<i32>,
    /// Whether to allow the lesson to be attempted offline in the mobile app
    #[serde(rename = "allowofflineattempts", skip_serializing_if = "Option::is_none")]
    pub allowofflineattempts: Option<bool>,
    /// Available from
    #[serde(rename = "available", skip_serializing_if = "Option::is_none")]
    pub available: Option<i32>,
    /// Slideshow bgcolor
    #[serde(rename = "bgcolor", skip_serializing_if = "Option::is_none")]
    pub bgcolor: Option<String>,
    /// Require end reached for completion?
    #[serde(rename = "completionendreached", skip_serializing_if = "Option::is_none")]
    pub completionendreached: Option<i32>,
    /// Student must do this activity at least for
    #[serde(rename = "completiontimespent", skip_serializing_if = "Option::is_none")]
    pub completiontimespent: Option<i32>,
    /// Conditions to enable the lesson
    #[serde(rename = "conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<String>,
    /// Foreign key reference to the course this lesson is part of.
    #[serde(rename = "course", skip_serializing_if = "Option::is_none")]
    pub course: Option<i32>,
    /// Course module id.
    #[serde(rename = "coursemodule", skip_serializing_if = "Option::is_none")]
    pub coursemodule: Option<i32>,
    /// Custom scoring?
    #[serde(rename = "custom", skip_serializing_if = "Option::is_none")]
    pub custom: Option<bool>,
    /// Available until
    #[serde(rename = "deadline", skip_serializing_if = "Option::is_none")]
    pub deadline: Option<i32>,
    /// Dependent on (another lesson id)
    #[serde(rename = "dependency", skip_serializing_if = "Option::is_none")]
    pub dependency: Option<i32>,
    /// Display left pages menu?
    #[serde(rename = "displayleft", skip_serializing_if = "Option::is_none")]
    pub displayleft: Option<bool>,
    /// Minimum grade to display menu
    #[serde(rename = "displayleftif", skip_serializing_if = "Option::is_none")]
    pub displayleftif: Option<i32>,
    /// Display default feedback
    #[serde(rename = "feedback", skip_serializing_if = "Option::is_none")]
    pub feedback: Option<bool>,
    /// The total that the grade is scaled to be out of
    #[serde(rename = "grade", skip_serializing_if = "Option::is_none")]
    pub grade: Option<i32>,
    /// Slideshow height
    #[serde(rename = "height", skip_serializing_if = "Option::is_none")]
    pub height: Option<i32>,
    /// Standard Moodle primary key.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Lesson introduction text.
    #[serde(rename = "intro", skip_serializing_if = "Option::is_none")]
    pub intro: Option<String>,
    #[serde(rename = "introfiles", skip_serializing_if = "Option::is_none")]
    pub introfiles: Option<Vec<models::CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>>,
    /// intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "introformat", skip_serializing_if = "Option::is_none")]
    pub introformat: Option<i32>,
    /// Forced activity language
    #[serde(rename = "lang", skip_serializing_if = "Option::is_none")]
    pub lang: Option<String>,
    /// Maximum answers per page
    #[serde(rename = "maxanswers", skip_serializing_if = "Option::is_none")]
    pub maxanswers: Option<i32>,
    /// Maximum attempts
    #[serde(rename = "maxattempts", skip_serializing_if = "Option::is_none")]
    pub maxattempts: Option<i32>,
    /// Number of pages to show
    #[serde(rename = "maxpages", skip_serializing_if = "Option::is_none")]
    pub maxpages: Option<i32>,
    /// Display a close button in the popup?
    #[serde(rename = "mediaclose", skip_serializing_if = "Option::is_none")]
    pub mediaclose: Option<i32>,
    /// Local file path or full external URL
    #[serde(rename = "mediafile", skip_serializing_if = "Option::is_none")]
    pub mediafile: Option<String>,
    #[serde(rename = "mediafiles", skip_serializing_if = "Option::is_none")]
    pub mediafiles: Option<Vec<models::CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>>,
    /// Popup for media file height
    #[serde(rename = "mediaheight", skip_serializing_if = "Option::is_none")]
    pub mediaheight: Option<i32>,
    /// Popup for media with
    #[serde(rename = "mediawidth", skip_serializing_if = "Option::is_none")]
    pub mediawidth: Option<i32>,
    /// Minimum number of questions
    #[serde(rename = "minquestions", skip_serializing_if = "Option::is_none")]
    pub minquestions: Option<i32>,
    /// Allow student review?
    #[serde(rename = "modattempts", skip_serializing_if = "Option::is_none")]
    pub modattempts: Option<bool>,
    /// Lesson name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Action for a correct answer
    #[serde(rename = "nextpagedefault", skip_serializing_if = "Option::is_none")]
    pub nextpagedefault: Option<i32>,
    /// Display ongoing score?
    #[serde(rename = "ongoing", skip_serializing_if = "Option::is_none")]
    pub ongoing: Option<bool>,
    /// Password
    #[serde(rename = "password", skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,
    /// Practice lesson?
    #[serde(rename = "practice", skip_serializing_if = "Option::is_none")]
    pub practice: Option<bool>,
    /// Display progress bar?
    #[serde(rename = "progressbar", skip_serializing_if = "Option::is_none")]
    pub progressbar: Option<bool>,
    /// Re-takes allowed
    #[serde(rename = "retake", skip_serializing_if = "Option::is_none")]
    pub retake: Option<bool>,
    /// Provide option to try a question again
    #[serde(rename = "review", skip_serializing_if = "Option::is_none")]
    pub review: Option<bool>,
    /// Display lesson as slideshow
    #[serde(rename = "slideshow", skip_serializing_if = "Option::is_none")]
    pub slideshow: Option<bool>,
    /// Time limit
    #[serde(rename = "timelimit", skip_serializing_if = "Option::is_none")]
    pub timelimit: Option<i32>,
    /// Last time settings were updated
    #[serde(rename = "timemodified", skip_serializing_if = "Option::is_none")]
    pub timemodified: Option<i32>,
    /// How to calculate the final grade
    #[serde(rename = "usemaxgrade", skip_serializing_if = "Option::is_none")]
    pub usemaxgrade: Option<i32>,
    /// Password protected lesson?
    #[serde(rename = "usepassword", skip_serializing_if = "Option::is_none")]
    pub usepassword: Option<bool>,
    /// Slideshow width
    #[serde(rename = "width", skip_serializing_if = "Option::is_none")]
    pub width: Option<i32>,
}

impl ModLessonGetLessonsByCourses200ResponseLessonsInner {
    pub fn new() -> ModLessonGetLessonsByCourses200ResponseLessonsInner {
        ModLessonGetLessonsByCourses200ResponseLessonsInner {
            activitylink: None,
            allowofflineattempts: None,
            available: None,
            bgcolor: None,
            completionendreached: None,
            completiontimespent: None,
            conditions: None,
            course: None,
            coursemodule: None,
            custom: None,
            deadline: None,
            dependency: None,
            displayleft: None,
            displayleftif: None,
            feedback: None,
            grade: None,
            height: None,
            id: None,
            intro: None,
            introfiles: None,
            introformat: None,
            lang: None,
            maxanswers: None,
            maxattempts: None,
            maxpages: None,
            mediaclose: None,
            mediafile: None,
            mediafiles: None,
            mediaheight: None,
            mediawidth: None,
            minquestions: None,
            modattempts: None,
            name: None,
            nextpagedefault: None,
            ongoing: None,
            password: None,
            practice: None,
            progressbar: None,
            retake: None,
            review: None,
            slideshow: None,
            timelimit: None,
            timemodified: None,
            usemaxgrade: None,
            usepassword: None,
            width: None,
        }
    }
}

