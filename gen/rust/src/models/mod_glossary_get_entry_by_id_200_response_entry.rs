/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModGlossaryGetEntryById200ResponseEntry {
    /// Whether the entry was approved
    #[serde(rename = "approved")]
    pub approved: bool,
    /// Whether or not the entry has attachments
    #[serde(rename = "attachment")]
    pub attachment: bool,
    #[serde(rename = "attachments", skip_serializing_if = "Option::is_none")]
    pub attachments: Option<Vec<models::CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>>,
    /// When true, the matching is case sensitive
    #[serde(rename = "casesensitive")]
    pub casesensitive: bool,
    /// The concept
    #[serde(rename = "concept")]
    pub concept: String,
    /// The definition
    #[serde(rename = "definition")]
    pub definition: String,
    /// definition format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "definitionformat")]
    pub definitionformat: i32,
    #[serde(rename = "definitioninlinefiles", skip_serializing_if = "Option::is_none")]
    pub definitioninlinefiles: Option<Vec<models::CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>>,
    /// The definition trust flag
    #[serde(rename = "definitiontrust")]
    pub definitiontrust: bool,
    /// When true, the matching is done on full words only
    #[serde(rename = "fullmatch")]
    pub fullmatch: bool,
    /// The glossary ID
    #[serde(rename = "glossaryid")]
    pub glossaryid: i32,
    /// The entry ID
    #[serde(rename = "id")]
    pub id: i32,
    /// The source glossary ID
    #[serde(rename = "sourceglossaryid")]
    pub sourceglossaryid: i32,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<models::ModDataGetEntries200ResponseEntriesInnerTagsInner>>,
    /// The entry was created by a teacher, or equivalent.
    #[serde(rename = "teacherentry")]
    pub teacherentry: bool,
    /// Time created
    #[serde(rename = "timecreated")]
    pub timecreated: i32,
    /// Time modified
    #[serde(rename = "timemodified")]
    pub timemodified: i32,
    /// Whether the concept should be automatically linked
    #[serde(rename = "usedynalink")]
    pub usedynalink: bool,
    /// Author full name
    #[serde(rename = "userfullname")]
    pub userfullname: String,
    /// Author ID
    #[serde(rename = "userid")]
    pub userid: i32,
    /// Author picture
    #[serde(rename = "userpictureurl")]
    pub userpictureurl: String,
}

impl ModGlossaryGetEntryById200ResponseEntry {
    pub fn new(approved: bool, attachment: bool, casesensitive: bool, concept: String, definition: String, definitionformat: i32, definitiontrust: bool, fullmatch: bool, glossaryid: i32, id: i32, sourceglossaryid: i32, teacherentry: bool, timecreated: i32, timemodified: i32, usedynalink: bool, userfullname: String, userid: i32, userpictureurl: String) -> ModGlossaryGetEntryById200ResponseEntry {
        ModGlossaryGetEntryById200ResponseEntry {
            approved,
            attachment,
            attachments: None,
            casesensitive,
            concept,
            definition,
            definitionformat,
            definitioninlinefiles: None,
            definitiontrust,
            fullmatch,
            glossaryid,
            id,
            sourceglossaryid,
            tags: None,
            teacherentry,
            timecreated,
            timemodified,
            usedynalink,
            userfullname,
            userid,
            userpictureurl,
        }
    }
}

