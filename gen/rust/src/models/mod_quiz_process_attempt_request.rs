/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModQuizProcessAttemptRequest {
    /// attempt id
    #[serde(rename = "attemptid")]
    pub attemptid: i32,
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<Vec<models::ModQuizGetAttemptDataRequestPreflightdataInner>>,
    /// whether to finish or not the attempt
    #[serde(rename = "finishattempt", skip_serializing_if = "Option::is_none")]
    pub finishattempt: Option<bool>,
    #[serde(rename = "preflightdata", skip_serializing_if = "Option::is_none")]
    pub preflightdata: Option<Vec<models::ModQuizGetAttemptDataRequestPreflightdataInner>>,
    /// whether the WS was called by a timer when the time is up
    #[serde(rename = "timeup", skip_serializing_if = "Option::is_none")]
    pub timeup: Option<bool>,
}

impl ModQuizProcessAttemptRequest {
    pub fn new(attemptid: i32) -> ModQuizProcessAttemptRequest {
        ModQuizProcessAttemptRequest {
            attemptid,
            data: None,
            finishattempt: None,
            preflightdata: None,
            timeup: None,
        }
    }
}

