/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreReportbuilderReportsGet200Response {
    /// area
    #[serde(rename = "area")]
    pub area: String,
    #[serde(rename = "attributes")]
    pub attributes: Vec<models::CoreReportbuilderReportsGet200ResponseAttributesInner>,
    #[serde(rename = "cardview", skip_serializing_if = "Option::is_none")]
    pub cardview: Option<Box<models::CoreReportbuilderReportsGet200ResponseCardview>>,
    /// classes
    #[serde(rename = "classes")]
    pub classes: String,
    /// component
    #[serde(rename = "component")]
    pub component: String,
    /// conditiondata
    #[serde(rename = "conditiondata")]
    pub conditiondata: String,
    #[serde(rename = "conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Box<models::CoreReportbuilderConditionsDelete200Response>>,
    /// contextid
    #[serde(rename = "contextid")]
    pub contextid: i32,
    /// editmode
    #[serde(rename = "editmode")]
    pub editmode: bool,
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Box<models::CoreReportbuilderFiltersDelete200Response>>,
    /// filtersapplied
    #[serde(rename = "filtersapplied")]
    pub filtersapplied: i32,
    /// filtersform
    #[serde(rename = "filtersform")]
    pub filtersform: String,
    /// filterspresent
    #[serde(rename = "filterspresent")]
    pub filterspresent: bool,
    /// id
    #[serde(rename = "id")]
    pub id: i32,
    /// itemid
    #[serde(rename = "itemid")]
    pub itemid: i32,
    /// javascript
    #[serde(rename = "javascript")]
    pub javascript: String,
    /// name
    #[serde(rename = "name")]
    pub name: String,
    /// settingsdata
    #[serde(rename = "settingsdata")]
    pub settingsdata: String,
    #[serde(rename = "sidebarmenucards", skip_serializing_if = "Option::is_none")]
    pub sidebarmenucards: Option<Box<models::CoreReportbuilderReportsGet200ResponseSidebarmenucards>>,
    #[serde(rename = "sorting", skip_serializing_if = "Option::is_none")]
    pub sorting: Option<Box<models::CoreReportbuilderColumnsDelete200Response>>,
    /// source
    #[serde(rename = "source")]
    pub source: String,
    /// table
    #[serde(rename = "table")]
    pub table: String,
    /// timecreated
    #[serde(rename = "timecreated")]
    pub timecreated: i32,
    /// timemodified
    #[serde(rename = "timemodified")]
    pub timemodified: i32,
    /// type
    #[serde(rename = "type")]
    pub r#type: i32,
    /// uniquerows
    #[serde(rename = "uniquerows")]
    pub uniquerows: bool,
    /// usercreated
    #[serde(rename = "usercreated")]
    pub usercreated: i32,
    /// usermodified
    #[serde(rename = "usermodified")]
    pub usermodified: i32,
}

impl CoreReportbuilderReportsGet200Response {
    pub fn new(area: String, attributes: Vec<models::CoreReportbuilderReportsGet200ResponseAttributesInner>, classes: String, component: String, conditiondata: String, contextid: i32, editmode: bool, filtersapplied: i32, filtersform: String, filterspresent: bool, id: i32, itemid: i32, javascript: String, name: String, settingsdata: String, source: String, table: String, timecreated: i32, timemodified: i32, r#type: i32, uniquerows: bool, usercreated: i32, usermodified: i32) -> CoreReportbuilderReportsGet200Response {
        CoreReportbuilderReportsGet200Response {
            area,
            attributes,
            cardview: None,
            classes,
            component,
            conditiondata,
            conditions: None,
            contextid,
            editmode,
            filters: None,
            filtersapplied,
            filtersform,
            filterspresent,
            id,
            itemid,
            javascript,
            name,
            settingsdata,
            sidebarmenucards: None,
            sorting: None,
            source,
            table,
            timecreated,
            timemodified,
            r#type,
            uniquerows,
            usercreated,
            usermodified,
        }
    }
}

