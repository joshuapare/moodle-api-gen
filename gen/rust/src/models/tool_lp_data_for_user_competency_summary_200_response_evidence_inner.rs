/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ToolLpDataForUserCompetencySummary200ResponseEvidenceInner {
    /// action
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<i32>,
    #[serde(rename = "actionuser", skip_serializing_if = "Option::is_none")]
    pub actionuser: Option<Box<models::CoreCompetencyGradeCompetency200ResponseActionuser>>,
    /// actionuserid
    #[serde(rename = "actionuserid", skip_serializing_if = "Option::is_none")]
    pub actionuserid: Option<i32>,
    /// candelete
    #[serde(rename = "candelete", skip_serializing_if = "Option::is_none")]
    pub candelete: Option<bool>,
    /// contextid
    #[serde(rename = "contextid", skip_serializing_if = "Option::is_none")]
    pub contextid: Option<i32>,
    /// desca
    #[serde(rename = "desca", skip_serializing_if = "Option::is_none")]
    pub desca: Option<String>,
    /// desccomponent
    #[serde(rename = "desccomponent", skip_serializing_if = "Option::is_none")]
    pub desccomponent: Option<String>,
    /// descidentifier
    #[serde(rename = "descidentifier", skip_serializing_if = "Option::is_none")]
    pub descidentifier: Option<String>,
    /// description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// grade
    #[serde(rename = "grade", skip_serializing_if = "Option::is_none")]
    pub grade: Option<i32>,
    /// gradename
    #[serde(rename = "gradename", skip_serializing_if = "Option::is_none")]
    pub gradename: Option<String>,
    /// id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// note
    #[serde(rename = "note", skip_serializing_if = "Option::is_none")]
    pub note: Option<String>,
    /// timecreated
    #[serde(rename = "timecreated", skip_serializing_if = "Option::is_none")]
    pub timecreated: Option<i32>,
    /// timemodified
    #[serde(rename = "timemodified", skip_serializing_if = "Option::is_none")]
    pub timemodified: Option<i32>,
    /// url
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// usercompetencyid
    #[serde(rename = "usercompetencyid", skip_serializing_if = "Option::is_none")]
    pub usercompetencyid: Option<i32>,
    /// userdate
    #[serde(rename = "userdate", skip_serializing_if = "Option::is_none")]
    pub userdate: Option<String>,
    /// usermodified
    #[serde(rename = "usermodified", skip_serializing_if = "Option::is_none")]
    pub usermodified: Option<i32>,
}

impl ToolLpDataForUserCompetencySummary200ResponseEvidenceInner {
    pub fn new() -> ToolLpDataForUserCompetencySummary200ResponseEvidenceInner {
        ToolLpDataForUserCompetencySummary200ResponseEvidenceInner {
            action: None,
            actionuser: None,
            actionuserid: None,
            candelete: None,
            contextid: None,
            desca: None,
            desccomponent: None,
            descidentifier: None,
            description: None,
            grade: None,
            gradename: None,
            id: None,
            note: None,
            timecreated: None,
            timemodified: None,
            url: None,
            usercompetencyid: None,
            userdate: None,
            usermodified: None,
        }
    }
}

