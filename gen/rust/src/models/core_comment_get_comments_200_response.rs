/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreCommentGetComments200Response {
    /// Whether the user can post in this comment area.
    #[serde(rename = "canpost", skip_serializing_if = "Option::is_none")]
    pub canpost: Option<bool>,
    #[serde(rename = "comments")]
    pub comments: Vec<models::CoreCommentGetComments200ResponseCommentsInner>,
    /// Total number of comments.
    #[serde(rename = "count", skip_serializing_if = "Option::is_none")]
    pub count: Option<i32>,
    /// Number of comments per page.
    #[serde(rename = "perpage", skip_serializing_if = "Option::is_none")]
    pub perpage: Option<i32>,
    #[serde(rename = "warnings", skip_serializing_if = "Option::is_none")]
    pub warnings: Option<Vec<models::AuthEmailSignupUser200ResponseWarningsInner>>,
}

impl CoreCommentGetComments200Response {
    pub fn new(comments: Vec<models::CoreCommentGetComments200ResponseCommentsInner>) -> CoreCommentGetComments200Response {
        CoreCommentGetComments200Response {
            canpost: None,
            comments,
            count: None,
            perpage: None,
            warnings: None,
        }
    }
}

