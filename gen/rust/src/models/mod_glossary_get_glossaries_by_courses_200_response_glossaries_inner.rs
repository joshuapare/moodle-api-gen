/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner : Glossaries
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner {
    /// If enabled, all participants with permission to create comments will be able to add comments to glossary entries
    #[serde(rename = "allowcomments", skip_serializing_if = "Option::is_none")]
    pub allowcomments: Option<i32>,
    /// If enabled, multiple entries can have the same concept name
    #[serde(rename = "allowduplicatedentries", skip_serializing_if = "Option::is_none")]
    pub allowduplicatedentries: Option<i32>,
    /// If enabled, students are provided with a link to a printer-friendly version of the glossary. The link is always available to teachers
    #[serde(rename = "allowprintview", skip_serializing_if = "Option::is_none")]
    pub allowprintview: Option<i32>,
    /// When approving glossary items you may wish to use a different display format
    #[serde(rename = "approvaldisplayformat", skip_serializing_if = "Option::is_none")]
    pub approvaldisplayformat: Option<String>,
    /// Aggregate type
    #[serde(rename = "assessed", skip_serializing_if = "Option::is_none")]
    pub assessed: Option<i32>,
    /// Restrict rating to items created before this
    #[serde(rename = "assesstimefinish", skip_serializing_if = "Option::is_none")]
    pub assesstimefinish: Option<i32>,
    /// Restrict rating to items created after this
    #[serde(rename = "assesstimestart", skip_serializing_if = "Option::is_none")]
    pub assesstimestart: Option<i32>,
    #[serde(rename = "browsemodes", skip_serializing_if = "Option::is_none")]
    pub browsemodes: Option<Vec<serde_json::Value>>,
    /// Whether the user can add a new entry
    #[serde(rename = "canaddentry", skip_serializing_if = "Option::is_none")]
    pub canaddentry: Option<i32>,
    /// Number of entries to complete
    #[serde(rename = "completionentries", skip_serializing_if = "Option::is_none")]
    pub completionentries: Option<i32>,
    /// Course id
    #[serde(rename = "course", skip_serializing_if = "Option::is_none")]
    pub course: Option<i32>,
    /// Course module id
    #[serde(rename = "coursemodule", skip_serializing_if = "Option::is_none")]
    pub coursemodule: Option<i32>,
    /// If set to no, entries require approving by a teacher before they are viewable by everyone.
    #[serde(rename = "defaultapproval", skip_serializing_if = "Option::is_none")]
    pub defaultapproval: Option<i32>,
    /// Display format type
    #[serde(rename = "displayformat", skip_serializing_if = "Option::is_none")]
    pub displayformat: Option<String>,
    /// Always allow editing
    #[serde(rename = "editalways", skip_serializing_if = "Option::is_none")]
    pub editalways: Option<i32>,
    /// Entries shown per page
    #[serde(rename = "entbypage", skip_serializing_if = "Option::is_none")]
    pub entbypage: Option<i32>,
    #[serde(rename = "globalglossary", skip_serializing_if = "Option::is_none")]
    pub globalglossary: Option<i32>,
    /// Group id
    #[serde(rename = "groupingid", skip_serializing_if = "Option::is_none")]
    pub groupingid: Option<i32>,
    /// Group mode
    #[serde(rename = "groupmode", skip_serializing_if = "Option::is_none")]
    pub groupmode: Option<i32>,
    /// Activity instance id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Activity introduction
    #[serde(rename = "intro", skip_serializing_if = "Option::is_none")]
    pub intro: Option<String>,
    #[serde(rename = "introfiles", skip_serializing_if = "Option::is_none")]
    pub introfiles: Option<Vec<models::CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>>,
    /// intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "introformat", skip_serializing_if = "Option::is_none")]
    pub introformat: Option<i32>,
    /// Forced activity language
    #[serde(rename = "lang", skip_serializing_if = "Option::is_none")]
    pub lang: Option<String>,
    /// If enabled this glossary is a main glossary.
    #[serde(rename = "mainglossary", skip_serializing_if = "Option::is_none")]
    pub mainglossary: Option<i32>,
    /// Activity name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// This setting specifies the number of glossary entry concepts to include in the RSS feed. Between 5 and 20 generally acceptable
    #[serde(rename = "rssarticles", skip_serializing_if = "Option::is_none")]
    pub rssarticles: Option<i32>,
    /// To enable the RSS feed for this activity, select either concepts with author or concepts without author to be included in the feed
    #[serde(rename = "rsstype", skip_serializing_if = "Option::is_none")]
    pub rsstype: Option<i32>,
    /// Scale ID
    #[serde(rename = "scale", skip_serializing_if = "Option::is_none")]
    pub scale: Option<i32>,
    /// Course section id
    #[serde(rename = "section", skip_serializing_if = "Option::is_none")]
    pub section: Option<i32>,
    /// If enabled, participants can browse all entries at once
    #[serde(rename = "showall", skip_serializing_if = "Option::is_none")]
    pub showall: Option<i32>,
    /// If enabled, participants can browse the glossary by letters of the alphabet
    #[serde(rename = "showalphabet", skip_serializing_if = "Option::is_none")]
    pub showalphabet: Option<i32>,
    /// If enabled, participants can browse the glossary by special characters, such as @ and #
    #[serde(rename = "showspecial", skip_serializing_if = "Option::is_none")]
    pub showspecial: Option<i32>,
    /// Time created
    #[serde(rename = "timecreated", skip_serializing_if = "Option::is_none")]
    pub timecreated: Option<i32>,
    /// Time modified
    #[serde(rename = "timemodified", skip_serializing_if = "Option::is_none")]
    pub timemodified: Option<i32>,
    /// If site-wide glossary auto-linking has been enabled by an administrator and this checkbox is ticked, the entry will be automatically linked wherever the concept words and phrases appear throughout the rest of the course.
    #[serde(rename = "usedynalink", skip_serializing_if = "Option::is_none")]
    pub usedynalink: Option<i32>,
    /// Visible
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<bool>,
}

impl ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner {
    /// Glossaries
    pub fn new() -> ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner {
        ModGlossaryGetGlossariesByCourses200ResponseGlossariesInner {
            allowcomments: None,
            allowduplicatedentries: None,
            allowprintview: None,
            approvaldisplayformat: None,
            assessed: None,
            assesstimefinish: None,
            assesstimestart: None,
            browsemodes: None,
            canaddentry: None,
            completionentries: None,
            course: None,
            coursemodule: None,
            defaultapproval: None,
            displayformat: None,
            editalways: None,
            entbypage: None,
            globalglossary: None,
            groupingid: None,
            groupmode: None,
            id: None,
            intro: None,
            introfiles: None,
            introformat: None,
            lang: None,
            mainglossary: None,
            name: None,
            rssarticles: None,
            rsstype: None,
            scale: None,
            section: None,
            showall: None,
            showalphabet: None,
            showspecial: None,
            timecreated: None,
            timemodified: None,
            usedynalink: None,
            visible: None,
        }
    }
}

