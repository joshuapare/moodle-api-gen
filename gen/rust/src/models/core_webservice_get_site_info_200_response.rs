/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreWebserviceGetSiteInfo200Response {
    #[serde(rename = "advancedfeatures", skip_serializing_if = "Option::is_none")]
    pub advancedfeatures: Option<Vec<models::CoreWebserviceGetSiteInfo200ResponseAdvancedfeaturesInner>>,
    /// 1 if users are allowed to download files, 0 if not
    #[serde(rename = "downloadfiles", skip_serializing_if = "Option::is_none")]
    pub downloadfiles: Option<i32>,
    /// first name
    #[serde(rename = "firstname")]
    pub firstname: String,
    /// user full name
    #[serde(rename = "fullname")]
    pub fullname: String,
    #[serde(rename = "functions")]
    pub functions: Vec<models::CoreWebserviceGetSiteInfo200ResponseFunctionsInner>,
    /// Current language.
    #[serde(rename = "lang")]
    pub lang: String,
    /// last name
    #[serde(rename = "lastname")]
    pub lastname: String,
    /// Number of concurrent sessions allowed
    #[serde(rename = "limitconcurrentlogins", skip_serializing_if = "Option::is_none")]
    pub limitconcurrentlogins: Option<i32>,
    /// Mobile custom CSS theme
    #[serde(rename = "mobilecssurl", skip_serializing_if = "Option::is_none")]
    pub mobilecssurl: Option<String>,
    /// Moodle release number
    #[serde(rename = "release", skip_serializing_if = "Option::is_none")]
    pub release: Option<String>,
    /// Calendar type set in the site.
    #[serde(rename = "sitecalendartype", skip_serializing_if = "Option::is_none")]
    pub sitecalendartype: Option<String>,
    /// Site course ID
    #[serde(rename = "siteid", skip_serializing_if = "Option::is_none")]
    pub siteid: Option<i32>,
    /// site name
    #[serde(rename = "sitename")]
    pub sitename: String,
    /// site url
    #[serde(rename = "siteurl")]
    pub siteurl: String,
    /// Current theme for the user.
    #[serde(rename = "theme", skip_serializing_if = "Option::is_none")]
    pub theme: Option<String>,
    /// 1 if users are allowed to upload files, 0 if not
    #[serde(rename = "uploadfiles", skip_serializing_if = "Option::is_none")]
    pub uploadfiles: Option<i32>,
    /// Calendar typed used by the user.
    #[serde(rename = "usercalendartype", skip_serializing_if = "Option::is_none")]
    pub usercalendartype: Option<String>,
    /// true if the user can manage his own files
    #[serde(rename = "usercanmanageownfiles", skip_serializing_if = "Option::is_none")]
    pub usercanmanageownfiles: Option<bool>,
    /// the default home page for the user: 0 for the site home, 1 for dashboard
    #[serde(rename = "userhomepage", skip_serializing_if = "Option::is_none")]
    pub userhomepage: Option<i32>,
    /// user id
    #[serde(rename = "userid")]
    pub userid: i32,
    /// Whether the user is a site admin or not.
    #[serde(rename = "userissiteadmin", skip_serializing_if = "Option::is_none")]
    pub userissiteadmin: Option<bool>,
    /// user max upload file size (bytes). -1 means the user can ignore the upload file size
    #[serde(rename = "usermaxuploadfilesize", skip_serializing_if = "Option::is_none")]
    pub usermaxuploadfilesize: Option<i32>,
    /// username
    #[serde(rename = "username")]
    pub username: String,
    /// the user profile picture.                     Warning: this url is the public URL that only works when forcelogin is set to NO and guestaccess is set to YES.                     In order to retrieve user profile pictures independently of the Moodle config, replace \"pluginfile.php\" by                     \"webservice/pluginfile.php?token=WSTOKEN&file=\"                     Of course the user can only see profile picture depending                     on his/her permissions. Moreover it is recommended to use HTTPS too.
    #[serde(rename = "userpictureurl")]
    pub userpictureurl: String,
    /// Private user access key for fetching files.
    #[serde(rename = "userprivateaccesskey", skip_serializing_if = "Option::is_none")]
    pub userprivateaccesskey: Option<String>,
    /// user quota (bytes). 0 means user can ignore the quota
    #[serde(rename = "userquota", skip_serializing_if = "Option::is_none")]
    pub userquota: Option<i32>,
    /// Number of active sessions for current user.                     Only returned when limitconcurrentlogins is used.
    #[serde(rename = "usersessionscount", skip_serializing_if = "Option::is_none")]
    pub usersessionscount: Option<i32>,
    /// Moodle version number
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

impl CoreWebserviceGetSiteInfo200Response {
    pub fn new(firstname: String, fullname: String, functions: Vec<models::CoreWebserviceGetSiteInfo200ResponseFunctionsInner>, lang: String, lastname: String, sitename: String, siteurl: String, userid: i32, username: String, userpictureurl: String) -> CoreWebserviceGetSiteInfo200Response {
        CoreWebserviceGetSiteInfo200Response {
            advancedfeatures: None,
            downloadfiles: None,
            firstname,
            fullname,
            functions,
            lang,
            lastname,
            limitconcurrentlogins: None,
            mobilecssurl: None,
            release: None,
            sitecalendartype: None,
            siteid: None,
            sitename,
            siteurl,
            theme: None,
            uploadfiles: None,
            usercalendartype: None,
            usercanmanageownfiles: None,
            userhomepage: None,
            userid,
            userissiteadmin: None,
            usermaxuploadfilesize: None,
            username,
            userpictureurl,
            userprivateaccesskey: None,
            userquota: None,
            usersessionscount: None,
            version: None,
        }
    }
}

