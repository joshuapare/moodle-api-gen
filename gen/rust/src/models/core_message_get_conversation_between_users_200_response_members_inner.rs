/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreMessageGetConversationBetweenUsers200ResponseMembersInner {
    /// If the user can be messaged
    #[serde(rename = "canmessage", skip_serializing_if = "Option::is_none")]
    pub canmessage: Option<bool>,
    /// If the user can still message even if they get blocked
    #[serde(rename = "canmessageevenifblocked", skip_serializing_if = "Option::is_none")]
    pub canmessageevenifblocked: Option<bool>,
    #[serde(rename = "contactrequests", skip_serializing_if = "Option::is_none")]
    pub contactrequests: Option<Vec<models::CoreMessageGetConversationBetweenUsers200ResponseMembersInnerContactrequestsInner>>,
    #[serde(rename = "conversations", skip_serializing_if = "Option::is_none")]
    pub conversations: Option<Vec<models::CoreMessageGetConversationBetweenUsers200ResponseMembersInnerConversationsInner>>,
    /// The user's name
    #[serde(rename = "fullname", skip_serializing_if = "Option::is_none")]
    pub fullname: Option<String>,
    /// The user id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// If the user has been blocked
    #[serde(rename = "isblocked", skip_serializing_if = "Option::is_none")]
    pub isblocked: Option<bool>,
    /// Is the user a contact?
    #[serde(rename = "iscontact", skip_serializing_if = "Option::is_none")]
    pub iscontact: Option<bool>,
    /// Is the user deleted?
    #[serde(rename = "isdeleted", skip_serializing_if = "Option::is_none")]
    pub isdeleted: Option<bool>,
    /// The user's online status
    #[serde(rename = "isonline", skip_serializing_if = "Option::is_none")]
    pub isonline: Option<bool>,
    /// User picture URL
    #[serde(rename = "profileimageurl", skip_serializing_if = "Option::is_none")]
    pub profileimageurl: Option<String>,
    /// Small user picture URL
    #[serde(rename = "profileimageurlsmall", skip_serializing_if = "Option::is_none")]
    pub profileimageurlsmall: Option<String>,
    /// The link to the user's profile page
    #[serde(rename = "profileurl", skip_serializing_if = "Option::is_none")]
    pub profileurl: Option<String>,
    /// If the user requires to be contacts
    #[serde(rename = "requirescontact", skip_serializing_if = "Option::is_none")]
    pub requirescontact: Option<bool>,
    /// Show the user's online status?
    #[serde(rename = "showonlinestatus", skip_serializing_if = "Option::is_none")]
    pub showonlinestatus: Option<bool>,
}

impl CoreMessageGetConversationBetweenUsers200ResponseMembersInner {
    pub fn new() -> CoreMessageGetConversationBetweenUsers200ResponseMembersInner {
        CoreMessageGetConversationBetweenUsers200ResponseMembersInner {
            canmessage: None,
            canmessageevenifblocked: None,
            contactrequests: None,
            conversations: None,
            fullname: None,
            id: None,
            isblocked: None,
            iscontact: None,
            isdeleted: None,
            isonline: None,
            profileimageurl: None,
            profileimageurlsmall: None,
            profileurl: None,
            requirescontact: None,
            showonlinestatus: None,
        }
    }
}

