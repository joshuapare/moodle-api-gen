/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// ModScormGetScormsByCourses200ResponseScormsInner : SCORM
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModScormGetScormsByCourses200ResponseScormsInner {
    /// Auto continue?
    #[serde(rename = "auto", skip_serializing_if = "Option::is_none")]
    pub auto: Option<bool>,
    /// Save track data automatically?
    #[serde(rename = "autocommit", skip_serializing_if = "Option::is_none")]
    pub autocommit: Option<bool>,
    /// Minimum score required
    #[serde(rename = "completionscorerequired", skip_serializing_if = "Option::is_none")]
    pub completionscorerequired: Option<i32>,
    /// Require all scos to return completion status
    #[serde(rename = "completionstatusallscos", skip_serializing_if = "Option::is_none")]
    pub completionstatusallscos: Option<i32>,
    /// Status passed/completed required?
    #[serde(rename = "completionstatusrequired", skip_serializing_if = "Option::is_none")]
    pub completionstatusrequired: Option<i32>,
    /// Course id
    #[serde(rename = "course", skip_serializing_if = "Option::is_none")]
    pub course: Option<i32>,
    /// Course module id
    #[serde(rename = "coursemodule", skip_serializing_if = "Option::is_none")]
    pub coursemodule: Option<i32>,
    /// How to display attempt status
    #[serde(rename = "displayattemptstatus", skip_serializing_if = "Option::is_none")]
    pub displayattemptstatus: Option<i32>,
    /// Display contents structure
    #[serde(rename = "displaycoursestructure", skip_serializing_if = "Option::is_none")]
    pub displaycoursestructure: Option<bool>,
    /// Status current attempt is forced to \"completed\"
    #[serde(rename = "forcecompleted", skip_serializing_if = "Option::is_none")]
    pub forcecompleted: Option<bool>,
    /// Controls re-entry behaviour
    #[serde(rename = "forcenewattempt", skip_serializing_if = "Option::is_none")]
    pub forcenewattempt: Option<i32>,
    /// Grade method
    #[serde(rename = "grademethod", skip_serializing_if = "Option::is_none")]
    pub grademethod: Option<i32>,
    /// Group id
    #[serde(rename = "groupingid", skip_serializing_if = "Option::is_none")]
    pub groupingid: Option<i32>,
    /// Group mode
    #[serde(rename = "groupmode", skip_serializing_if = "Option::is_none")]
    pub groupmode: Option<i32>,
    /// Frame height
    #[serde(rename = "height", skip_serializing_if = "Option::is_none")]
    pub height: Option<i32>,
    /// Disable preview mode?
    #[serde(rename = "hidebrowse", skip_serializing_if = "Option::is_none")]
    pub hidebrowse: Option<bool>,
    /// How to display the SCORM structure in player
    #[serde(rename = "hidetoc", skip_serializing_if = "Option::is_none")]
    pub hidetoc: Option<i32>,
    /// Activity instance id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Activity introduction
    #[serde(rename = "intro", skip_serializing_if = "Option::is_none")]
    pub intro: Option<String>,
    #[serde(rename = "introfiles", skip_serializing_if = "Option::is_none")]
    pub introfiles: Option<Vec<models::CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>>,
    /// intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "introformat", skip_serializing_if = "Option::is_none")]
    pub introformat: Option<i32>,
    /// Forced activity language
    #[serde(rename = "lang", skip_serializing_if = "Option::is_none")]
    pub lang: Option<String>,
    /// Prevents to launch new attempts once finished
    #[serde(rename = "lastattemptlock", skip_serializing_if = "Option::is_none")]
    pub lastattemptlock: Option<bool>,
    /// First content to launch
    #[serde(rename = "launch", skip_serializing_if = "Option::is_none")]
    pub launch: Option<i32>,
    /// Maximum number of attemtps
    #[serde(rename = "maxattempt", skip_serializing_if = "Option::is_none")]
    pub maxattempt: Option<i32>,
    /// Max grade
    #[serde(rename = "maxgrade", skip_serializing_if = "Option::is_none")]
    pub maxgrade: Option<i32>,
    /// MD5 Hash of package file
    #[serde(rename = "md5hash", skip_serializing_if = "Option::is_none")]
    pub md5hash: Option<String>,
    /// Activity name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Show navigation buttons
    #[serde(rename = "nav", skip_serializing_if = "Option::is_none")]
    pub nav: Option<i32>,
    /// Navigation position left
    #[serde(rename = "navpositionleft", skip_serializing_if = "Option::is_none")]
    pub navpositionleft: Option<i32>,
    /// Navigation position top
    #[serde(rename = "navpositiontop", skip_serializing_if = "Option::is_none")]
    pub navpositiontop: Option<i32>,
    /// Additional options
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<String>,
    /// SCORM zip package size
    #[serde(rename = "packagesize", skip_serializing_if = "Option::is_none")]
    pub packagesize: Option<i32>,
    /// SCORM zip package URL
    #[serde(rename = "packageurl", skip_serializing_if = "Option::is_none")]
    pub packageurl: Option<String>,
    /// Display in current or new window
    #[serde(rename = "popup", skip_serializing_if = "Option::is_none")]
    pub popup: Option<i32>,
    /// Protect package downloads?
    #[serde(rename = "protectpackagedownloads", skip_serializing_if = "Option::is_none")]
    pub protectpackagedownloads: Option<bool>,
    /// Reference to the package
    #[serde(rename = "reference", skip_serializing_if = "Option::is_none")]
    pub reference: Option<String>,
    /// Revison number
    #[serde(rename = "revision", skip_serializing_if = "Option::is_none")]
    pub revision: Option<i32>,
    /// SCORM type
    #[serde(rename = "scormtype", skip_serializing_if = "Option::is_none")]
    pub scormtype: Option<String>,
    /// Course section id
    #[serde(rename = "section", skip_serializing_if = "Option::is_none")]
    pub section: Option<i32>,
    /// Package content or ext path hash
    #[serde(rename = "sha1hash", skip_serializing_if = "Option::is_none")]
    pub sha1hash: Option<String>,
    /// How to skip the content structure page
    #[serde(rename = "skipview", skip_serializing_if = "Option::is_none")]
    pub skipview: Option<i32>,
    /// Available to
    #[serde(rename = "timeclose", skip_serializing_if = "Option::is_none")]
    pub timeclose: Option<i32>,
    /// Time of last modification
    #[serde(rename = "timemodified", skip_serializing_if = "Option::is_none")]
    pub timemodified: Option<i32>,
    /// Available from
    #[serde(rename = "timeopen", skip_serializing_if = "Option::is_none")]
    pub timeopen: Option<i32>,
    /// Auto-update frequency for remote packages
    #[serde(rename = "updatefreq", skip_serializing_if = "Option::is_none")]
    pub updatefreq: Option<i32>,
    /// SCORM version (SCORM_12, SCORM_13, SCORM_AICC)
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    /// Visible
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<bool>,
    /// What grade
    #[serde(rename = "whatgrade", skip_serializing_if = "Option::is_none")]
    pub whatgrade: Option<i32>,
    /// Frame width
    #[serde(rename = "width", skip_serializing_if = "Option::is_none")]
    pub width: Option<i32>,
}

impl ModScormGetScormsByCourses200ResponseScormsInner {
    /// SCORM
    pub fn new() -> ModScormGetScormsByCourses200ResponseScormsInner {
        ModScormGetScormsByCourses200ResponseScormsInner {
            auto: None,
            autocommit: None,
            completionscorerequired: None,
            completionstatusallscos: None,
            completionstatusrequired: None,
            course: None,
            coursemodule: None,
            displayattemptstatus: None,
            displaycoursestructure: None,
            forcecompleted: None,
            forcenewattempt: None,
            grademethod: None,
            groupingid: None,
            groupmode: None,
            height: None,
            hidebrowse: None,
            hidetoc: None,
            id: None,
            intro: None,
            introfiles: None,
            introformat: None,
            lang: None,
            lastattemptlock: None,
            launch: None,
            maxattempt: None,
            maxgrade: None,
            md5hash: None,
            name: None,
            nav: None,
            navpositionleft: None,
            navpositiontop: None,
            options: None,
            packagesize: None,
            packageurl: None,
            popup: None,
            protectpackagedownloads: None,
            reference: None,
            revision: None,
            scormtype: None,
            section: None,
            sha1hash: None,
            skipview: None,
            timeclose: None,
            timemodified: None,
            timeopen: None,
            updatefreq: None,
            version: None,
            visible: None,
            whatgrade: None,
            width: None,
        }
    }
}

