/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreCalendarGetActionEventsByCourseRequest {
    /// The last seen event id
    #[serde(rename = "aftereventid", skip_serializing_if = "Option::is_none")]
    pub aftereventid: Option<i32>,
    /// Course id
    #[serde(rename = "courseid")]
    pub courseid: i32,
    /// Limit number
    #[serde(rename = "limitnum", skip_serializing_if = "Option::is_none")]
    pub limitnum: Option<i32>,
    /// The value a user wishes to search against
    #[serde(rename = "searchvalue", skip_serializing_if = "Option::is_none")]
    pub searchvalue: Option<String>,
    /// Time sort from
    #[serde(rename = "timesortfrom", skip_serializing_if = "Option::is_none")]
    pub timesortfrom: Option<i32>,
    /// Time sort to
    #[serde(rename = "timesortto", skip_serializing_if = "Option::is_none")]
    pub timesortto: Option<i32>,
}

impl CoreCalendarGetActionEventsByCourseRequest {
    pub fn new(courseid: i32) -> CoreCalendarGetActionEventsByCourseRequest {
        CoreCalendarGetActionEventsByCourseRequest {
            aftereventid: None,
            courseid,
            limitnum: None,
            searchvalue: None,
            timesortfrom: None,
            timesortto: None,
        }
    }
}

