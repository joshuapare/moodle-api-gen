/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AuthEmailGetSignupSettings200Response {
    /// Default country
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// Default city
    #[serde(rename = "defaultcity", skip_serializing_if = "Option::is_none")]
    pub defaultcity: Option<String>,
    #[serde(rename = "namefields")]
    pub namefields: Vec<serde_json::Value>,
    /// Password policy
    #[serde(rename = "passwordpolicy", skip_serializing_if = "Option::is_none")]
    pub passwordpolicy: Option<String>,
    #[serde(rename = "profilefields", skip_serializing_if = "Option::is_none")]
    pub profilefields: Option<Vec<models::AuthEmailGetSignupSettings200ResponseProfilefieldsInner>>,
    /// Recaptcha challenge hash
    #[serde(rename = "recaptchachallengehash", skip_serializing_if = "Option::is_none")]
    pub recaptchachallengehash: Option<String>,
    /// Recaptcha challenge noscript image
    #[serde(rename = "recaptchachallengeimage", skip_serializing_if = "Option::is_none")]
    pub recaptchachallengeimage: Option<String>,
    /// Recaptcha challenge js url
    #[serde(rename = "recaptchachallengejs", skip_serializing_if = "Option::is_none")]
    pub recaptchachallengejs: Option<String>,
    /// Recaptcha public key
    #[serde(rename = "recaptchapublickey", skip_serializing_if = "Option::is_none")]
    pub recaptchapublickey: Option<String>,
    /// Site policy
    #[serde(rename = "sitepolicy", skip_serializing_if = "Option::is_none")]
    pub sitepolicy: Option<String>,
    /// Site policy handler
    #[serde(rename = "sitepolicyhandler", skip_serializing_if = "Option::is_none")]
    pub sitepolicyhandler: Option<String>,
    #[serde(rename = "warnings", skip_serializing_if = "Option::is_none")]
    pub warnings: Option<Vec<models::AuthEmailGetSignupSettings200ResponseWarningsInner>>,
}

impl AuthEmailGetSignupSettings200Response {
    pub fn new(namefields: Vec<serde_json::Value>) -> AuthEmailGetSignupSettings200Response {
        AuthEmailGetSignupSettings200Response {
            country: None,
            defaultcity: None,
            namefields,
            passwordpolicy: None,
            profilefields: None,
            recaptchachallengehash: None,
            recaptchachallengeimage: None,
            recaptchachallengejs: None,
            recaptchapublickey: None,
            sitepolicy: None,
            sitepolicyhandler: None,
            warnings: None,
        }
    }
}

