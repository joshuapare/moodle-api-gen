/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreCourseCreateCoursesRequestCoursesInner {
    /// category id
    #[serde(rename = "categoryid", skip_serializing_if = "Option::is_none")]
    pub categoryid: Option<i32>,
    /// 1: yes 0: no
    #[serde(rename = "completionnotify", skip_serializing_if = "Option::is_none")]
    pub completionnotify: Option<i32>,
    #[serde(rename = "courseformatoptions", skip_serializing_if = "Option::is_none")]
    pub courseformatoptions: Option<Vec<models::CoreCourseCreateCoursesRequestCoursesInnerCourseformatoptionsInner>>,
    #[serde(rename = "customfields", skip_serializing_if = "Option::is_none")]
    pub customfields: Option<Vec<models::CoreCohortUpdateCohortsRequestCohortsInnerCustomfieldsInner>>,
    /// default grouping id
    #[serde(rename = "defaultgroupingid", skip_serializing_if = "Option::is_none")]
    pub defaultgroupingid: Option<i32>,
    /// Enabled, control via completion and activity settings. Disabled,                                         not shown in activity settings.
    #[serde(rename = "enablecompletion", skip_serializing_if = "Option::is_none")]
    pub enablecompletion: Option<i32>,
    /// timestamp when the course end
    #[serde(rename = "enddate", skip_serializing_if = "Option::is_none")]
    pub enddate: Option<i32>,
    /// name of the force theme
    #[serde(rename = "forcetheme", skip_serializing_if = "Option::is_none")]
    pub forcetheme: Option<String>,
    /// course format: weeks, topics, social, site,..
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<String>,
    /// full name
    #[serde(rename = "fullname", skip_serializing_if = "Option::is_none")]
    pub fullname: Option<String>,
    /// no group, separate, visible
    #[serde(rename = "groupmode", skip_serializing_if = "Option::is_none")]
    pub groupmode: Option<i32>,
    /// 1: yes, 0: no
    #[serde(rename = "groupmodeforce", skip_serializing_if = "Option::is_none")]
    pub groupmodeforce: Option<i32>,
    /// (deprecated, use courseformatoptions) How the hidden sections in the course are displayed to students
    #[serde(rename = "hiddensections", skip_serializing_if = "Option::is_none")]
    pub hiddensections: Option<i32>,
    /// id number
    #[serde(rename = "idnumber", skip_serializing_if = "Option::is_none")]
    pub idnumber: Option<String>,
    /// forced course language
    #[serde(rename = "lang", skip_serializing_if = "Option::is_none")]
    pub lang: Option<String>,
    /// largest size of file that can be uploaded into the course
    #[serde(rename = "maxbytes", skip_serializing_if = "Option::is_none")]
    pub maxbytes: Option<i32>,
    /// number of recent items appearing on the course page
    #[serde(rename = "newsitems", skip_serializing_if = "Option::is_none")]
    pub newsitems: Option<i32>,
    /// (deprecated, use courseformatoptions) number of weeks/topics
    #[serde(rename = "numsections", skip_serializing_if = "Option::is_none")]
    pub numsections: Option<i32>,
    /// course short name
    #[serde(rename = "shortname", skip_serializing_if = "Option::is_none")]
    pub shortname: Option<String>,
    /// 1 if grades are shown, otherwise 0
    #[serde(rename = "showgrades", skip_serializing_if = "Option::is_none")]
    pub showgrades: Option<i32>,
    /// are activity report shown (yes = 1, no =0)
    #[serde(rename = "showreports", skip_serializing_if = "Option::is_none")]
    pub showreports: Option<i32>,
    /// timestamp when the course start
    #[serde(rename = "startdate", skip_serializing_if = "Option::is_none")]
    pub startdate: Option<i32>,
    /// summary
    #[serde(rename = "summary", skip_serializing_if = "Option::is_none")]
    pub summary: Option<String>,
    /// summary format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "summaryformat", skip_serializing_if = "Option::is_none")]
    pub summaryformat: Option<i32>,
    /// 1: available to student, 0:not available
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<i32>,
}

impl CoreCourseCreateCoursesRequestCoursesInner {
    pub fn new() -> CoreCourseCreateCoursesRequestCoursesInner {
        CoreCourseCreateCoursesRequestCoursesInner {
            categoryid: None,
            completionnotify: None,
            courseformatoptions: None,
            customfields: None,
            defaultgroupingid: None,
            enablecompletion: None,
            enddate: None,
            forcetheme: None,
            format: None,
            fullname: None,
            groupmode: None,
            groupmodeforce: None,
            hiddensections: None,
            idnumber: None,
            lang: None,
            maxbytes: None,
            newsitems: None,
            numsections: None,
            shortname: None,
            showgrades: None,
            showreports: None,
            startdate: None,
            summary: None,
            summaryformat: None,
            visible: None,
        }
    }
}

