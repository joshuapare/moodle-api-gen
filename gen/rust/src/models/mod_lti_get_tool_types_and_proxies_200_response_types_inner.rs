/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// ModLtiGetToolTypesAndProxies200ResponseTypesInner : Tool
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModLtiGetToolTypesAndProxies200ResponseTypesInner {
    #[serde(rename = "capabilitygroups", skip_serializing_if = "Option::is_none")]
    pub capabilitygroups: Option<Vec<serde_json::Value>>,
    /// Client ID
    #[serde(rename = "clientid", skip_serializing_if = "Option::is_none")]
    pub clientid: Option<String>,
    /// Tool type course
    #[serde(rename = "courseid", skip_serializing_if = "Option::is_none")]
    pub courseid: Option<i32>,
    /// Deployment ID
    #[serde(rename = "deploymentid", skip_serializing_if = "Option::is_none")]
    pub deploymentid: Option<i32>,
    /// Tool type description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Indicate if capabilitygroups is populated
    #[serde(rename = "hascapabilitygroups", skip_serializing_if = "Option::is_none")]
    pub hascapabilitygroups: Option<bool>,
    /// Tool type id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// The number of times this tool is being used
    #[serde(rename = "instancecount", skip_serializing_if = "Option::is_none")]
    pub instancecount: Option<i32>,
    #[serde(rename = "instanceids", skip_serializing_if = "Option::is_none")]
    pub instanceids: Option<Vec<serde_json::Value>>,
    /// Tool type name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Platform ID
    #[serde(rename = "platformid", skip_serializing_if = "Option::is_none")]
    pub platformid: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<Box<models::ModLtiGetToolTypesAndProxies200ResponseTypesInnerState>>,
    #[serde(rename = "urls", skip_serializing_if = "Option::is_none")]
    pub urls: Option<Box<models::ModLtiGetToolTypesAndProxies200ResponseTypesInnerUrls>>,
}

impl ModLtiGetToolTypesAndProxies200ResponseTypesInner {
    /// Tool
    pub fn new() -> ModLtiGetToolTypesAndProxies200ResponseTypesInner {
        ModLtiGetToolTypesAndProxies200ResponseTypesInner {
            capabilitygroups: None,
            clientid: None,
            courseid: None,
            deploymentid: None,
            description: None,
            hascapabilitygroups: None,
            id: None,
            instancecount: None,
            instanceids: None,
            name: None,
            platformid: None,
            state: None,
            urls: None,
        }
    }
}

