/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreCalendarGetActionEventsByCourse200ResponseEventsInner {
    #[serde(rename = "action", skip_serializing_if = "Option::is_none")]
    pub action: Option<Box<models::CoreCalendarGetActionEventsByCourse200ResponseEventsInnerAction>>,
    /// activityname
    #[serde(rename = "activityname", skip_serializing_if = "Option::is_none")]
    pub activityname: Option<String>,
    /// activitystr
    #[serde(rename = "activitystr", skip_serializing_if = "Option::is_none")]
    pub activitystr: Option<String>,
    /// candelete
    #[serde(rename = "candelete", skip_serializing_if = "Option::is_none")]
    pub candelete: Option<bool>,
    /// canedit
    #[serde(rename = "canedit", skip_serializing_if = "Option::is_none")]
    pub canedit: Option<bool>,
    #[serde(rename = "category", skip_serializing_if = "Option::is_none")]
    pub category: Option<Box<models::CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCategory>>,
    /// categoryid
    #[serde(rename = "categoryid", skip_serializing_if = "Option::is_none")]
    pub categoryid: Option<i32>,
    /// component
    #[serde(rename = "component", skip_serializing_if = "Option::is_none")]
    pub component: Option<String>,
    #[serde(rename = "course", skip_serializing_if = "Option::is_none")]
    pub course: Option<Box<models::CoreCalendarGetActionEventsByCourse200ResponseEventsInnerCourse>>,
    /// deleteurl
    #[serde(rename = "deleteurl", skip_serializing_if = "Option::is_none")]
    pub deleteurl: Option<String>,
    /// description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// description format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "descriptionformat", skip_serializing_if = "Option::is_none")]
    pub descriptionformat: Option<i32>,
    /// editurl
    #[serde(rename = "editurl", skip_serializing_if = "Option::is_none")]
    pub editurl: Option<String>,
    /// eventcount
    #[serde(rename = "eventcount", skip_serializing_if = "Option::is_none")]
    pub eventcount: Option<i32>,
    /// eventtype
    #[serde(rename = "eventtype", skip_serializing_if = "Option::is_none")]
    pub eventtype: Option<String>,
    /// formattedlocation
    #[serde(rename = "formattedlocation", skip_serializing_if = "Option::is_none")]
    pub formattedlocation: Option<String>,
    /// formattedtime
    #[serde(rename = "formattedtime", skip_serializing_if = "Option::is_none")]
    pub formattedtime: Option<String>,
    /// groupid
    #[serde(rename = "groupid", skip_serializing_if = "Option::is_none")]
    pub groupid: Option<i32>,
    /// groupname
    #[serde(rename = "groupname", skip_serializing_if = "Option::is_none")]
    pub groupname: Option<String>,
    #[serde(rename = "icon", skip_serializing_if = "Option::is_none")]
    pub icon: Option<Box<models::CoreCalendarGetActionEventsByCourse200ResponseEventsInnerIcon>>,
    /// id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// instance
    #[serde(rename = "instance", skip_serializing_if = "Option::is_none")]
    pub instance: Option<i32>,
    /// isactionevent
    #[serde(rename = "isactionevent", skip_serializing_if = "Option::is_none")]
    pub isactionevent: Option<bool>,
    /// iscategoryevent
    #[serde(rename = "iscategoryevent", skip_serializing_if = "Option::is_none")]
    pub iscategoryevent: Option<bool>,
    /// iscourseevent
    #[serde(rename = "iscourseevent", skip_serializing_if = "Option::is_none")]
    pub iscourseevent: Option<bool>,
    /// location
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// modulename
    #[serde(rename = "modulename", skip_serializing_if = "Option::is_none")]
    pub modulename: Option<String>,
    /// name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// normalisedeventtype
    #[serde(rename = "normalisedeventtype", skip_serializing_if = "Option::is_none")]
    pub normalisedeventtype: Option<String>,
    /// normalisedeventtypetext
    #[serde(rename = "normalisedeventtypetext", skip_serializing_if = "Option::is_none")]
    pub normalisedeventtypetext: Option<String>,
    /// overdue
    #[serde(rename = "overdue", skip_serializing_if = "Option::is_none")]
    pub overdue: Option<bool>,
    /// purpose
    #[serde(rename = "purpose", skip_serializing_if = "Option::is_none")]
    pub purpose: Option<String>,
    /// repeatid
    #[serde(rename = "repeatid", skip_serializing_if = "Option::is_none")]
    pub repeatid: Option<i32>,
    #[serde(rename = "subscription", skip_serializing_if = "Option::is_none")]
    pub subscription: Option<Box<models::CoreCalendarGetActionEventsByCourse200ResponseEventsInnerSubscription>>,
    /// timeduration
    #[serde(rename = "timeduration", skip_serializing_if = "Option::is_none")]
    pub timeduration: Option<i32>,
    /// timemodified
    #[serde(rename = "timemodified", skip_serializing_if = "Option::is_none")]
    pub timemodified: Option<i32>,
    /// timesort
    #[serde(rename = "timesort", skip_serializing_if = "Option::is_none")]
    pub timesort: Option<i32>,
    /// timestart
    #[serde(rename = "timestart", skip_serializing_if = "Option::is_none")]
    pub timestart: Option<i32>,
    /// timeusermidnight
    #[serde(rename = "timeusermidnight", skip_serializing_if = "Option::is_none")]
    pub timeusermidnight: Option<i32>,
    /// url
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// userid
    #[serde(rename = "userid", skip_serializing_if = "Option::is_none")]
    pub userid: Option<i32>,
    /// viewurl
    #[serde(rename = "viewurl", skip_serializing_if = "Option::is_none")]
    pub viewurl: Option<String>,
    /// visible
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<i32>,
}

impl CoreCalendarGetActionEventsByCourse200ResponseEventsInner {
    pub fn new() -> CoreCalendarGetActionEventsByCourse200ResponseEventsInner {
        CoreCalendarGetActionEventsByCourse200ResponseEventsInner {
            action: None,
            activityname: None,
            activitystr: None,
            candelete: None,
            canedit: None,
            category: None,
            categoryid: None,
            component: None,
            course: None,
            deleteurl: None,
            description: None,
            descriptionformat: None,
            editurl: None,
            eventcount: None,
            eventtype: None,
            formattedlocation: None,
            formattedtime: None,
            groupid: None,
            groupname: None,
            icon: None,
            id: None,
            instance: None,
            isactionevent: None,
            iscategoryevent: None,
            iscourseevent: None,
            location: None,
            modulename: None,
            name: None,
            normalisedeventtype: None,
            normalisedeventtypetext: None,
            overdue: None,
            purpose: None,
            repeatid: None,
            subscription: None,
            timeduration: None,
            timemodified: None,
            timesort: None,
            timestart: None,
            timeusermidnight: None,
            url: None,
            userid: None,
            viewurl: None,
            visible: None,
        }
    }
}

