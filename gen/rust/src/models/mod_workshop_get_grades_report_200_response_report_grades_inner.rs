/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModWorkshopGetGradesReport200ResponseReportGradesInner {
    /// Computed grade for the assessment.
    #[serde(rename = "gradinggrade", skip_serializing_if = "Option::is_none")]
    pub gradinggrade: Option<f64>,
    #[serde(rename = "reviewedby", skip_serializing_if = "Option::is_none")]
    pub reviewedby: Option<Vec<models::ModWorkshopGetGradesReport200ResponseReportGradesInnerReviewedbyInner>>,
    #[serde(rename = "reviewerof", skip_serializing_if = "Option::is_none")]
    pub reviewerof: Option<Vec<models::ModWorkshopGetGradesReport200ResponseReportGradesInnerReviewerofInner>>,
    /// Aggregated grade for the submission.
    #[serde(rename = "submissiongrade", skip_serializing_if = "Option::is_none")]
    pub submissiongrade: Option<f64>,
    /// Grade for the assessment overrided                                         by the teacher.
    #[serde(rename = "submissiongradeover", skip_serializing_if = "Option::is_none")]
    pub submissiongradeover: Option<f64>,
    /// The id of the user who overrided                                         the grade.
    #[serde(rename = "submissiongradeoverby", skip_serializing_if = "Option::is_none")]
    pub submissiongradeoverby: Option<i32>,
    /// Submission id.
    #[serde(rename = "submissionid", skip_serializing_if = "Option::is_none")]
    pub submissionid: Option<i32>,
    /// Timestamp submission was updated.
    #[serde(rename = "submissionmodified", skip_serializing_if = "Option::is_none")]
    pub submissionmodified: Option<i32>,
    /// Whether is a submission published.
    #[serde(rename = "submissionpublished", skip_serializing_if = "Option::is_none")]
    pub submissionpublished: Option<i32>,
    /// Submission title.
    #[serde(rename = "submissiontitle", skip_serializing_if = "Option::is_none")]
    pub submissiontitle: Option<String>,
    /// The id of the user being displayed in the report.
    #[serde(rename = "userid", skip_serializing_if = "Option::is_none")]
    pub userid: Option<i32>,
}

impl ModWorkshopGetGradesReport200ResponseReportGradesInner {
    pub fn new() -> ModWorkshopGetGradesReport200ResponseReportGradesInner {
        ModWorkshopGetGradesReport200ResponseReportGradesInner {
            gradinggrade: None,
            reviewedby: None,
            reviewerof: None,
            submissiongrade: None,
            submissiongradeover: None,
            submissiongradeoverby: None,
            submissionid: None,
            submissionmodified: None,
            submissionpublished: None,
            submissiontitle: None,
            userid: None,
        }
    }
}

