/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// CoreCalendarGetCalendarEvents200ResponseEventsInner : event
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreCalendarGetCalendarEvents200ResponseEventsInner {
    /// Category id (only for category events).
    #[serde(rename = "categoryid", skip_serializing_if = "Option::is_none")]
    pub categoryid: Option<i32>,
    /// course id
    #[serde(rename = "courseid", skip_serializing_if = "Option::is_none")]
    pub courseid: Option<i32>,
    /// Description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Event type
    #[serde(rename = "eventtype", skip_serializing_if = "Option::is_none")]
    pub eventtype: Option<String>,
    /// description format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "format", skip_serializing_if = "Option::is_none")]
    pub format: Option<i32>,
    /// group id
    #[serde(rename = "groupid", skip_serializing_if = "Option::is_none")]
    pub groupid: Option<i32>,
    /// event id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// instance id
    #[serde(rename = "instance", skip_serializing_if = "Option::is_none")]
    pub instance: Option<i32>,
    /// module name
    #[serde(rename = "modulename", skip_serializing_if = "Option::is_none")]
    pub modulename: Option<String>,
    /// event name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// repeat id
    #[serde(rename = "repeatid", skip_serializing_if = "Option::is_none")]
    pub repeatid: Option<i32>,
    /// sequence
    #[serde(rename = "sequence", skip_serializing_if = "Option::is_none")]
    pub sequence: Option<i32>,
    /// Subscription id
    #[serde(rename = "subscriptionid", skip_serializing_if = "Option::is_none")]
    pub subscriptionid: Option<i32>,
    /// time duration
    #[serde(rename = "timeduration", skip_serializing_if = "Option::is_none")]
    pub timeduration: Option<i32>,
    /// time modified
    #[serde(rename = "timemodified", skip_serializing_if = "Option::is_none")]
    pub timemodified: Option<i32>,
    /// timestart
    #[serde(rename = "timestart", skip_serializing_if = "Option::is_none")]
    pub timestart: Option<i32>,
    /// user id
    #[serde(rename = "userid", skip_serializing_if = "Option::is_none")]
    pub userid: Option<i32>,
    /// unique id of ical events
    #[serde(rename = "uuid", skip_serializing_if = "Option::is_none")]
    pub uuid: Option<String>,
    /// visible
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<i32>,
}

impl CoreCalendarGetCalendarEvents200ResponseEventsInner {
    /// event
    pub fn new() -> CoreCalendarGetCalendarEvents200ResponseEventsInner {
        CoreCalendarGetCalendarEvents200ResponseEventsInner {
            categoryid: None,
            courseid: None,
            description: None,
            eventtype: None,
            format: None,
            groupid: None,
            id: None,
            instance: None,
            modulename: None,
            name: None,
            repeatid: None,
            sequence: None,
            subscriptionid: None,
            timeduration: None,
            timemodified: None,
            timestart: None,
            userid: None,
            uuid: None,
            visible: None,
        }
    }
}

