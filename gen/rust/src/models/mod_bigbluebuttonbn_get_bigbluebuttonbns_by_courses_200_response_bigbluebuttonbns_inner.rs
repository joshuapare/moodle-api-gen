/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200ResponseBigbluebuttonbnsInner {
    /// Course id
    #[serde(rename = "course", skip_serializing_if = "Option::is_none")]
    pub course: Option<i32>,
    /// Course module id
    #[serde(rename = "coursemodule", skip_serializing_if = "Option::is_none")]
    pub coursemodule: Option<i32>,
    /// Group id
    #[serde(rename = "groupingid", skip_serializing_if = "Option::is_none")]
    pub groupingid: Option<i32>,
    /// Group mode
    #[serde(rename = "groupmode", skip_serializing_if = "Option::is_none")]
    pub groupmode: Option<i32>,
    /// Activity instance id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Activity introduction
    #[serde(rename = "intro", skip_serializing_if = "Option::is_none")]
    pub intro: Option<String>,
    #[serde(rename = "introfiles", skip_serializing_if = "Option::is_none")]
    pub introfiles: Option<Vec<models::CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>>,
    /// intro format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "introformat", skip_serializing_if = "Option::is_none")]
    pub introformat: Option<i32>,
    /// Forced activity language
    #[serde(rename = "lang", skip_serializing_if = "Option::is_none")]
    pub lang: Option<String>,
    /// Meeting id
    #[serde(rename = "meetingid", skip_serializing_if = "Option::is_none")]
    pub meetingid: Option<String>,
    /// Activity name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Course section id
    #[serde(rename = "section", skip_serializing_if = "Option::is_none")]
    pub section: Option<i32>,
    /// Last time the instance was modified
    #[serde(rename = "timemodified", skip_serializing_if = "Option::is_none")]
    pub timemodified: Option<i32>,
    /// Visible
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<bool>,
}

impl ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200ResponseBigbluebuttonbnsInner {
    pub fn new() -> ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200ResponseBigbluebuttonbnsInner {
        ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200ResponseBigbluebuttonbnsInner {
            course: None,
            coursemodule: None,
            groupingid: None,
            groupmode: None,
            id: None,
            intro: None,
            introfiles: None,
            introformat: None,
            lang: None,
            meetingid: None,
            name: None,
            section: None,
            timemodified: None,
            visible: None,
        }
    }
}

