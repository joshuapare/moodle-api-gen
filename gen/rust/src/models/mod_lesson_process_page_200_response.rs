/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModLessonProcessPage200Response {
    /// Number of attempts remaining.
    #[serde(rename = "attemptsremaining")]
    pub attemptsremaining: i32,
    /// Whether the answer is correct.
    #[serde(rename = "correctanswer")]
    pub correctanswer: bool,
    /// Whether we should display the menu or not in this page.
    #[serde(rename = "displaymenu")]
    pub displaymenu: bool,
    /// The response feedback.
    #[serde(rename = "feedback")]
    pub feedback: String,
    /// Whether the page processing redirect directly to anoter page.
    #[serde(rename = "inmediatejump")]
    pub inmediatejump: bool,
    /// Whether is a essay question.
    #[serde(rename = "isessayquestion")]
    pub isessayquestion: bool,
    /// Whether we reachered the max number of attempts.
    #[serde(rename = "maxattemptsreached")]
    pub maxattemptsreached: bool,
    #[serde(rename = "messages")]
    pub messages: Vec<models::ModLessonGetPageData200ResponseMessagesInner>,
    /// New page id (if a jump was made).
    #[serde(rename = "newpageid")]
    pub newpageid: i32,
    /// Whether there aren't answers.
    #[serde(rename = "noanswer")]
    pub noanswer: bool,
    /// Whether there is not a default response.
    #[serde(rename = "nodefaultresponse")]
    pub nodefaultresponse: bool,
    /// The ongoing message.
    #[serde(rename = "ongoingscore")]
    pub ongoingscore: String,
    /// Progress percentage in the lesson.
    #[serde(rename = "progress")]
    pub progress: i32,
    /// The response.
    #[serde(rename = "response")]
    pub response: String,
    /// Whether the user is reviewing.
    #[serde(rename = "reviewmode")]
    pub reviewmode: bool,
    /// The student answer.
    #[serde(rename = "studentanswer")]
    pub studentanswer: String,
    /// The user response.
    #[serde(rename = "userresponse")]
    pub userresponse: String,
    #[serde(rename = "warnings", skip_serializing_if = "Option::is_none")]
    pub warnings: Option<Vec<models::AuthEmailSignupUser200ResponseWarningsInner>>,
}

impl ModLessonProcessPage200Response {
    pub fn new(attemptsremaining: i32, correctanswer: bool, displaymenu: bool, feedback: String, inmediatejump: bool, isessayquestion: bool, maxattemptsreached: bool, messages: Vec<models::ModLessonGetPageData200ResponseMessagesInner>, newpageid: i32, noanswer: bool, nodefaultresponse: bool, ongoingscore: String, progress: i32, response: String, reviewmode: bool, studentanswer: String, userresponse: String) -> ModLessonProcessPage200Response {
        ModLessonProcessPage200Response {
            attemptsremaining,
            correctanswer,
            displaymenu,
            feedback,
            inmediatejump,
            isessayquestion,
            maxattemptsreached,
            messages,
            newpageid,
            noanswer,
            nodefaultresponse,
            ongoingscore,
            progress,
            response,
            reviewmode,
            studentanswer,
            userresponse,
            warnings: None,
        }
    }
}

