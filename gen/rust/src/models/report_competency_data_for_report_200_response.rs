/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ReportCompetencyDataForReport200Response {
    #[serde(rename = "course")]
    pub course: Box<models::CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse>,
    /// Course id
    #[serde(rename = "courseid")]
    pub courseid: i32,
    /// True if rating is push to user plans
    #[serde(rename = "pushratingstouserplans")]
    pub pushratingstouserplans: bool,
    #[serde(rename = "user")]
    pub user: Box<models::CoreCompetencyGradeCompetency200ResponseActionuser>,
    #[serde(rename = "usercompetencies")]
    pub usercompetencies: Vec<models::ReportCompetencyDataForReport200ResponseUsercompetenciesInner>,
}

impl ReportCompetencyDataForReport200Response {
    pub fn new(course: models::CoreCalendarGetActionEventsByCourses200ResponseGroupedbycourseInnerEventsInnerCourse, courseid: i32, pushratingstouserplans: bool, user: models::CoreCompetencyGradeCompetency200ResponseActionuser, usercompetencies: Vec<models::ReportCompetencyDataForReport200ResponseUsercompetenciesInner>) -> ReportCompetencyDataForReport200Response {
        ReportCompetencyDataForReport200Response {
            course: Box::new(course),
            courseid,
            pushratingstouserplans,
            user: Box::new(user),
            usercompetencies,
        }
    }
}

