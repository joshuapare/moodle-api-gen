/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreBadgesGetUserBadgeByHash200ResponseBadgeInner {
    #[serde(rename = "alignment", skip_serializing_if = "Option::is_none")]
    pub alignment: Option<Vec<models::CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner>>,
    /// Attachment
    #[serde(rename = "attachment", skip_serializing_if = "Option::is_none")]
    pub attachment: Option<i32>,
    /// Badge URL
    #[serde(rename = "badgeurl", skip_serializing_if = "Option::is_none")]
    pub badgeurl: Option<String>,
    /// Course id
    #[serde(rename = "courseid", skip_serializing_if = "Option::is_none")]
    pub courseid: Option<i32>,
    /// Date expire
    #[serde(rename = "dateexpire", skip_serializing_if = "Option::is_none")]
    pub dateexpire: Option<i32>,
    /// Date issued
    #[serde(rename = "dateissued", skip_serializing_if = "Option::is_none")]
    pub dateissued: Option<i32>,
    /// Badge description
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// User email
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "endorsement", skip_serializing_if = "Option::is_none")]
    pub endorsement: Option<Box<models::CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement>>,
    /// Expire date
    #[serde(rename = "expiredate", skip_serializing_if = "Option::is_none")]
    pub expiredate: Option<i32>,
    /// Expire period
    #[serde(rename = "expireperiod", skip_serializing_if = "Option::is_none")]
    pub expireperiod: Option<i32>,
    /// Badge id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Email of the image author
    #[serde(rename = "imageauthoremail", skip_serializing_if = "Option::is_none")]
    pub imageauthoremail: Option<String>,
    /// Name of the image author
    #[serde(rename = "imageauthorname", skip_serializing_if = "Option::is_none")]
    pub imageauthorname: Option<String>,
    /// URL of the image author
    #[serde(rename = "imageauthorurl", skip_serializing_if = "Option::is_none")]
    pub imageauthorurl: Option<String>,
    /// Caption of the image
    #[serde(rename = "imagecaption", skip_serializing_if = "Option::is_none")]
    pub imagecaption: Option<String>,
    /// Issued id
    #[serde(rename = "issuedid", skip_serializing_if = "Option::is_none")]
    pub issuedid: Option<i32>,
    /// Issuer contact
    #[serde(rename = "issuercontact", skip_serializing_if = "Option::is_none")]
    pub issuercontact: Option<String>,
    /// Issuer name
    #[serde(rename = "issuername", skip_serializing_if = "Option::is_none")]
    pub issuername: Option<String>,
    /// Issuer URL
    #[serde(rename = "issuerurl", skip_serializing_if = "Option::is_none")]
    pub issuerurl: Option<String>,
    /// Language
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<String>,
    /// Message
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Message subject
    #[serde(rename = "messagesubject", skip_serializing_if = "Option::is_none")]
    pub messagesubject: Option<String>,
    /// Badge name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Next cron
    #[serde(rename = "nextcron", skip_serializing_if = "Option::is_none")]
    pub nextcron: Option<i32>,
    /// Whether to notify when badge is awarded
    #[serde(rename = "notification", skip_serializing_if = "Option::is_none")]
    pub notification: Option<i32>,
    #[serde(rename = "relatedbadges", skip_serializing_if = "Option::is_none")]
    pub relatedbadges: Option<Vec<models::CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInner>>,
    /// Status
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<i32>,
    /// Time created
    #[serde(rename = "timecreated", skip_serializing_if = "Option::is_none")]
    pub timecreated: Option<i32>,
    /// Time modified
    #[serde(rename = "timemodified", skip_serializing_if = "Option::is_none")]
    pub timemodified: Option<i32>,
    /// Type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<i32>,
    /// Unique hash
    #[serde(rename = "uniquehash", skip_serializing_if = "Option::is_none")]
    pub uniquehash: Option<String>,
    /// User created
    #[serde(rename = "usercreated", skip_serializing_if = "Option::is_none")]
    pub usercreated: Option<i32>,
    /// User modified
    #[serde(rename = "usermodified", skip_serializing_if = "Option::is_none")]
    pub usermodified: Option<i32>,
    /// Version
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    /// Visible
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<i32>,
}

impl CoreBadgesGetUserBadgeByHash200ResponseBadgeInner {
    pub fn new() -> CoreBadgesGetUserBadgeByHash200ResponseBadgeInner {
        CoreBadgesGetUserBadgeByHash200ResponseBadgeInner {
            alignment: None,
            attachment: None,
            badgeurl: None,
            courseid: None,
            dateexpire: None,
            dateissued: None,
            description: None,
            email: None,
            endorsement: None,
            expiredate: None,
            expireperiod: None,
            id: None,
            imageauthoremail: None,
            imageauthorname: None,
            imageauthorurl: None,
            imagecaption: None,
            issuedid: None,
            issuercontact: None,
            issuername: None,
            issuerurl: None,
            language: None,
            message: None,
            messagesubject: None,
            name: None,
            nextcron: None,
            notification: None,
            relatedbadges: None,
            status: None,
            timecreated: None,
            timemodified: None,
            r#type: None,
            uniquehash: None,
            usercreated: None,
            usermodified: None,
            version: None,
            visible: None,
        }
    }
}

