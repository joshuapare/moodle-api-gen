/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModQuizGetAttemptReview200ResponseAttempt {
    /// Sequentially numbers this students attempts at this quiz.
    #[serde(rename = "attempt", skip_serializing_if = "Option::is_none")]
    pub attempt: Option<i32>,
    /// Attempt current page.
    #[serde(rename = "currentpage", skip_serializing_if = "Option::is_none")]
    pub currentpage: Option<i32>,
    /// Time when the student was notified that manual grading of their attempt was complete.
    #[serde(rename = "gradednotificationsenttime", skip_serializing_if = "Option::is_none")]
    pub gradednotificationsenttime: Option<i32>,
    /// Attempt id.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Attempt layout.
    #[serde(rename = "layout", skip_serializing_if = "Option::is_none")]
    pub layout: Option<String>,
    /// Whether is a preview attempt or not.
    #[serde(rename = "preview", skip_serializing_if = "Option::is_none")]
    pub preview: Option<i32>,
    /// Foreign key reference to the quiz that was attempted.
    #[serde(rename = "quiz", skip_serializing_if = "Option::is_none")]
    pub quiz: Option<i32>,
    /// The current state of the attempts. 'inprogress',                                                 'overdue', 'finished' or 'abandoned'.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Total marks for this attempt.
    #[serde(rename = "sumgrades", skip_serializing_if = "Option::is_none")]
    pub sumgrades: Option<f64>,
    /// Next time quiz cron should check attempt for                                                         state changes.  NULL means never check.
    #[serde(rename = "timecheckstate", skip_serializing_if = "Option::is_none")]
    pub timecheckstate: Option<i32>,
    /// Time when the attempt was submitted.                                                     0 if the attempt has not been submitted yet.
    #[serde(rename = "timefinish", skip_serializing_if = "Option::is_none")]
    pub timefinish: Option<i32>,
    /// Last modified time.
    #[serde(rename = "timemodified", skip_serializing_if = "Option::is_none")]
    pub timemodified: Option<i32>,
    /// Last modified time via webservices.
    #[serde(rename = "timemodifiedoffline", skip_serializing_if = "Option::is_none")]
    pub timemodifiedoffline: Option<i32>,
    /// Time when the attempt was started.
    #[serde(rename = "timestart", skip_serializing_if = "Option::is_none")]
    pub timestart: Option<i32>,
    /// Foreign key reference to the question_usage that holds the                                                     details of the the question_attempts that make up this quiz                                                     attempt.
    #[serde(rename = "uniqueid", skip_serializing_if = "Option::is_none")]
    pub uniqueid: Option<i32>,
    /// Foreign key reference to the user whose attempt this is.
    #[serde(rename = "userid", skip_serializing_if = "Option::is_none")]
    pub userid: Option<i32>,
}

impl ModQuizGetAttemptReview200ResponseAttempt {
    pub fn new() -> ModQuizGetAttemptReview200ResponseAttempt {
        ModQuizGetAttemptReview200ResponseAttempt {
            attempt: None,
            currentpage: None,
            gradednotificationsenttime: None,
            id: None,
            layout: None,
            preview: None,
            quiz: None,
            state: None,
            sumgrades: None,
            timecheckstate: None,
            timefinish: None,
            timemodified: None,
            timemodifiedoffline: None,
            timestart: None,
            uniqueid: None,
            userid: None,
        }
    }
}

