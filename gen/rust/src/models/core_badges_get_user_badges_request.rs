/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreBadgesGetUserBadgesRequest {
    /// Filter badges by course id, empty all the courses
    #[serde(rename = "courseid", skip_serializing_if = "Option::is_none")]
    pub courseid: Option<i32>,
    /// Whether to return only public badges
    #[serde(rename = "onlypublic", skip_serializing_if = "Option::is_none")]
    pub onlypublic: Option<bool>,
    /// The page of records to return.
    #[serde(rename = "page", skip_serializing_if = "Option::is_none")]
    pub page: Option<i32>,
    /// The number of records to return per page
    #[serde(rename = "perpage", skip_serializing_if = "Option::is_none")]
    pub perpage: Option<i32>,
    /// A simple string to search for
    #[serde(rename = "search", skip_serializing_if = "Option::is_none")]
    pub search: Option<String>,
    /// Badges only for this user id, empty for current user
    #[serde(rename = "userid", skip_serializing_if = "Option::is_none")]
    pub userid: Option<i32>,
}

impl CoreBadgesGetUserBadgesRequest {
    pub fn new() -> CoreBadgesGetUserBadgesRequest {
        CoreBadgesGetUserBadgesRequest {
            courseid: None,
            onlypublic: None,
            page: None,
            perpage: None,
            search: None,
            userid: None,
        }
    }
}

