/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreCourseSearchCourses200ResponseCoursesInner {
    /// category id
    #[serde(rename = "categoryid", skip_serializing_if = "Option::is_none")]
    pub categoryid: Option<i32>,
    /// category name
    #[serde(rename = "categoryname", skip_serializing_if = "Option::is_none")]
    pub categoryname: Option<String>,
    #[serde(rename = "contacts", skip_serializing_if = "Option::is_none")]
    pub contacts: Option<Vec<models::CoreCourseSearchCourses200ResponseCoursesInnerContactsInner>>,
    /// Course image
    #[serde(rename = "courseimage", skip_serializing_if = "Option::is_none")]
    pub courseimage: Option<String>,
    #[serde(rename = "customfields", skip_serializing_if = "Option::is_none")]
    pub customfields: Option<Vec<models::CoreCourseGetCoursesByField200ResponseCoursesInnerCustomfieldsInner>>,
    /// course display name
    #[serde(rename = "displayname", skip_serializing_if = "Option::is_none")]
    pub displayname: Option<String>,
    #[serde(rename = "enrollmentmethods", skip_serializing_if = "Option::is_none")]
    pub enrollmentmethods: Option<Vec<serde_json::Value>>,
    /// course full name
    #[serde(rename = "fullname", skip_serializing_if = "Option::is_none")]
    pub fullname: Option<String>,
    /// course id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "overviewfiles", skip_serializing_if = "Option::is_none")]
    pub overviewfiles: Option<Vec<models::CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>>,
    /// course short name
    #[serde(rename = "shortname", skip_serializing_if = "Option::is_none")]
    pub shortname: Option<String>,
    /// Whether the activity dates are shown or not
    #[serde(rename = "showactivitydates", skip_serializing_if = "Option::is_none")]
    pub showactivitydates: Option<bool>,
    /// Whether the activity completion conditions are shown or not
    #[serde(rename = "showcompletionconditions", skip_serializing_if = "Option::is_none")]
    pub showcompletionconditions: Option<bool>,
    /// Sort order in the category
    #[serde(rename = "sortorder", skip_serializing_if = "Option::is_none")]
    pub sortorder: Option<i32>,
    /// summary
    #[serde(rename = "summary", skip_serializing_if = "Option::is_none")]
    pub summary: Option<String>,
    #[serde(rename = "summaryfiles", skip_serializing_if = "Option::is_none")]
    pub summaryfiles: Option<Vec<models::CoreBlockGetDashboardBlocks200ResponseBlocksInnerContentsFilesInner>>,
    /// summary format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "summaryformat", skip_serializing_if = "Option::is_none")]
    pub summaryformat: Option<i32>,
}

impl CoreCourseSearchCourses200ResponseCoursesInner {
    pub fn new() -> CoreCourseSearchCourses200ResponseCoursesInner {
        CoreCourseSearchCourses200ResponseCoursesInner {
            categoryid: None,
            categoryname: None,
            contacts: None,
            courseimage: None,
            customfields: None,
            displayname: None,
            enrollmentmethods: None,
            fullname: None,
            id: None,
            overviewfiles: None,
            shortname: None,
            showactivitydates: None,
            showcompletionconditions: None,
            sortorder: None,
            summary: None,
            summaryfiles: None,
            summaryformat: None,
        }
    }
}

