/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// ModAssignGetSubmissions200ResponseAssignmentsInnerSubmissionsInner : submission info
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModAssignGetSubmissions200ResponseAssignmentsInnerSubmissionsInner {
    /// assignment id
    #[serde(rename = "assignment", skip_serializing_if = "Option::is_none")]
    pub assignment: Option<i32>,
    /// attempt number
    #[serde(rename = "attemptnumber", skip_serializing_if = "Option::is_none")]
    pub attemptnumber: Option<i32>,
    /// Grading status.
    #[serde(rename = "gradingstatus", skip_serializing_if = "Option::is_none")]
    pub gradingstatus: Option<String>,
    /// group id
    #[serde(rename = "groupid", skip_serializing_if = "Option::is_none")]
    pub groupid: Option<i32>,
    /// submission id
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// latest attempt
    #[serde(rename = "latest", skip_serializing_if = "Option::is_none")]
    pub latest: Option<i32>,
    #[serde(rename = "plugins", skip_serializing_if = "Option::is_none")]
    pub plugins: Option<Vec<models::ModAssignGetSubmissionStatus200ResponseLastattemptSubmissionPluginsInner>>,
    /// submission status
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// submission creation time
    #[serde(rename = "timecreated", skip_serializing_if = "Option::is_none")]
    pub timecreated: Option<i32>,
    /// submission last modified time
    #[serde(rename = "timemodified", skip_serializing_if = "Option::is_none")]
    pub timemodified: Option<i32>,
    /// submission start time
    #[serde(rename = "timestarted", skip_serializing_if = "Option::is_none")]
    pub timestarted: Option<i32>,
    /// student id
    #[serde(rename = "userid", skip_serializing_if = "Option::is_none")]
    pub userid: Option<i32>,
}

impl ModAssignGetSubmissions200ResponseAssignmentsInnerSubmissionsInner {
    /// submission info
    pub fn new() -> ModAssignGetSubmissions200ResponseAssignmentsInnerSubmissionsInner {
        ModAssignGetSubmissions200ResponseAssignmentsInnerSubmissionsInner {
            assignment: None,
            attemptnumber: None,
            gradingstatus: None,
            groupid: None,
            id: None,
            latest: None,
            plugins: None,
            status: None,
            timecreated: None,
            timemodified: None,
            timestarted: None,
            userid: None,
        }
    }
}

