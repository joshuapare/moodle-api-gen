/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModWorkshopGetSubmissions200ResponseSubmissionsInner {
    /// Used by File API file_postupdate_standard_filemanager.
    #[serde(rename = "attachment", skip_serializing_if = "Option::is_none")]
    pub attachment: Option<i32>,
    #[serde(rename = "attachmentfiles", skip_serializing_if = "Option::is_none")]
    pub attachmentfiles: Option<Vec<models::CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>>,
    /// The author of the submission.
    #[serde(rename = "authorid", skip_serializing_if = "Option::is_none")]
    pub authorid: Option<i32>,
    /// Submission text.
    #[serde(rename = "content", skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    #[serde(rename = "contentfiles", skip_serializing_if = "Option::is_none")]
    pub contentfiles: Option<Vec<models::CoreBlogGetEntries200ResponseEntriesInnerSummaryfilesInner>>,
    /// content format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "contentformat", skip_serializing_if = "Option::is_none")]
    pub contentformat: Option<i32>,
    /// The trust mode of the data.
    #[serde(rename = "contenttrust", skip_serializing_if = "Option::is_none")]
    pub contenttrust: Option<i32>,
    /// Is this submission an example from teacher.
    #[serde(rename = "example", skip_serializing_if = "Option::is_none")]
    pub example: Option<bool>,
    /// Teacher comment/feedback for the author of the submission, for example describing the reasons                     for the grade overriding.
    #[serde(rename = "feedbackauthor", skip_serializing_if = "Option::is_none")]
    pub feedbackauthor: Option<String>,
    /// feedbackauthor format (1 = HTML, 0 = MOODLE, 2 = PLAIN, or 4 = MARKDOWN)
    #[serde(rename = "feedbackauthorformat", skip_serializing_if = "Option::is_none")]
    pub feedbackauthorformat: Option<i32>,
    /// Aggregated grade for the submission. The grade is a decimal number from interval 0..100.                     If NULL then the grade for submission has not been aggregated yet.
    #[serde(rename = "grade", skip_serializing_if = "Option::is_none")]
    pub grade: Option<f64>,
    /// Grade for the submission manually overridden by a teacher. Grade is always from interval 0..100.                     If NULL then the grade is not overriden.
    #[serde(rename = "gradeover", skip_serializing_if = "Option::is_none")]
    pub gradeover: Option<f64>,
    /// The id of the user who has overridden the grade for submission.
    #[serde(rename = "gradeoverby", skip_serializing_if = "Option::is_none")]
    pub gradeoverby: Option<i32>,
    /// The primary key of the record.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    /// Has this submission been submitted after the deadline or during the assessment phase?
    #[serde(rename = "late", skip_serializing_if = "Option::is_none")]
    pub late: Option<i32>,
    /// Shall the submission be available to other when the workshop is closed.
    #[serde(rename = "published", skip_serializing_if = "Option::is_none")]
    pub published: Option<bool>,
    /// Timestamp when the work was submitted for the first time.
    #[serde(rename = "timecreated", skip_serializing_if = "Option::is_none")]
    pub timecreated: Option<i32>,
    /// The timestamp when grade or gradeover was recently modified.
    #[serde(rename = "timegraded", skip_serializing_if = "Option::is_none")]
    pub timegraded: Option<i32>,
    /// Timestamp when the submission has been updated.
    #[serde(rename = "timemodified", skip_serializing_if = "Option::is_none")]
    pub timemodified: Option<i32>,
    /// The submission title.
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The id of the workshop instance.
    #[serde(rename = "workshopid", skip_serializing_if = "Option::is_none")]
    pub workshopid: Option<i32>,
}

impl ModWorkshopGetSubmissions200ResponseSubmissionsInner {
    pub fn new() -> ModWorkshopGetSubmissions200ResponseSubmissionsInner {
        ModWorkshopGetSubmissions200ResponseSubmissionsInner {
            attachment: None,
            attachmentfiles: None,
            authorid: None,
            content: None,
            contentfiles: None,
            contentformat: None,
            contenttrust: None,
            example: None,
            feedbackauthor: None,
            feedbackauthorformat: None,
            grade: None,
            gradeover: None,
            gradeoverby: None,
            id: None,
            late: None,
            published: None,
            timecreated: None,
            timegraded: None,
            timemodified: None,
            title: None,
            workshopid: None,
        }
    }
}

