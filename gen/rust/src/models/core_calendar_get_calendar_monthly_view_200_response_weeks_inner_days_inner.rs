/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner {
    #[serde(rename = "calendareventtypes", skip_serializing_if = "Option::is_none")]
    pub calendareventtypes: Option<Vec<serde_json::Value>>,
    /// daytitle
    #[serde(rename = "daytitle", skip_serializing_if = "Option::is_none")]
    pub daytitle: Option<String>,
    #[serde(rename = "events", skip_serializing_if = "Option::is_none")]
    pub events: Option<Vec<models::CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInnerEventsInner>>,
    /// hasevents
    #[serde(rename = "hasevents", skip_serializing_if = "Option::is_none")]
    pub hasevents: Option<bool>,
    /// haslastdayofevent
    #[serde(rename = "haslastdayofevent", skip_serializing_if = "Option::is_none")]
    pub haslastdayofevent: Option<bool>,
    /// hours
    #[serde(rename = "hours", skip_serializing_if = "Option::is_none")]
    pub hours: Option<i32>,
    /// istoday
    #[serde(rename = "istoday", skip_serializing_if = "Option::is_none")]
    pub istoday: Option<bool>,
    /// isweekend
    #[serde(rename = "isweekend", skip_serializing_if = "Option::is_none")]
    pub isweekend: Option<bool>,
    /// mday
    #[serde(rename = "mday", skip_serializing_if = "Option::is_none")]
    pub mday: Option<i32>,
    /// minutes
    #[serde(rename = "minutes", skip_serializing_if = "Option::is_none")]
    pub minutes: Option<i32>,
    /// neweventtimestamp
    #[serde(rename = "neweventtimestamp", skip_serializing_if = "Option::is_none")]
    pub neweventtimestamp: Option<i32>,
    /// nextperiod
    #[serde(rename = "nextperiod", skip_serializing_if = "Option::is_none")]
    pub nextperiod: Option<i32>,
    /// popovertitle
    #[serde(rename = "popovertitle", skip_serializing_if = "Option::is_none")]
    pub popovertitle: Option<String>,
    /// previousperiod
    #[serde(rename = "previousperiod", skip_serializing_if = "Option::is_none")]
    pub previousperiod: Option<i32>,
    /// seconds
    #[serde(rename = "seconds", skip_serializing_if = "Option::is_none")]
    pub seconds: Option<i32>,
    /// timestamp
    #[serde(rename = "timestamp", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<i32>,
    /// viewdaylink
    #[serde(rename = "viewdaylink", skip_serializing_if = "Option::is_none")]
    pub viewdaylink: Option<String>,
    /// viewdaylinktitle
    #[serde(rename = "viewdaylinktitle", skip_serializing_if = "Option::is_none")]
    pub viewdaylinktitle: Option<String>,
    /// wday
    #[serde(rename = "wday", skip_serializing_if = "Option::is_none")]
    pub wday: Option<i32>,
    /// yday
    #[serde(rename = "yday", skip_serializing_if = "Option::is_none")]
    pub yday: Option<i32>,
    /// year
    #[serde(rename = "year", skip_serializing_if = "Option::is_none")]
    pub year: Option<i32>,
}

impl CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner {
    pub fn new() -> CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner {
        CoreCalendarGetCalendarMonthlyView200ResponseWeeksInnerDaysInner {
            calendareventtypes: None,
            daytitle: None,
            events: None,
            hasevents: None,
            haslastdayofevent: None,
            hours: None,
            istoday: None,
            isweekend: None,
            mday: None,
            minutes: None,
            neweventtimestamp: None,
            nextperiod: None,
            popovertitle: None,
            previousperiod: None,
            seconds: None,
            timestamp: None,
            viewdaylink: None,
            viewdaylinktitle: None,
            wday: None,
            yday: None,
            year: None,
        }
    }
}

