/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModForumSetSubscriptionState200Response {
    #[serde(rename = "capabilities")]
    pub capabilities: Box<models::ModForumSetSubscriptionState200ResponseCapabilities>,
    /// firstpostid
    #[serde(rename = "firstpostid")]
    pub firstpostid: i32,
    /// forumid
    #[serde(rename = "forumid")]
    pub forumid: i32,
    #[serde(rename = "group", skip_serializing_if = "Option::is_none")]
    pub group: Option<Box<models::ModForumSetSubscriptionState200ResponseGroup>>,
    /// id
    #[serde(rename = "id")]
    pub id: i32,
    /// istimelocked
    #[serde(rename = "istimelocked")]
    pub istimelocked: bool,
    /// locked
    #[serde(rename = "locked")]
    pub locked: bool,
    /// name
    #[serde(rename = "name")]
    pub name: String,
    /// pinned
    #[serde(rename = "pinned")]
    pub pinned: bool,
    #[serde(rename = "timed")]
    pub timed: Box<models::ModForumSetSubscriptionState200ResponseTimed>,
    #[serde(rename = "times")]
    pub times: Box<models::ModForumSetSubscriptionState200ResponseTimes>,
    #[serde(rename = "urls")]
    pub urls: Box<models::ModForumSetSubscriptionState200ResponseUrls>,
    #[serde(rename = "userstate")]
    pub userstate: Box<models::ModForumSetSubscriptionState200ResponseUserstate>,
}

impl ModForumSetSubscriptionState200Response {
    pub fn new(capabilities: models::ModForumSetSubscriptionState200ResponseCapabilities, firstpostid: i32, forumid: i32, id: i32, istimelocked: bool, locked: bool, name: String, pinned: bool, timed: models::ModForumSetSubscriptionState200ResponseTimed, times: models::ModForumSetSubscriptionState200ResponseTimes, urls: models::ModForumSetSubscriptionState200ResponseUrls, userstate: models::ModForumSetSubscriptionState200ResponseUserstate) -> ModForumSetSubscriptionState200Response {
        ModForumSetSubscriptionState200Response {
            capabilities: Box::new(capabilities),
            firstpostid,
            forumid,
            group: None,
            id,
            istimelocked,
            locked,
            name,
            pinned,
            timed: Box::new(timed),
            times: Box::new(times),
            urls: Box::new(urls),
            userstate: Box::new(userstate),
        }
    }
}

