/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreMessageDataForMessageareaSearchMessages200ResponseContactsInner {
    /// The id of the conversation
    #[serde(rename = "conversationid", skip_serializing_if = "Option::is_none")]
    pub conversationid: Option<i32>,
    /// The user's name
    #[serde(rename = "fullname", skip_serializing_if = "Option::is_none")]
    pub fullname: Option<String>,
    /// If the user has been blocked
    #[serde(rename = "isblocked", skip_serializing_if = "Option::is_none")]
    pub isblocked: Option<bool>,
    /// If we are messaging the user
    #[serde(rename = "ismessaging", skip_serializing_if = "Option::is_none")]
    pub ismessaging: Option<bool>,
    /// The user's online status
    #[serde(rename = "isonline", skip_serializing_if = "Option::is_none")]
    pub isonline: Option<bool>,
    /// If the user has read the message
    #[serde(rename = "isread", skip_serializing_if = "Option::is_none")]
    pub isread: Option<bool>,
    /// The user's last message
    #[serde(rename = "lastmessage", skip_serializing_if = "Option::is_none")]
    pub lastmessage: Option<String>,
    /// Timestamp for last message
    #[serde(rename = "lastmessagedate", skip_serializing_if = "Option::is_none")]
    pub lastmessagedate: Option<i32>,
    /// The unique search message id
    #[serde(rename = "messageid", skip_serializing_if = "Option::is_none")]
    pub messageid: Option<i32>,
    /// User picture URL
    #[serde(rename = "profileimageurl", skip_serializing_if = "Option::is_none")]
    pub profileimageurl: Option<String>,
    /// Small user picture URL
    #[serde(rename = "profileimageurlsmall", skip_serializing_if = "Option::is_none")]
    pub profileimageurlsmall: Option<String>,
    /// Was the last message sent from the current user?
    #[serde(rename = "sentfromcurrentuser", skip_serializing_if = "Option::is_none")]
    pub sentfromcurrentuser: Option<bool>,
    /// Show the user's online status?
    #[serde(rename = "showonlinestatus", skip_serializing_if = "Option::is_none")]
    pub showonlinestatus: Option<bool>,
    /// The number of unread messages in this conversation
    #[serde(rename = "unreadcount", skip_serializing_if = "Option::is_none")]
    pub unreadcount: Option<i32>,
    /// The user's id
    #[serde(rename = "userid", skip_serializing_if = "Option::is_none")]
    pub userid: Option<i32>,
}

impl CoreMessageDataForMessageareaSearchMessages200ResponseContactsInner {
    pub fn new() -> CoreMessageDataForMessageareaSearchMessages200ResponseContactsInner {
        CoreMessageDataForMessageareaSearchMessages200ResponseContactsInner {
            conversationid: None,
            fullname: None,
            isblocked: None,
            ismessaging: None,
            isonline: None,
            isread: None,
            lastmessage: None,
            lastmessagedate: None,
            messageid: None,
            profileimageurl: None,
            profileimageurlsmall: None,
            sentfromcurrentuser: None,
            showonlinestatus: None,
            unreadcount: None,
            userid: None,
        }
    }
}

