/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ModForumGetForumAccessInformation200Response {
    /// Whether the user has the capability mod/forum:addinstance allowed.
    #[serde(rename = "canaddinstance", skip_serializing_if = "Option::is_none")]
    pub canaddinstance: Option<bool>,
    /// Whether the user has the capability mod/forum:addnews allowed.
    #[serde(rename = "canaddnews", skip_serializing_if = "Option::is_none")]
    pub canaddnews: Option<bool>,
    /// Whether the user has the capability mod/forum:addquestion allowed.
    #[serde(rename = "canaddquestion", skip_serializing_if = "Option::is_none")]
    pub canaddquestion: Option<bool>,
    /// Whether the user has the capability mod/forum:allowforcesubscribe allowed.
    #[serde(rename = "canallowforcesubscribe", skip_serializing_if = "Option::is_none")]
    pub canallowforcesubscribe: Option<bool>,
    /// Whether the user has the capability mod/forum:canmailnow allowed.
    #[serde(rename = "cancanmailnow", skip_serializing_if = "Option::is_none")]
    pub cancanmailnow: Option<bool>,
    /// Whether the user has the capability mod/forum:canoverridecutoff allowed.
    #[serde(rename = "cancanoverridecutoff", skip_serializing_if = "Option::is_none")]
    pub cancanoverridecutoff: Option<bool>,
    /// Whether the user has the capability mod/forum:canoverridediscussionlock allowed.
    #[serde(rename = "cancanoverridediscussionlock", skip_serializing_if = "Option::is_none")]
    pub cancanoverridediscussionlock: Option<bool>,
    /// Whether the user has the capability mod/forum:canposttomygroups allowed.
    #[serde(rename = "cancanposttomygroups", skip_serializing_if = "Option::is_none")]
    pub cancanposttomygroups: Option<bool>,
    /// Whether the user has the capability mod/forum:cantogglefavourite allowed.
    #[serde(rename = "cancantogglefavourite", skip_serializing_if = "Option::is_none")]
    pub cancantogglefavourite: Option<bool>,
    /// Whether the user has the capability mod/forum:createattachment allowed.
    #[serde(rename = "cancreateattachment", skip_serializing_if = "Option::is_none")]
    pub cancreateattachment: Option<bool>,
    /// Whether the user has the capability mod/forum:deleteanypost allowed.
    #[serde(rename = "candeleteanypost", skip_serializing_if = "Option::is_none")]
    pub candeleteanypost: Option<bool>,
    /// Whether the user has the capability mod/forum:deleteownpost allowed.
    #[serde(rename = "candeleteownpost", skip_serializing_if = "Option::is_none")]
    pub candeleteownpost: Option<bool>,
    /// Whether the user has the capability mod/forum:editanypost allowed.
    #[serde(rename = "caneditanypost", skip_serializing_if = "Option::is_none")]
    pub caneditanypost: Option<bool>,
    /// Whether the user has the capability mod/forum:exportdiscussion allowed.
    #[serde(rename = "canexportdiscussion", skip_serializing_if = "Option::is_none")]
    pub canexportdiscussion: Option<bool>,
    /// Whether the user has the capability mod/forum:exportforum allowed.
    #[serde(rename = "canexportforum", skip_serializing_if = "Option::is_none")]
    pub canexportforum: Option<bool>,
    /// Whether the user has the capability mod/forum:exportownpost allowed.
    #[serde(rename = "canexportownpost", skip_serializing_if = "Option::is_none")]
    pub canexportownpost: Option<bool>,
    /// Whether the user has the capability mod/forum:exportpost allowed.
    #[serde(rename = "canexportpost", skip_serializing_if = "Option::is_none")]
    pub canexportpost: Option<bool>,
    /// Whether the user has the capability mod/forum:grade allowed.
    #[serde(rename = "cangrade", skip_serializing_if = "Option::is_none")]
    pub cangrade: Option<bool>,
    /// Whether the user has the capability mod/forum:managesubscriptions allowed.
    #[serde(rename = "canmanagesubscriptions", skip_serializing_if = "Option::is_none")]
    pub canmanagesubscriptions: Option<bool>,
    /// Whether the user has the capability mod/forum:movediscussions allowed.
    #[serde(rename = "canmovediscussions", skip_serializing_if = "Option::is_none")]
    pub canmovediscussions: Option<bool>,
    /// Whether the user has the capability mod/forum:pindiscussions allowed.
    #[serde(rename = "canpindiscussions", skip_serializing_if = "Option::is_none")]
    pub canpindiscussions: Option<bool>,
    /// Whether the user has the capability mod/forum:postprivatereply allowed.
    #[serde(rename = "canpostprivatereply", skip_serializing_if = "Option::is_none")]
    pub canpostprivatereply: Option<bool>,
    /// Whether the user has the capability mod/forum:postwithoutthrottling allowed.
    #[serde(rename = "canpostwithoutthrottling", skip_serializing_if = "Option::is_none")]
    pub canpostwithoutthrottling: Option<bool>,
    /// Whether the user has the capability mod/forum:rate allowed.
    #[serde(rename = "canrate", skip_serializing_if = "Option::is_none")]
    pub canrate: Option<bool>,
    /// Whether the user has the capability mod/forum:readprivatereplies allowed.
    #[serde(rename = "canreadprivatereplies", skip_serializing_if = "Option::is_none")]
    pub canreadprivatereplies: Option<bool>,
    /// Whether the user has the capability mod/forum:replynews allowed.
    #[serde(rename = "canreplynews", skip_serializing_if = "Option::is_none")]
    pub canreplynews: Option<bool>,
    /// Whether the user has the capability mod/forum:replypost allowed.
    #[serde(rename = "canreplypost", skip_serializing_if = "Option::is_none")]
    pub canreplypost: Option<bool>,
    /// Whether the user has the capability mod/forum:splitdiscussions allowed.
    #[serde(rename = "cansplitdiscussions", skip_serializing_if = "Option::is_none")]
    pub cansplitdiscussions: Option<bool>,
    /// Whether the user has the capability mod/forum:startdiscussion allowed.
    #[serde(rename = "canstartdiscussion", skip_serializing_if = "Option::is_none")]
    pub canstartdiscussion: Option<bool>,
    /// Whether the user has the capability mod/forum:viewallratings allowed.
    #[serde(rename = "canviewallratings", skip_serializing_if = "Option::is_none")]
    pub canviewallratings: Option<bool>,
    /// Whether the user has the capability mod/forum:viewanyrating allowed.
    #[serde(rename = "canviewanyrating", skip_serializing_if = "Option::is_none")]
    pub canviewanyrating: Option<bool>,
    /// Whether the user has the capability mod/forum:viewdiscussion allowed.
    #[serde(rename = "canviewdiscussion", skip_serializing_if = "Option::is_none")]
    pub canviewdiscussion: Option<bool>,
    /// Whether the user has the capability mod/forum:viewhiddentimedposts allowed.
    #[serde(rename = "canviewhiddentimedposts", skip_serializing_if = "Option::is_none")]
    pub canviewhiddentimedposts: Option<bool>,
    /// Whether the user has the capability mod/forum:viewqandawithoutposting allowed.
    #[serde(rename = "canviewqandawithoutposting", skip_serializing_if = "Option::is_none")]
    pub canviewqandawithoutposting: Option<bool>,
    /// Whether the user has the capability mod/forum:viewrating allowed.
    #[serde(rename = "canviewrating", skip_serializing_if = "Option::is_none")]
    pub canviewrating: Option<bool>,
    /// Whether the user has the capability mod/forum:viewsubscribers allowed.
    #[serde(rename = "canviewsubscribers", skip_serializing_if = "Option::is_none")]
    pub canviewsubscribers: Option<bool>,
    #[serde(rename = "warnings", skip_serializing_if = "Option::is_none")]
    pub warnings: Option<Vec<models::AuthEmailSignupUser200ResponseWarningsInner>>,
}

impl ModForumGetForumAccessInformation200Response {
    pub fn new() -> ModForumGetForumAccessInformation200Response {
        ModForumGetForumAccessInformation200Response {
            canaddinstance: None,
            canaddnews: None,
            canaddquestion: None,
            canallowforcesubscribe: None,
            cancanmailnow: None,
            cancanoverridecutoff: None,
            cancanoverridediscussionlock: None,
            cancanposttomygroups: None,
            cancantogglefavourite: None,
            cancreateattachment: None,
            candeleteanypost: None,
            candeleteownpost: None,
            caneditanypost: None,
            canexportdiscussion: None,
            canexportforum: None,
            canexportownpost: None,
            canexportpost: None,
            cangrade: None,
            canmanagesubscriptions: None,
            canmovediscussions: None,
            canpindiscussions: None,
            canpostprivatereply: None,
            canpostwithoutthrottling: None,
            canrate: None,
            canreadprivatereplies: None,
            canreplynews: None,
            canreplypost: None,
            cansplitdiscussions: None,
            canstartdiscussion: None,
            canviewallratings: None,
            canviewanyrating: None,
            canviewdiscussion: None,
            canviewhiddentimedposts: None,
            canviewqandawithoutposting: None,
            canviewrating: None,
            canviewsubscribers: None,
            warnings: None,
        }
    }
}

