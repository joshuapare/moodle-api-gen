/*
 * Moodle Webservice API
 *
 * Auto-generated OpenAPI spec for Moodle's Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner : Activity
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner {
    /// course module ID
    #[serde(rename = "cmid", skip_serializing_if = "Option::is_none")]
    pub cmid: Option<i32>,
    #[serde(rename = "details", skip_serializing_if = "Option::is_none")]
    pub details: Option<Vec<models::CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInnerDetailsInner>>,
    /// Whether this activity module has completion enabled
    #[serde(rename = "hascompletion", skip_serializing_if = "Option::is_none")]
    pub hascompletion: Option<bool>,
    /// instance ID
    #[serde(rename = "instance", skip_serializing_if = "Option::is_none")]
    pub instance: Option<i32>,
    /// Whether this activity module instance tracks completion automatically.
    #[serde(rename = "isautomatic", skip_serializing_if = "Option::is_none")]
    pub isautomatic: Option<bool>,
    /// Whether completion is being tracked for this user.
    #[serde(rename = "istrackeduser", skip_serializing_if = "Option::is_none")]
    pub istrackeduser: Option<bool>,
    /// activity module name
    #[serde(rename = "modname", skip_serializing_if = "Option::is_none")]
    pub modname: Option<String>,
    /// The user id who has overriden the status, or null
    #[serde(rename = "overrideby", skip_serializing_if = "Option::is_none")]
    pub overrideby: Option<i32>,
    /// Completion state value:                                     0 means incomplete,                                     1 complete,                                     2 complete pass,                                     3 complete fail
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<i32>,
    /// timestamp for completed activity
    #[serde(rename = "timecompleted", skip_serializing_if = "Option::is_none")]
    pub timecompleted: Option<i32>,
    /// type of tracking:                                     0 means none,                                     1 manual,                                     2 automatic
    #[serde(rename = "tracking", skip_serializing_if = "Option::is_none")]
    pub tracking: Option<i32>,
    /// Whether this activity is visible to the user.
    #[serde(rename = "uservisible", skip_serializing_if = "Option::is_none")]
    pub uservisible: Option<bool>,
    /// Whether the completion status affects the availability of another activity.
    #[serde(rename = "valueused", skip_serializing_if = "Option::is_none")]
    pub valueused: Option<bool>,
}

impl CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner {
    /// Activity
    pub fn new() -> CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner {
        CoreCompletionGetActivitiesCompletionStatus200ResponseStatusesInner {
            cmid: None,
            details: None,
            hascompletion: None,
            instance: None,
            isautomatic: None,
            istrackeduser: None,
            modname: None,
            overrideby: None,
            state: None,
            timecompleted: None,
            tracking: None,
            uservisible: None,
            valueused: None,
        }
    }
}

