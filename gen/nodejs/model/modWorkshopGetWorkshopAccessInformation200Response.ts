/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { AuthEmailSignupUser200ResponseWarningsInner } from './authEmailSignupUser200ResponseWarningsInner';

export class ModWorkshopGetWorkshopAccessInformation200Response {
    /**
    * Is the user allowed to create/edit his assessments?
    */
    'assessingallowed': boolean = null;
    /**
    * Are reviewers allowed to create/edit their assessments of the example submissions?.
    */
    'assessingexamplesallowed': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:addinstance allowed.
    */
    'canaddinstance': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:allocate allowed.
    */
    'canallocate': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:deletesubmissions allowed.
    */
    'candeletesubmissions': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:editdimensions allowed.
    */
    'caneditdimensions': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:exportsubmissions allowed.
    */
    'canexportsubmissions': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:ignoredeadlines allowed.
    */
    'canignoredeadlines': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:manageexamples allowed.
    */
    'canmanageexamples': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:overridegrades allowed.
    */
    'canoverridegrades': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:peerassess allowed.
    */
    'canpeerassess': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:publishsubmissions allowed.
    */
    'canpublishsubmissions': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:submit allowed.
    */
    'cansubmit': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:switchphase allowed.
    */
    'canswitchphase': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:view allowed.
    */
    'canview': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:viewallassessments allowed.
    */
    'canviewallassessments': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:viewallsubmissions allowed.
    */
    'canviewallsubmissions': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:viewauthornames allowed.
    */
    'canviewauthornames': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:viewauthorpublished allowed.
    */
    'canviewauthorpublished': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:viewpublishedsubmissions allowed.
    */
    'canviewpublishedsubmissions': boolean = null;
    /**
    * Whether the user has the capability mod/workshop:viewreviewernames allowed.
    */
    'canviewreviewernames': boolean = null;
    /**
    * Is the given user allowed to create their submission?
    */
    'creatingsubmissionallowed': boolean = null;
    /**
    * Whether the given user has assessed all his required examples before assessment                 (always true if there are not examples to assessor not configured to check before assessment).
    */
    'examplesassessedbeforeassessment': boolean = null;
    /**
    * Whether the given user has assessed all his required examples before submission                 (always true if there are not examples to assess or not configured to check before submission).
    */
    'examplesassessedbeforesubmission': boolean = null;
    /**
    * Is the user allowed to modify his existing submission?
    */
    'modifyingsubmissionallowed': boolean = null;
    'warnings'?: Array<AuthEmailSignupUser200ResponseWarningsInner>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "assessingallowed",
            "baseName": "assessingallowed",
            "type": "boolean"
        },
        {
            "name": "assessingexamplesallowed",
            "baseName": "assessingexamplesallowed",
            "type": "boolean"
        },
        {
            "name": "canaddinstance",
            "baseName": "canaddinstance",
            "type": "boolean"
        },
        {
            "name": "canallocate",
            "baseName": "canallocate",
            "type": "boolean"
        },
        {
            "name": "candeletesubmissions",
            "baseName": "candeletesubmissions",
            "type": "boolean"
        },
        {
            "name": "caneditdimensions",
            "baseName": "caneditdimensions",
            "type": "boolean"
        },
        {
            "name": "canexportsubmissions",
            "baseName": "canexportsubmissions",
            "type": "boolean"
        },
        {
            "name": "canignoredeadlines",
            "baseName": "canignoredeadlines",
            "type": "boolean"
        },
        {
            "name": "canmanageexamples",
            "baseName": "canmanageexamples",
            "type": "boolean"
        },
        {
            "name": "canoverridegrades",
            "baseName": "canoverridegrades",
            "type": "boolean"
        },
        {
            "name": "canpeerassess",
            "baseName": "canpeerassess",
            "type": "boolean"
        },
        {
            "name": "canpublishsubmissions",
            "baseName": "canpublishsubmissions",
            "type": "boolean"
        },
        {
            "name": "cansubmit",
            "baseName": "cansubmit",
            "type": "boolean"
        },
        {
            "name": "canswitchphase",
            "baseName": "canswitchphase",
            "type": "boolean"
        },
        {
            "name": "canview",
            "baseName": "canview",
            "type": "boolean"
        },
        {
            "name": "canviewallassessments",
            "baseName": "canviewallassessments",
            "type": "boolean"
        },
        {
            "name": "canviewallsubmissions",
            "baseName": "canviewallsubmissions",
            "type": "boolean"
        },
        {
            "name": "canviewauthornames",
            "baseName": "canviewauthornames",
            "type": "boolean"
        },
        {
            "name": "canviewauthorpublished",
            "baseName": "canviewauthorpublished",
            "type": "boolean"
        },
        {
            "name": "canviewpublishedsubmissions",
            "baseName": "canviewpublishedsubmissions",
            "type": "boolean"
        },
        {
            "name": "canviewreviewernames",
            "baseName": "canviewreviewernames",
            "type": "boolean"
        },
        {
            "name": "creatingsubmissionallowed",
            "baseName": "creatingsubmissionallowed",
            "type": "boolean"
        },
        {
            "name": "examplesassessedbeforeassessment",
            "baseName": "examplesassessedbeforeassessment",
            "type": "boolean"
        },
        {
            "name": "examplesassessedbeforesubmission",
            "baseName": "examplesassessedbeforesubmission",
            "type": "boolean"
        },
        {
            "name": "modifyingsubmissionallowed",
            "baseName": "modifyingsubmissionallowed",
            "type": "boolean"
        },
        {
            "name": "warnings",
            "baseName": "warnings",
            "type": "Array<AuthEmailSignupUser200ResponseWarningsInner>"
        }    ];

    static getAttributeTypeMap() {
        return ModWorkshopGetWorkshopAccessInformation200Response.attributeTypeMap;
    }
}

