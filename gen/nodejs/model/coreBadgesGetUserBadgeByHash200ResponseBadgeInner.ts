/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner } from './coreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner';
import { CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement } from './coreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement';
import { CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInner } from './coreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInner';

export class CoreBadgesGetUserBadgeByHash200ResponseBadgeInner {
    'alignment'?: Array<CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner>;
    /**
    * Attachment
    */
    'attachment'?: number = 1;
    /**
    * Badge URL
    */
    'badgeurl'?: string = 'null';
    /**
    * Course id
    */
    'courseid'?: number = null;
    /**
    * Date expire
    */
    'dateexpire'?: number = null;
    /**
    * Date issued
    */
    'dateissued'?: number = 0;
    /**
    * Badge description
    */
    'description'?: string = 'null';
    /**
    * User email
    */
    'email'?: string = 'null';
    'endorsement'?: CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement;
    /**
    * Expire date
    */
    'expiredate'?: number = null;
    /**
    * Expire period
    */
    'expireperiod'?: number = null;
    /**
    * Badge id
    */
    'id'?: number;
    /**
    * Email of the image author
    */
    'imageauthoremail'?: string = 'null';
    /**
    * Name of the image author
    */
    'imageauthorname'?: string = 'null';
    /**
    * URL of the image author
    */
    'imageauthorurl'?: string = 'null';
    /**
    * Caption of the image
    */
    'imagecaption'?: string = 'null';
    /**
    * Issued id
    */
    'issuedid'?: number = null;
    /**
    * Issuer contact
    */
    'issuercontact'?: string = 'null';
    /**
    * Issuer name
    */
    'issuername'?: string = 'null';
    /**
    * Issuer URL
    */
    'issuerurl'?: string = 'null';
    /**
    * Language
    */
    'language'?: string = 'null';
    /**
    * Message
    */
    'message'?: string = 'null';
    /**
    * Message subject
    */
    'messagesubject'?: string = 'null';
    /**
    * Badge name
    */
    'name'?: string = 'null';
    /**
    * Next cron
    */
    'nextcron'?: number = null;
    /**
    * Whether to notify when badge is awarded
    */
    'notification'?: number = 1;
    'relatedbadges'?: Array<CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInner>;
    /**
    * Status
    */
    'status'?: number = 0;
    /**
    * Time created
    */
    'timecreated'?: number = 0;
    /**
    * Time modified
    */
    'timemodified'?: number = 0;
    /**
    * Type
    */
    'type'?: number = 1;
    /**
    * Unique hash
    */
    'uniquehash'?: string = 'null';
    /**
    * User created
    */
    'usercreated'?: number = null;
    /**
    * User modified
    */
    'usermodified'?: number = null;
    /**
    * Version
    */
    'version'?: string;
    /**
    * Visible
    */
    'visible'?: number = 0;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "alignment",
            "baseName": "alignment",
            "type": "Array<CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerAlignmentInner>"
        },
        {
            "name": "attachment",
            "baseName": "attachment",
            "type": "number"
        },
        {
            "name": "badgeurl",
            "baseName": "badgeurl",
            "type": "string"
        },
        {
            "name": "courseid",
            "baseName": "courseid",
            "type": "number"
        },
        {
            "name": "dateexpire",
            "baseName": "dateexpire",
            "type": "number"
        },
        {
            "name": "dateissued",
            "baseName": "dateissued",
            "type": "number"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "endorsement",
            "baseName": "endorsement",
            "type": "CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerEndorsement"
        },
        {
            "name": "expiredate",
            "baseName": "expiredate",
            "type": "number"
        },
        {
            "name": "expireperiod",
            "baseName": "expireperiod",
            "type": "number"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "imageauthoremail",
            "baseName": "imageauthoremail",
            "type": "string"
        },
        {
            "name": "imageauthorname",
            "baseName": "imageauthorname",
            "type": "string"
        },
        {
            "name": "imageauthorurl",
            "baseName": "imageauthorurl",
            "type": "string"
        },
        {
            "name": "imagecaption",
            "baseName": "imagecaption",
            "type": "string"
        },
        {
            "name": "issuedid",
            "baseName": "issuedid",
            "type": "number"
        },
        {
            "name": "issuercontact",
            "baseName": "issuercontact",
            "type": "string"
        },
        {
            "name": "issuername",
            "baseName": "issuername",
            "type": "string"
        },
        {
            "name": "issuerurl",
            "baseName": "issuerurl",
            "type": "string"
        },
        {
            "name": "language",
            "baseName": "language",
            "type": "string"
        },
        {
            "name": "message",
            "baseName": "message",
            "type": "string"
        },
        {
            "name": "messagesubject",
            "baseName": "messagesubject",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "nextcron",
            "baseName": "nextcron",
            "type": "number"
        },
        {
            "name": "notification",
            "baseName": "notification",
            "type": "number"
        },
        {
            "name": "relatedbadges",
            "baseName": "relatedbadges",
            "type": "Array<CoreBadgesGetUserBadgeByHash200ResponseBadgeInnerRelatedbadgesInner>"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "number"
        },
        {
            "name": "timecreated",
            "baseName": "timecreated",
            "type": "number"
        },
        {
            "name": "timemodified",
            "baseName": "timemodified",
            "type": "number"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "number"
        },
        {
            "name": "uniquehash",
            "baseName": "uniquehash",
            "type": "string"
        },
        {
            "name": "usercreated",
            "baseName": "usercreated",
            "type": "number"
        },
        {
            "name": "usermodified",
            "baseName": "usermodified",
            "type": "number"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "string"
        },
        {
            "name": "visible",
            "baseName": "visible",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return CoreBadgesGetUserBadgeByHash200ResponseBadgeInner.attributeTypeMap;
    }
}

