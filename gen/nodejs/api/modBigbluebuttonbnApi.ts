/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { CoreCalendarDeleteSubscription200Response } from '../model/coreCalendarDeleteSubscription200Response';
import { CoreCohortAddCohortMembers200Response } from '../model/coreCohortAddCohortMembers200Response';
import { ErrorResponse } from '../model/errorResponse';
import { ModBigbluebuttonbnCanJoin200Response } from '../model/modBigbluebuttonbnCanJoin200Response';
import { ModBigbluebuttonbnCanJoinRequest } from '../model/modBigbluebuttonbnCanJoinRequest';
import { ModBigbluebuttonbnCompletionValidateRequest } from '../model/modBigbluebuttonbnCompletionValidateRequest';
import { ModBigbluebuttonbnEndMeetingRequest } from '../model/modBigbluebuttonbnEndMeetingRequest';
import { ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response } from '../model/modBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response';
import { ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest } from '../model/modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest';
import { ModBigbluebuttonbnGetJoinUrl200Response } from '../model/modBigbluebuttonbnGetJoinUrl200Response';
import { ModBigbluebuttonbnGetRecordings200Response } from '../model/modBigbluebuttonbnGetRecordings200Response';
import { ModBigbluebuttonbnGetRecordingsRequest } from '../model/modBigbluebuttonbnGetRecordingsRequest';
import { ModBigbluebuttonbnGetRecordingsToImport200Response } from '../model/modBigbluebuttonbnGetRecordingsToImport200Response';
import { ModBigbluebuttonbnGetRecordingsToImportRequest } from '../model/modBigbluebuttonbnGetRecordingsToImportRequest';
import { ModBigbluebuttonbnMeetingInfo200Response } from '../model/modBigbluebuttonbnMeetingInfo200Response';
import { ModBigbluebuttonbnMeetingInfoRequest } from '../model/modBigbluebuttonbnMeetingInfoRequest';
import { ModBigbluebuttonbnUpdateRecordingRequest } from '../model/modBigbluebuttonbnUpdateRecordingRequest';
import { ModBigbluebuttonbnViewBigbluebuttonbnRequest } from '../model/modBigbluebuttonbnViewBigbluebuttonbnRequest';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://localhost/webservice/rest/server.php';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ModBigbluebuttonbnApiApiKeys {
    apiKey,
}

export class ModBigbluebuttonbnApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'Authorization'),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: ModBigbluebuttonbnApiApiKeys, value: string) {
        (this.authentications as any)[ModBigbluebuttonbnApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Returns information if the current user can join or not.
     * @summary Returns information if the current user can join or not.
     * @param modBigbluebuttonbnCanJoinRequest 
     */
    public async modBigbluebuttonbnCanJoin (modBigbluebuttonbnCanJoinRequest: ModBigbluebuttonbnCanJoinRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ModBigbluebuttonbnCanJoin200Response;  }> {
        const localVarPath = this.basePath + '/mod_bigbluebuttonbn_can_join';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'modBigbluebuttonbnCanJoinRequest' is not null or undefined
        if (modBigbluebuttonbnCanJoinRequest === null || modBigbluebuttonbnCanJoinRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnCanJoinRequest was null or undefined when calling modBigbluebuttonbnCanJoin.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(modBigbluebuttonbnCanJoinRequest, "ModBigbluebuttonbnCanJoinRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ModBigbluebuttonbnCanJoin200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ModBigbluebuttonbnCanJoin200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Validate completion
     * @summary Validate completion
     * @param modBigbluebuttonbnCompletionValidateRequest 
     */
    public async modBigbluebuttonbnCompletionValidate (modBigbluebuttonbnCompletionValidateRequest: ModBigbluebuttonbnCompletionValidateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoreCohortAddCohortMembers200Response;  }> {
        const localVarPath = this.basePath + '/mod_bigbluebuttonbn_completion_validate';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'modBigbluebuttonbnCompletionValidateRequest' is not null or undefined
        if (modBigbluebuttonbnCompletionValidateRequest === null || modBigbluebuttonbnCompletionValidateRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnCompletionValidateRequest was null or undefined when calling modBigbluebuttonbnCompletionValidate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(modBigbluebuttonbnCompletionValidateRequest, "ModBigbluebuttonbnCompletionValidateRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoreCohortAddCohortMembers200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoreCohortAddCohortMembers200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * End a meeting
     * @summary End a meeting
     * @param modBigbluebuttonbnEndMeetingRequest 
     */
    public async modBigbluebuttonbnEndMeeting (modBigbluebuttonbnEndMeetingRequest: ModBigbluebuttonbnEndMeetingRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoreCohortAddCohortMembers200Response;  }> {
        const localVarPath = this.basePath + '/mod_bigbluebuttonbn_end_meeting';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'modBigbluebuttonbnEndMeetingRequest' is not null or undefined
        if (modBigbluebuttonbnEndMeetingRequest === null || modBigbluebuttonbnEndMeetingRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnEndMeetingRequest was null or undefined when calling modBigbluebuttonbnEndMeeting.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(modBigbluebuttonbnEndMeetingRequest, "ModBigbluebuttonbnEndMeetingRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoreCohortAddCohortMembers200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoreCohortAddCohortMembers200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     * @summary Returns a list of bigbluebuttonbns in a provided list of courses, if no list is provided                             all bigbluebuttonbns that the user can view will be returned.
     * @param modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest 
     */
    public async modBigbluebuttonbnGetBigbluebuttonbnsByCourses (modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest: ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response;  }> {
        const localVarPath = this.basePath + '/mod_bigbluebuttonbn_get_bigbluebuttonbns_by_courses';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest' is not null or undefined
        if (modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest === null || modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest was null or undefined when calling modBigbluebuttonbnGetBigbluebuttonbnsByCourses.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(modBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest, "ModBigbluebuttonbnGetBigbluebuttonbnsByCoursesRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ModBigbluebuttonbnGetBigbluebuttonbnsByCourses200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get the join URL for the meeting and create if it does not exist.
     * @summary Get the join URL for the meeting and create if it does not exist.
     * @param modBigbluebuttonbnCanJoinRequest 
     */
    public async modBigbluebuttonbnGetJoinUrl (modBigbluebuttonbnCanJoinRequest: ModBigbluebuttonbnCanJoinRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ModBigbluebuttonbnGetJoinUrl200Response;  }> {
        const localVarPath = this.basePath + '/mod_bigbluebuttonbn_get_join_url';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'modBigbluebuttonbnCanJoinRequest' is not null or undefined
        if (modBigbluebuttonbnCanJoinRequest === null || modBigbluebuttonbnCanJoinRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnCanJoinRequest was null or undefined when calling modBigbluebuttonbnGetJoinUrl.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(modBigbluebuttonbnCanJoinRequest, "ModBigbluebuttonbnCanJoinRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ModBigbluebuttonbnGetJoinUrl200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ModBigbluebuttonbnGetJoinUrl200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a list of recordings ready to be processed by a datatable.
     * @summary Returns a list of recordings ready to be processed by a datatable.
     * @param modBigbluebuttonbnGetRecordingsRequest 
     */
    public async modBigbluebuttonbnGetRecordings (modBigbluebuttonbnGetRecordingsRequest: ModBigbluebuttonbnGetRecordingsRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ModBigbluebuttonbnGetRecordings200Response;  }> {
        const localVarPath = this.basePath + '/mod_bigbluebuttonbn_get_recordings';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'modBigbluebuttonbnGetRecordingsRequest' is not null or undefined
        if (modBigbluebuttonbnGetRecordingsRequest === null || modBigbluebuttonbnGetRecordingsRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnGetRecordingsRequest was null or undefined when calling modBigbluebuttonbnGetRecordings.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(modBigbluebuttonbnGetRecordingsRequest, "ModBigbluebuttonbnGetRecordingsRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ModBigbluebuttonbnGetRecordings200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ModBigbluebuttonbnGetRecordings200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns a list of recordings ready to import to be processed by a datatable.
     * @summary Returns a list of recordings ready to import to be processed by a datatable.
     * @param modBigbluebuttonbnGetRecordingsToImportRequest 
     */
    public async modBigbluebuttonbnGetRecordingsToImport (modBigbluebuttonbnGetRecordingsToImportRequest: ModBigbluebuttonbnGetRecordingsToImportRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ModBigbluebuttonbnGetRecordingsToImport200Response;  }> {
        const localVarPath = this.basePath + '/mod_bigbluebuttonbn_get_recordings_to_import';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'modBigbluebuttonbnGetRecordingsToImportRequest' is not null or undefined
        if (modBigbluebuttonbnGetRecordingsToImportRequest === null || modBigbluebuttonbnGetRecordingsToImportRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnGetRecordingsToImportRequest was null or undefined when calling modBigbluebuttonbnGetRecordingsToImport.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(modBigbluebuttonbnGetRecordingsToImportRequest, "ModBigbluebuttonbnGetRecordingsToImportRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ModBigbluebuttonbnGetRecordingsToImport200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ModBigbluebuttonbnGetRecordingsToImport200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get displayable information on the meeting
     * @summary Get displayable information on the meeting
     * @param modBigbluebuttonbnMeetingInfoRequest 
     */
    public async modBigbluebuttonbnMeetingInfo (modBigbluebuttonbnMeetingInfoRequest: ModBigbluebuttonbnMeetingInfoRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ModBigbluebuttonbnMeetingInfo200Response;  }> {
        const localVarPath = this.basePath + '/mod_bigbluebuttonbn_meeting_info';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'modBigbluebuttonbnMeetingInfoRequest' is not null or undefined
        if (modBigbluebuttonbnMeetingInfoRequest === null || modBigbluebuttonbnMeetingInfoRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnMeetingInfoRequest was null or undefined when calling modBigbluebuttonbnMeetingInfo.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(modBigbluebuttonbnMeetingInfoRequest, "ModBigbluebuttonbnMeetingInfoRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ModBigbluebuttonbnMeetingInfo200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ModBigbluebuttonbnMeetingInfo200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Update a single recording
     * @summary Update a single recording
     * @param modBigbluebuttonbnUpdateRecordingRequest 
     */
    public async modBigbluebuttonbnUpdateRecording (modBigbluebuttonbnUpdateRecordingRequest: ModBigbluebuttonbnUpdateRecordingRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/mod_bigbluebuttonbn_update_recording';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'modBigbluebuttonbnUpdateRecordingRequest' is not null or undefined
        if (modBigbluebuttonbnUpdateRecordingRequest === null || modBigbluebuttonbnUpdateRecordingRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnUpdateRecordingRequest was null or undefined when calling modBigbluebuttonbnUpdateRecording.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(modBigbluebuttonbnUpdateRecordingRequest, "ModBigbluebuttonbnUpdateRecordingRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "object");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Trigger the course module viewed event and update the module completion status.
     * @summary Trigger the course module viewed event and update the module completion status.
     * @param modBigbluebuttonbnViewBigbluebuttonbnRequest 
     */
    public async modBigbluebuttonbnViewBigbluebuttonbn (modBigbluebuttonbnViewBigbluebuttonbnRequest: ModBigbluebuttonbnViewBigbluebuttonbnRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoreCalendarDeleteSubscription200Response;  }> {
        const localVarPath = this.basePath + '/mod_bigbluebuttonbn_view_bigbluebuttonbn';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'modBigbluebuttonbnViewBigbluebuttonbnRequest' is not null or undefined
        if (modBigbluebuttonbnViewBigbluebuttonbnRequest === null || modBigbluebuttonbnViewBigbluebuttonbnRequest === undefined) {
            throw new Error('Required parameter modBigbluebuttonbnViewBigbluebuttonbnRequest was null or undefined when calling modBigbluebuttonbnViewBigbluebuttonbn.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(modBigbluebuttonbnViewBigbluebuttonbnRequest, "ModBigbluebuttonbnViewBigbluebuttonbnRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoreCalendarDeleteSubscription200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoreCalendarDeleteSubscription200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
