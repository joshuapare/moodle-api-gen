/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { CoreCompetencyCompetencyViewedRequest } from '../model/coreCompetencyCompetencyViewedRequest';
import { CoreCompetencyCompletePlanRequest } from '../model/coreCompetencyCompletePlanRequest';
import { ErrorResponse } from '../model/errorResponse';
import { ToolLpDataForCompetenciesManagePage200Response } from '../model/toolLpDataForCompetenciesManagePage200Response';
import { ToolLpDataForCompetenciesManagePageRequest } from '../model/toolLpDataForCompetenciesManagePageRequest';
import { ToolLpDataForCompetencyFrameworksManagePage200Response } from '../model/toolLpDataForCompetencyFrameworksManagePage200Response';
import { ToolLpDataForCompetencyFrameworksManagePageRequest } from '../model/toolLpDataForCompetencyFrameworksManagePageRequest';
import { ToolLpDataForCompetencySummary200Response } from '../model/toolLpDataForCompetencySummary200Response';
import { ToolLpDataForCompetencySummaryRequest } from '../model/toolLpDataForCompetencySummaryRequest';
import { ToolLpDataForCourseCompetenciesPage200Response } from '../model/toolLpDataForCourseCompetenciesPage200Response';
import { ToolLpDataForCourseCompetenciesPageRequest } from '../model/toolLpDataForCourseCompetenciesPageRequest';
import { ToolLpDataForPlanPage200Response } from '../model/toolLpDataForPlanPage200Response';
import { ToolLpDataForPlansPage200Response } from '../model/toolLpDataForPlansPage200Response';
import { ToolLpDataForPlansPageRequest } from '../model/toolLpDataForPlansPageRequest';
import { ToolLpDataForRelatedCompetenciesSection200Response } from '../model/toolLpDataForRelatedCompetenciesSection200Response';
import { ToolLpDataForRelatedCompetenciesSectionRequest } from '../model/toolLpDataForRelatedCompetenciesSectionRequest';
import { ToolLpDataForTemplateCompetenciesPage200Response } from '../model/toolLpDataForTemplateCompetenciesPage200Response';
import { ToolLpDataForTemplateCompetenciesPageRequest } from '../model/toolLpDataForTemplateCompetenciesPageRequest';
import { ToolLpDataForTemplatesManagePage200Response } from '../model/toolLpDataForTemplatesManagePage200Response';
import { ToolLpDataForUserCompetencySummary200Response } from '../model/toolLpDataForUserCompetencySummary200Response';
import { ToolLpDataForUserCompetencySummaryInCourse200Response } from '../model/toolLpDataForUserCompetencySummaryInCourse200Response';
import { ToolLpDataForUserCompetencySummaryInCourseRequest } from '../model/toolLpDataForUserCompetencySummaryInCourseRequest';
import { ToolLpDataForUserCompetencySummaryInPlan200Response } from '../model/toolLpDataForUserCompetencySummaryInPlan200Response';
import { ToolLpDataForUserCompetencySummaryInPlanRequest } from '../model/toolLpDataForUserCompetencySummaryInPlanRequest';
import { ToolLpDataForUserCompetencySummaryRequest } from '../model/toolLpDataForUserCompetencySummaryRequest';
import { ToolLpDataForUserEvidenceListPage200Response } from '../model/toolLpDataForUserEvidenceListPage200Response';
import { ToolLpDataForUserEvidenceListPageRequest } from '../model/toolLpDataForUserEvidenceListPageRequest';
import { ToolLpDataForUserEvidencePage200Response } from '../model/toolLpDataForUserEvidencePage200Response';
import { ToolLpDataForUserEvidencePageRequest } from '../model/toolLpDataForUserEvidencePageRequest';
import { ToolLpSearchCohorts200Response } from '../model/toolLpSearchCohorts200Response';
import { ToolLpSearchCohortsRequest } from '../model/toolLpSearchCohortsRequest';
import { ToolLpSearchUsers200Response } from '../model/toolLpSearchUsers200Response';
import { ToolLpSearchUsersRequest } from '../model/toolLpSearchUsersRequest';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://localhost/webservice/rest/server.php';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ToolLpApiApiKeys {
    apiKey,
}

export class ToolLpApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'Authorization'),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: ToolLpApiApiKeys, value: string) {
        (this.authentications as any)[ToolLpApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Load the data for the competencies manage page template
     * @summary Load the data for the competencies manage page template
     * @param toolLpDataForCompetenciesManagePageRequest 
     */
    public async toolLpDataForCompetenciesManagePage (toolLpDataForCompetenciesManagePageRequest: ToolLpDataForCompetenciesManagePageRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolLpDataForCompetenciesManagePage200Response;  }> {
        const localVarPath = this.basePath + '/tool_lp_data_for_competencies_manage_page';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolLpDataForCompetenciesManagePageRequest' is not null or undefined
        if (toolLpDataForCompetenciesManagePageRequest === null || toolLpDataForCompetenciesManagePageRequest === undefined) {
            throw new Error('Required parameter toolLpDataForCompetenciesManagePageRequest was null or undefined when calling toolLpDataForCompetenciesManagePage.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolLpDataForCompetenciesManagePageRequest, "ToolLpDataForCompetenciesManagePageRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolLpDataForCompetenciesManagePage200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolLpDataForCompetenciesManagePage200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Load the data for the competency frameworks manage page template
     * @summary Load the data for the competency frameworks manage page template
     * @param toolLpDataForCompetencyFrameworksManagePageRequest 
     */
    public async toolLpDataForCompetencyFrameworksManagePage (toolLpDataForCompetencyFrameworksManagePageRequest: ToolLpDataForCompetencyFrameworksManagePageRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolLpDataForCompetencyFrameworksManagePage200Response;  }> {
        const localVarPath = this.basePath + '/tool_lp_data_for_competency_frameworks_manage_page';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolLpDataForCompetencyFrameworksManagePageRequest' is not null or undefined
        if (toolLpDataForCompetencyFrameworksManagePageRequest === null || toolLpDataForCompetencyFrameworksManagePageRequest === undefined) {
            throw new Error('Required parameter toolLpDataForCompetencyFrameworksManagePageRequest was null or undefined when calling toolLpDataForCompetencyFrameworksManagePage.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolLpDataForCompetencyFrameworksManagePageRequest, "ToolLpDataForCompetencyFrameworksManagePageRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolLpDataForCompetencyFrameworksManagePage200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolLpDataForCompetencyFrameworksManagePage200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Load competency data for summary template.
     * @summary Load competency data for summary template.
     * @param toolLpDataForCompetencySummaryRequest 
     */
    public async toolLpDataForCompetencySummary (toolLpDataForCompetencySummaryRequest: ToolLpDataForCompetencySummaryRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolLpDataForCompetencySummary200Response;  }> {
        const localVarPath = this.basePath + '/tool_lp_data_for_competency_summary';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolLpDataForCompetencySummaryRequest' is not null or undefined
        if (toolLpDataForCompetencySummaryRequest === null || toolLpDataForCompetencySummaryRequest === undefined) {
            throw new Error('Required parameter toolLpDataForCompetencySummaryRequest was null or undefined when calling toolLpDataForCompetencySummary.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolLpDataForCompetencySummaryRequest, "ToolLpDataForCompetencySummaryRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolLpDataForCompetencySummary200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolLpDataForCompetencySummary200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Load the data for the course competencies page template.
     * @summary Load the data for the course competencies page template.
     * @param toolLpDataForCourseCompetenciesPageRequest 
     */
    public async toolLpDataForCourseCompetenciesPage (toolLpDataForCourseCompetenciesPageRequest: ToolLpDataForCourseCompetenciesPageRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolLpDataForCourseCompetenciesPage200Response;  }> {
        const localVarPath = this.basePath + '/tool_lp_data_for_course_competencies_page';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolLpDataForCourseCompetenciesPageRequest' is not null or undefined
        if (toolLpDataForCourseCompetenciesPageRequest === null || toolLpDataForCourseCompetenciesPageRequest === undefined) {
            throw new Error('Required parameter toolLpDataForCourseCompetenciesPageRequest was null or undefined when calling toolLpDataForCourseCompetenciesPage.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolLpDataForCourseCompetenciesPageRequest, "ToolLpDataForCourseCompetenciesPageRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolLpDataForCourseCompetenciesPage200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolLpDataForCourseCompetenciesPage200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Load the data for the plan page template.
     * @summary Load the data for the plan page template.
     * @param coreCompetencyCompletePlanRequest 
     */
    public async toolLpDataForPlanPage (coreCompetencyCompletePlanRequest: CoreCompetencyCompletePlanRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolLpDataForPlanPage200Response;  }> {
        const localVarPath = this.basePath + '/tool_lp_data_for_plan_page';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'coreCompetencyCompletePlanRequest' is not null or undefined
        if (coreCompetencyCompletePlanRequest === null || coreCompetencyCompletePlanRequest === undefined) {
            throw new Error('Required parameter coreCompetencyCompletePlanRequest was null or undefined when calling toolLpDataForPlanPage.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(coreCompetencyCompletePlanRequest, "CoreCompetencyCompletePlanRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolLpDataForPlanPage200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolLpDataForPlanPage200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Load the data for the plans page template
     * @summary Load the data for the plans page template
     * @param toolLpDataForPlansPageRequest 
     */
    public async toolLpDataForPlansPage (toolLpDataForPlansPageRequest: ToolLpDataForPlansPageRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolLpDataForPlansPage200Response;  }> {
        const localVarPath = this.basePath + '/tool_lp_data_for_plans_page';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolLpDataForPlansPageRequest' is not null or undefined
        if (toolLpDataForPlansPageRequest === null || toolLpDataForPlansPageRequest === undefined) {
            throw new Error('Required parameter toolLpDataForPlansPageRequest was null or undefined when calling toolLpDataForPlansPage.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolLpDataForPlansPageRequest, "ToolLpDataForPlansPageRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolLpDataForPlansPage200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolLpDataForPlansPage200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Load the data for the related competencies template.
     * @summary Load the data for the related competencies template.
     * @param toolLpDataForRelatedCompetenciesSectionRequest 
     */
    public async toolLpDataForRelatedCompetenciesSection (toolLpDataForRelatedCompetenciesSectionRequest: ToolLpDataForRelatedCompetenciesSectionRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolLpDataForRelatedCompetenciesSection200Response;  }> {
        const localVarPath = this.basePath + '/tool_lp_data_for_related_competencies_section';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolLpDataForRelatedCompetenciesSectionRequest' is not null or undefined
        if (toolLpDataForRelatedCompetenciesSectionRequest === null || toolLpDataForRelatedCompetenciesSectionRequest === undefined) {
            throw new Error('Required parameter toolLpDataForRelatedCompetenciesSectionRequest was null or undefined when calling toolLpDataForRelatedCompetenciesSection.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolLpDataForRelatedCompetenciesSectionRequest, "ToolLpDataForRelatedCompetenciesSectionRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolLpDataForRelatedCompetenciesSection200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolLpDataForRelatedCompetenciesSection200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Load the data for the template competencies page template.
     * @summary Load the data for the template competencies page template.
     * @param toolLpDataForTemplateCompetenciesPageRequest 
     */
    public async toolLpDataForTemplateCompetenciesPage (toolLpDataForTemplateCompetenciesPageRequest: ToolLpDataForTemplateCompetenciesPageRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolLpDataForTemplateCompetenciesPage200Response;  }> {
        const localVarPath = this.basePath + '/tool_lp_data_for_template_competencies_page';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolLpDataForTemplateCompetenciesPageRequest' is not null or undefined
        if (toolLpDataForTemplateCompetenciesPageRequest === null || toolLpDataForTemplateCompetenciesPageRequest === undefined) {
            throw new Error('Required parameter toolLpDataForTemplateCompetenciesPageRequest was null or undefined when calling toolLpDataForTemplateCompetenciesPage.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolLpDataForTemplateCompetenciesPageRequest, "ToolLpDataForTemplateCompetenciesPageRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolLpDataForTemplateCompetenciesPage200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolLpDataForTemplateCompetenciesPage200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Load the data for the learning plan templates manage page template
     * @summary Load the data for the learning plan templates manage page template
     * @param toolLpDataForCompetencyFrameworksManagePageRequest 
     */
    public async toolLpDataForTemplatesManagePage (toolLpDataForCompetencyFrameworksManagePageRequest: ToolLpDataForCompetencyFrameworksManagePageRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolLpDataForTemplatesManagePage200Response;  }> {
        const localVarPath = this.basePath + '/tool_lp_data_for_templates_manage_page';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolLpDataForCompetencyFrameworksManagePageRequest' is not null or undefined
        if (toolLpDataForCompetencyFrameworksManagePageRequest === null || toolLpDataForCompetencyFrameworksManagePageRequest === undefined) {
            throw new Error('Required parameter toolLpDataForCompetencyFrameworksManagePageRequest was null or undefined when calling toolLpDataForTemplatesManagePage.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolLpDataForCompetencyFrameworksManagePageRequest, "ToolLpDataForCompetencyFrameworksManagePageRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolLpDataForTemplatesManagePage200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolLpDataForTemplatesManagePage200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Load a summary of a user competency.
     * @summary Load a summary of a user competency.
     * @param toolLpDataForUserCompetencySummaryRequest 
     */
    public async toolLpDataForUserCompetencySummary (toolLpDataForUserCompetencySummaryRequest: ToolLpDataForUserCompetencySummaryRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolLpDataForUserCompetencySummary200Response;  }> {
        const localVarPath = this.basePath + '/tool_lp_data_for_user_competency_summary';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolLpDataForUserCompetencySummaryRequest' is not null or undefined
        if (toolLpDataForUserCompetencySummaryRequest === null || toolLpDataForUserCompetencySummaryRequest === undefined) {
            throw new Error('Required parameter toolLpDataForUserCompetencySummaryRequest was null or undefined when calling toolLpDataForUserCompetencySummary.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolLpDataForUserCompetencySummaryRequest, "ToolLpDataForUserCompetencySummaryRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolLpDataForUserCompetencySummary200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolLpDataForUserCompetencySummary200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Load a summary of a user competency.
     * @summary Load a summary of a user competency.
     * @param toolLpDataForUserCompetencySummaryInCourseRequest 
     */
    public async toolLpDataForUserCompetencySummaryInCourse (toolLpDataForUserCompetencySummaryInCourseRequest: ToolLpDataForUserCompetencySummaryInCourseRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolLpDataForUserCompetencySummaryInCourse200Response;  }> {
        const localVarPath = this.basePath + '/tool_lp_data_for_user_competency_summary_in_course';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolLpDataForUserCompetencySummaryInCourseRequest' is not null or undefined
        if (toolLpDataForUserCompetencySummaryInCourseRequest === null || toolLpDataForUserCompetencySummaryInCourseRequest === undefined) {
            throw new Error('Required parameter toolLpDataForUserCompetencySummaryInCourseRequest was null or undefined when calling toolLpDataForUserCompetencySummaryInCourse.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolLpDataForUserCompetencySummaryInCourseRequest, "ToolLpDataForUserCompetencySummaryInCourseRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolLpDataForUserCompetencySummaryInCourse200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolLpDataForUserCompetencySummaryInCourse200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Load a summary of a user competency.
     * @summary Load a summary of a user competency.
     * @param toolLpDataForUserCompetencySummaryInPlanRequest 
     */
    public async toolLpDataForUserCompetencySummaryInPlan (toolLpDataForUserCompetencySummaryInPlanRequest: ToolLpDataForUserCompetencySummaryInPlanRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolLpDataForUserCompetencySummaryInPlan200Response;  }> {
        const localVarPath = this.basePath + '/tool_lp_data_for_user_competency_summary_in_plan';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolLpDataForUserCompetencySummaryInPlanRequest' is not null or undefined
        if (toolLpDataForUserCompetencySummaryInPlanRequest === null || toolLpDataForUserCompetencySummaryInPlanRequest === undefined) {
            throw new Error('Required parameter toolLpDataForUserCompetencySummaryInPlanRequest was null or undefined when calling toolLpDataForUserCompetencySummaryInPlan.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolLpDataForUserCompetencySummaryInPlanRequest, "ToolLpDataForUserCompetencySummaryInPlanRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolLpDataForUserCompetencySummaryInPlan200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolLpDataForUserCompetencySummaryInPlan200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Load the data for the user evidence list page template
     * @summary Load the data for the user evidence list page template
     * @param toolLpDataForUserEvidenceListPageRequest 
     */
    public async toolLpDataForUserEvidenceListPage (toolLpDataForUserEvidenceListPageRequest: ToolLpDataForUserEvidenceListPageRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolLpDataForUserEvidenceListPage200Response;  }> {
        const localVarPath = this.basePath + '/tool_lp_data_for_user_evidence_list_page';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolLpDataForUserEvidenceListPageRequest' is not null or undefined
        if (toolLpDataForUserEvidenceListPageRequest === null || toolLpDataForUserEvidenceListPageRequest === undefined) {
            throw new Error('Required parameter toolLpDataForUserEvidenceListPageRequest was null or undefined when calling toolLpDataForUserEvidenceListPage.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolLpDataForUserEvidenceListPageRequest, "ToolLpDataForUserEvidenceListPageRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolLpDataForUserEvidenceListPage200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolLpDataForUserEvidenceListPage200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Load the data for the user evidence page template
     * @summary Load the data for the user evidence page template
     * @param toolLpDataForUserEvidencePageRequest 
     */
    public async toolLpDataForUserEvidencePage (toolLpDataForUserEvidencePageRequest: ToolLpDataForUserEvidencePageRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolLpDataForUserEvidencePage200Response;  }> {
        const localVarPath = this.basePath + '/tool_lp_data_for_user_evidence_page';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolLpDataForUserEvidencePageRequest' is not null or undefined
        if (toolLpDataForUserEvidencePageRequest === null || toolLpDataForUserEvidencePageRequest === undefined) {
            throw new Error('Required parameter toolLpDataForUserEvidencePageRequest was null or undefined when calling toolLpDataForUserEvidencePage.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolLpDataForUserEvidencePageRequest, "ToolLpDataForUserEvidencePageRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolLpDataForUserEvidencePage200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolLpDataForUserEvidencePage200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * List the courses using a competency
     * @summary List the courses using a competency
     * @param coreCompetencyCompetencyViewedRequest 
     */
    public async toolLpListCoursesUsingCompetency (coreCompetencyCompetencyViewedRequest: CoreCompetencyCompetencyViewedRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/tool_lp_list_courses_using_competency';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'coreCompetencyCompetencyViewedRequest' is not null or undefined
        if (coreCompetencyCompetencyViewedRequest === null || coreCompetencyCompetencyViewedRequest === undefined) {
            throw new Error('Required parameter coreCompetencyCompetencyViewedRequest was null or undefined when calling toolLpListCoursesUsingCompetency.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(coreCompetencyCompetencyViewedRequest, "CoreCompetencyCompetencyViewedRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "object");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Search for cohorts. This method is deprecated, please call \'core_cohort_search_cohorts\' instead
     * @summary Search for cohorts. This method is deprecated, please call \'core_cohort_search_cohorts\' instead
     * @param toolLpSearchCohortsRequest 
     */
    public async toolLpSearchCohorts (toolLpSearchCohortsRequest: ToolLpSearchCohortsRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolLpSearchCohorts200Response;  }> {
        const localVarPath = this.basePath + '/tool_lp_search_cohorts';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolLpSearchCohortsRequest' is not null or undefined
        if (toolLpSearchCohortsRequest === null || toolLpSearchCohortsRequest === undefined) {
            throw new Error('Required parameter toolLpSearchCohortsRequest was null or undefined when calling toolLpSearchCohorts.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolLpSearchCohortsRequest, "ToolLpSearchCohortsRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolLpSearchCohorts200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolLpSearchCohorts200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Search for users.
     * @summary Search for users.
     * @param toolLpSearchUsersRequest 
     */
    public async toolLpSearchUsers (toolLpSearchUsersRequest: ToolLpSearchUsersRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolLpSearchUsers200Response;  }> {
        const localVarPath = this.basePath + '/tool_lp_search_users';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolLpSearchUsersRequest' is not null or undefined
        if (toolLpSearchUsersRequest === null || toolLpSearchUsersRequest === undefined) {
            throw new Error('Required parameter toolLpSearchUsersRequest was null or undefined when calling toolLpSearchUsers.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolLpSearchUsersRequest, "ToolLpSearchUsersRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolLpSearchUsers200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolLpSearchUsers200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
