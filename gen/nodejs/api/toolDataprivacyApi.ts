/**
 * Moodle Webservice API
 * Auto-generated OpenAPI spec for Moodle\'s Webservice API. Requires installation of the Catalyst RESTful API plugin: https://github.com/catalyst/moodle-webservice_restful.
 *
 * The version of the OpenAPI document: 4.3.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { CoreContentbankRenameContent200Response } from '../model/coreContentbankRenameContent200Response';
import { ErrorResponse } from '../model/errorResponse';
import { ToolDataprivacyApproveDataRequestRequest } from '../model/toolDataprivacyApproveDataRequestRequest';
import { ToolDataprivacyBulkApproveDataRequestsRequest } from '../model/toolDataprivacyBulkApproveDataRequestsRequest';
import { ToolDataprivacyBulkDenyDataRequestsRequest } from '../model/toolDataprivacyBulkDenyDataRequestsRequest';
import { ToolDataprivacyCancelDataRequestRequest } from '../model/toolDataprivacyCancelDataRequestRequest';
import { ToolDataprivacyConfirmContextsForDeletion200Response } from '../model/toolDataprivacyConfirmContextsForDeletion200Response';
import { ToolDataprivacyConfirmContextsForDeletionRequest } from '../model/toolDataprivacyConfirmContextsForDeletionRequest';
import { ToolDataprivacyContactDpoRequest } from '../model/toolDataprivacyContactDpoRequest';
import { ToolDataprivacyCreateCategoryForm200Response } from '../model/toolDataprivacyCreateCategoryForm200Response';
import { ToolDataprivacyCreateCategoryFormRequest } from '../model/toolDataprivacyCreateCategoryFormRequest';
import { ToolDataprivacyCreatePurposeForm200Response } from '../model/toolDataprivacyCreatePurposeForm200Response';
import { ToolDataprivacyCreatePurposeFormRequest } from '../model/toolDataprivacyCreatePurposeFormRequest';
import { ToolDataprivacyDeleteCategoryRequest } from '../model/toolDataprivacyDeleteCategoryRequest';
import { ToolDataprivacyDeletePurposeRequest } from '../model/toolDataprivacyDeletePurposeRequest';
import { ToolDataprivacyGetActivityOptions200Response } from '../model/toolDataprivacyGetActivityOptions200Response';
import { ToolDataprivacyGetActivityOptionsRequest } from '../model/toolDataprivacyGetActivityOptionsRequest';
import { ToolDataprivacyGetCategoryOptions200Response } from '../model/toolDataprivacyGetCategoryOptions200Response';
import { ToolDataprivacyGetCategoryOptionsRequest } from '../model/toolDataprivacyGetCategoryOptionsRequest';
import { ToolDataprivacyGetDataRequest200Response } from '../model/toolDataprivacyGetDataRequest200Response';
import { ToolDataprivacyGetPurposeOptions200Response } from '../model/toolDataprivacyGetPurposeOptions200Response';
import { ToolDataprivacyGetUsersRequest } from '../model/toolDataprivacyGetUsersRequest';
import { ToolDataprivacySetContextDefaults200Response } from '../model/toolDataprivacySetContextDefaults200Response';
import { ToolDataprivacySetContextDefaultsRequest } from '../model/toolDataprivacySetContextDefaultsRequest';
import { ToolDataprivacySetContextForm200Response } from '../model/toolDataprivacySetContextForm200Response';
import { ToolDataprivacySetContextFormRequest } from '../model/toolDataprivacySetContextFormRequest';
import { ToolDataprivacySetContextlevelForm200Response } from '../model/toolDataprivacySetContextlevelForm200Response';
import { ToolDataprivacySetContextlevelFormRequest } from '../model/toolDataprivacySetContextlevelFormRequest';
import { ToolDataprivacySubmitSelectedCoursesFormRequest } from '../model/toolDataprivacySubmitSelectedCoursesFormRequest';
import { ToolDataprivacyTreeExtraBranches200Response } from '../model/toolDataprivacyTreeExtraBranches200Response';
import { ToolDataprivacyTreeExtraBranchesRequest } from '../model/toolDataprivacyTreeExtraBranchesRequest';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://localhost/webservice/rest/server.php';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ToolDataprivacyApiApiKeys {
    apiKey,
}

export class ToolDataprivacyApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'apiKey': new ApiKeyAuth('header', 'Authorization'),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: ToolDataprivacyApiApiKeys, value: string) {
        (this.authentications as any)[ToolDataprivacyApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Approve a data request
     * @summary Approve a data request
     * @param toolDataprivacyApproveDataRequestRequest 
     */
    public async toolDataprivacyApproveDataRequest (toolDataprivacyApproveDataRequestRequest: ToolDataprivacyApproveDataRequestRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_approve_data_request';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyApproveDataRequestRequest' is not null or undefined
        if (toolDataprivacyApproveDataRequestRequest === null || toolDataprivacyApproveDataRequestRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyApproveDataRequestRequest was null or undefined when calling toolDataprivacyApproveDataRequest.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyApproveDataRequestRequest, "ToolDataprivacyApproveDataRequestRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoreContentbankRenameContent200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Bulk approve data requests
     * @summary Bulk approve data requests
     * @param toolDataprivacyBulkApproveDataRequestsRequest 
     */
    public async toolDataprivacyBulkApproveDataRequests (toolDataprivacyBulkApproveDataRequestsRequest: ToolDataprivacyBulkApproveDataRequestsRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_bulk_approve_data_requests';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyBulkApproveDataRequestsRequest' is not null or undefined
        if (toolDataprivacyBulkApproveDataRequestsRequest === null || toolDataprivacyBulkApproveDataRequestsRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyBulkApproveDataRequestsRequest was null or undefined when calling toolDataprivacyBulkApproveDataRequests.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyBulkApproveDataRequestsRequest, "ToolDataprivacyBulkApproveDataRequestsRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoreContentbankRenameContent200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Bulk deny data requests
     * @summary Bulk deny data requests
     * @param toolDataprivacyBulkDenyDataRequestsRequest 
     */
    public async toolDataprivacyBulkDenyDataRequests (toolDataprivacyBulkDenyDataRequestsRequest: ToolDataprivacyBulkDenyDataRequestsRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_bulk_deny_data_requests';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyBulkDenyDataRequestsRequest' is not null or undefined
        if (toolDataprivacyBulkDenyDataRequestsRequest === null || toolDataprivacyBulkDenyDataRequestsRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyBulkDenyDataRequestsRequest was null or undefined when calling toolDataprivacyBulkDenyDataRequests.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyBulkDenyDataRequestsRequest, "ToolDataprivacyBulkDenyDataRequestsRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoreContentbankRenameContent200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Cancel the data request made by the user
     * @summary Cancel the data request made by the user
     * @param toolDataprivacyCancelDataRequestRequest 
     */
    public async toolDataprivacyCancelDataRequest (toolDataprivacyCancelDataRequestRequest: ToolDataprivacyCancelDataRequestRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_cancel_data_request';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyCancelDataRequestRequest' is not null or undefined
        if (toolDataprivacyCancelDataRequestRequest === null || toolDataprivacyCancelDataRequestRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyCancelDataRequestRequest was null or undefined when calling toolDataprivacyCancelDataRequest.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyCancelDataRequestRequest, "ToolDataprivacyCancelDataRequestRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoreContentbankRenameContent200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Mark the selected expired contexts as confirmed for deletion
     * @summary Mark the selected expired contexts as confirmed for deletion
     * @param toolDataprivacyConfirmContextsForDeletionRequest 
     */
    public async toolDataprivacyConfirmContextsForDeletion (toolDataprivacyConfirmContextsForDeletionRequest: ToolDataprivacyConfirmContextsForDeletionRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolDataprivacyConfirmContextsForDeletion200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_confirm_contexts_for_deletion';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyConfirmContextsForDeletionRequest' is not null or undefined
        if (toolDataprivacyConfirmContextsForDeletionRequest === null || toolDataprivacyConfirmContextsForDeletionRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyConfirmContextsForDeletionRequest was null or undefined when calling toolDataprivacyConfirmContextsForDeletion.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyConfirmContextsForDeletionRequest, "ToolDataprivacyConfirmContextsForDeletionRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolDataprivacyConfirmContextsForDeletion200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolDataprivacyConfirmContextsForDeletion200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Contact the site Data Protection Officer(s)
     * @summary Contact the site Data Protection Officer(s)
     * @param toolDataprivacyContactDpoRequest 
     */
    public async toolDataprivacyContactDpo (toolDataprivacyContactDpoRequest: ToolDataprivacyContactDpoRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_contact_dpo';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyContactDpoRequest' is not null or undefined
        if (toolDataprivacyContactDpoRequest === null || toolDataprivacyContactDpoRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyContactDpoRequest was null or undefined when calling toolDataprivacyContactDpo.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyContactDpoRequest, "ToolDataprivacyContactDpoRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoreContentbankRenameContent200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Adds a data category
     * @summary Adds a data category
     * @param toolDataprivacyCreateCategoryFormRequest 
     */
    public async toolDataprivacyCreateCategoryForm (toolDataprivacyCreateCategoryFormRequest: ToolDataprivacyCreateCategoryFormRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolDataprivacyCreateCategoryForm200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_create_category_form';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyCreateCategoryFormRequest' is not null or undefined
        if (toolDataprivacyCreateCategoryFormRequest === null || toolDataprivacyCreateCategoryFormRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyCreateCategoryFormRequest was null or undefined when calling toolDataprivacyCreateCategoryForm.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyCreateCategoryFormRequest, "ToolDataprivacyCreateCategoryFormRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolDataprivacyCreateCategoryForm200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolDataprivacyCreateCategoryForm200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Adds a data purpose
     * @summary Adds a data purpose
     * @param toolDataprivacyCreatePurposeFormRequest 
     */
    public async toolDataprivacyCreatePurposeForm (toolDataprivacyCreatePurposeFormRequest: ToolDataprivacyCreatePurposeFormRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolDataprivacyCreatePurposeForm200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_create_purpose_form';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyCreatePurposeFormRequest' is not null or undefined
        if (toolDataprivacyCreatePurposeFormRequest === null || toolDataprivacyCreatePurposeFormRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyCreatePurposeFormRequest was null or undefined when calling toolDataprivacyCreatePurposeForm.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyCreatePurposeFormRequest, "ToolDataprivacyCreatePurposeFormRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolDataprivacyCreatePurposeForm200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolDataprivacyCreatePurposeForm200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Deletes an existing data category
     * @summary Deletes an existing data category
     * @param toolDataprivacyDeleteCategoryRequest 
     */
    public async toolDataprivacyDeleteCategory (toolDataprivacyDeleteCategoryRequest: ToolDataprivacyDeleteCategoryRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_delete_category';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyDeleteCategoryRequest' is not null or undefined
        if (toolDataprivacyDeleteCategoryRequest === null || toolDataprivacyDeleteCategoryRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyDeleteCategoryRequest was null or undefined when calling toolDataprivacyDeleteCategory.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyDeleteCategoryRequest, "ToolDataprivacyDeleteCategoryRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoreContentbankRenameContent200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Deletes an existing data purpose
     * @summary Deletes an existing data purpose
     * @param toolDataprivacyDeletePurposeRequest 
     */
    public async toolDataprivacyDeletePurpose (toolDataprivacyDeletePurposeRequest: ToolDataprivacyDeletePurposeRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_delete_purpose';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyDeletePurposeRequest' is not null or undefined
        if (toolDataprivacyDeletePurposeRequest === null || toolDataprivacyDeletePurposeRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyDeletePurposeRequest was null or undefined when calling toolDataprivacyDeletePurpose.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyDeletePurposeRequest, "ToolDataprivacyDeletePurposeRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoreContentbankRenameContent200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Deny a data request
     * @summary Deny a data request
     * @param toolDataprivacyCancelDataRequestRequest 
     */
    public async toolDataprivacyDenyDataRequest (toolDataprivacyCancelDataRequestRequest: ToolDataprivacyCancelDataRequestRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_deny_data_request';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyCancelDataRequestRequest' is not null or undefined
        if (toolDataprivacyCancelDataRequestRequest === null || toolDataprivacyCancelDataRequestRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyCancelDataRequestRequest was null or undefined when calling toolDataprivacyDenyDataRequest.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyCancelDataRequestRequest, "ToolDataprivacyCancelDataRequestRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoreContentbankRenameContent200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Fetches a list of activity options
     * @summary Fetches a list of activity options
     * @param toolDataprivacyGetActivityOptionsRequest 
     */
    public async toolDataprivacyGetActivityOptions (toolDataprivacyGetActivityOptionsRequest: ToolDataprivacyGetActivityOptionsRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolDataprivacyGetActivityOptions200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_get_activity_options';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyGetActivityOptionsRequest' is not null or undefined
        if (toolDataprivacyGetActivityOptionsRequest === null || toolDataprivacyGetActivityOptionsRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyGetActivityOptionsRequest was null or undefined when calling toolDataprivacyGetActivityOptions.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyGetActivityOptionsRequest, "ToolDataprivacyGetActivityOptionsRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolDataprivacyGetActivityOptions200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolDataprivacyGetActivityOptions200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Fetches a list of data category options
     * @summary Fetches a list of data category options
     * @param toolDataprivacyGetCategoryOptionsRequest 
     */
    public async toolDataprivacyGetCategoryOptions (toolDataprivacyGetCategoryOptionsRequest: ToolDataprivacyGetCategoryOptionsRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolDataprivacyGetCategoryOptions200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_get_category_options';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyGetCategoryOptionsRequest' is not null or undefined
        if (toolDataprivacyGetCategoryOptionsRequest === null || toolDataprivacyGetCategoryOptionsRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyGetCategoryOptionsRequest was null or undefined when calling toolDataprivacyGetCategoryOptions.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyGetCategoryOptionsRequest, "ToolDataprivacyGetCategoryOptionsRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolDataprivacyGetCategoryOptions200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolDataprivacyGetCategoryOptions200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Fetch the details of a user\'s data request
     * @summary Fetch the details of a user\'s data request
     * @param toolDataprivacyCancelDataRequestRequest 
     */
    public async toolDataprivacyGetDataRequest (toolDataprivacyCancelDataRequestRequest: ToolDataprivacyCancelDataRequestRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolDataprivacyGetDataRequest200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_get_data_request';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyCancelDataRequestRequest' is not null or undefined
        if (toolDataprivacyCancelDataRequestRequest === null || toolDataprivacyCancelDataRequestRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyCancelDataRequestRequest was null or undefined when calling toolDataprivacyGetDataRequest.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyCancelDataRequestRequest, "ToolDataprivacyCancelDataRequestRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolDataprivacyGetDataRequest200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolDataprivacyGetDataRequest200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Fetches a list of data storage purpose options
     * @summary Fetches a list of data storage purpose options
     * @param toolDataprivacyGetCategoryOptionsRequest 
     */
    public async toolDataprivacyGetPurposeOptions (toolDataprivacyGetCategoryOptionsRequest: ToolDataprivacyGetCategoryOptionsRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolDataprivacyGetPurposeOptions200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_get_purpose_options';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyGetCategoryOptionsRequest' is not null or undefined
        if (toolDataprivacyGetCategoryOptionsRequest === null || toolDataprivacyGetCategoryOptionsRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyGetCategoryOptionsRequest was null or undefined when calling toolDataprivacyGetPurposeOptions.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyGetCategoryOptionsRequest, "ToolDataprivacyGetCategoryOptionsRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolDataprivacyGetPurposeOptions200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolDataprivacyGetPurposeOptions200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Fetches a list of users
     * @summary Fetches a list of users
     * @param toolDataprivacyGetUsersRequest 
     */
    public async toolDataprivacyGetUsers (toolDataprivacyGetUsersRequest: ToolDataprivacyGetUsersRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: object;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_get_users';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyGetUsersRequest' is not null or undefined
        if (toolDataprivacyGetUsersRequest === null || toolDataprivacyGetUsersRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyGetUsersRequest was null or undefined when calling toolDataprivacyGetUsers.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyGetUsersRequest, "ToolDataprivacyGetUsersRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: object;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "object");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Mark a user\'s general enquiry as complete
     * @summary Mark a user\'s general enquiry as complete
     * @param toolDataprivacyCancelDataRequestRequest 
     */
    public async toolDataprivacyMarkComplete (toolDataprivacyCancelDataRequestRequest: ToolDataprivacyCancelDataRequestRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_mark_complete';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyCancelDataRequestRequest' is not null or undefined
        if (toolDataprivacyCancelDataRequestRequest === null || toolDataprivacyCancelDataRequestRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyCancelDataRequestRequest was null or undefined when calling toolDataprivacyMarkComplete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyCancelDataRequestRequest, "ToolDataprivacyCancelDataRequestRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoreContentbankRenameContent200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Updates the default category and purpose for a given context level (and optionally, a plugin)
     * @summary Updates the default category and purpose for a given context level (and optionally, a plugin)
     * @param toolDataprivacySetContextDefaultsRequest 
     */
    public async toolDataprivacySetContextDefaults (toolDataprivacySetContextDefaultsRequest: ToolDataprivacySetContextDefaultsRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolDataprivacySetContextDefaults200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_set_context_defaults';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacySetContextDefaultsRequest' is not null or undefined
        if (toolDataprivacySetContextDefaultsRequest === null || toolDataprivacySetContextDefaultsRequest === undefined) {
            throw new Error('Required parameter toolDataprivacySetContextDefaultsRequest was null or undefined when calling toolDataprivacySetContextDefaults.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacySetContextDefaultsRequest, "ToolDataprivacySetContextDefaultsRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolDataprivacySetContextDefaults200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolDataprivacySetContextDefaults200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Sets purpose and category for a specific context
     * @summary Sets purpose and category for a specific context
     * @param toolDataprivacySetContextFormRequest 
     */
    public async toolDataprivacySetContextForm (toolDataprivacySetContextFormRequest: ToolDataprivacySetContextFormRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolDataprivacySetContextForm200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_set_context_form';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacySetContextFormRequest' is not null or undefined
        if (toolDataprivacySetContextFormRequest === null || toolDataprivacySetContextFormRequest === undefined) {
            throw new Error('Required parameter toolDataprivacySetContextFormRequest was null or undefined when calling toolDataprivacySetContextForm.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacySetContextFormRequest, "ToolDataprivacySetContextFormRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolDataprivacySetContextForm200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolDataprivacySetContextForm200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Sets purpose and category across a context level
     * @summary Sets purpose and category across a context level
     * @param toolDataprivacySetContextlevelFormRequest 
     */
    public async toolDataprivacySetContextlevelForm (toolDataprivacySetContextlevelFormRequest: ToolDataprivacySetContextlevelFormRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolDataprivacySetContextlevelForm200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_set_contextlevel_form';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacySetContextlevelFormRequest' is not null or undefined
        if (toolDataprivacySetContextlevelFormRequest === null || toolDataprivacySetContextlevelFormRequest === undefined) {
            throw new Error('Required parameter toolDataprivacySetContextlevelFormRequest was null or undefined when calling toolDataprivacySetContextlevelForm.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacySetContextlevelFormRequest, "ToolDataprivacySetContextlevelFormRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolDataprivacySetContextlevelForm200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolDataprivacySetContextlevelForm200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Save list of selected courses for export
     * @summary Save list of selected courses for export
     * @param toolDataprivacySubmitSelectedCoursesFormRequest 
     */
    public async toolDataprivacySubmitSelectedCoursesForm (toolDataprivacySubmitSelectedCoursesFormRequest: ToolDataprivacySubmitSelectedCoursesFormRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_submit_selected_courses_form';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacySubmitSelectedCoursesFormRequest' is not null or undefined
        if (toolDataprivacySubmitSelectedCoursesFormRequest === null || toolDataprivacySubmitSelectedCoursesFormRequest === undefined) {
            throw new Error('Required parameter toolDataprivacySubmitSelectedCoursesFormRequest was null or undefined when calling toolDataprivacySubmitSelectedCoursesForm.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacySubmitSelectedCoursesFormRequest, "ToolDataprivacySubmitSelectedCoursesFormRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CoreContentbankRenameContent200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "CoreContentbankRenameContent200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Return branches for the context tree
     * @summary Return branches for the context tree
     * @param toolDataprivacyTreeExtraBranchesRequest 
     */
    public async toolDataprivacyTreeExtraBranches (toolDataprivacyTreeExtraBranchesRequest: ToolDataprivacyTreeExtraBranchesRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ToolDataprivacyTreeExtraBranches200Response;  }> {
        const localVarPath = this.basePath + '/tool_dataprivacy_tree_extra_branches';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'toolDataprivacyTreeExtraBranchesRequest' is not null or undefined
        if (toolDataprivacyTreeExtraBranchesRequest === null || toolDataprivacyTreeExtraBranchesRequest === undefined) {
            throw new Error('Required parameter toolDataprivacyTreeExtraBranchesRequest was null or undefined when calling toolDataprivacyTreeExtraBranches.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(toolDataprivacyTreeExtraBranchesRequest, "ToolDataprivacyTreeExtraBranchesRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.apiKey.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.apiKey.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ToolDataprivacyTreeExtraBranches200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ToolDataprivacyTreeExtraBranches200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
