package internal

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
)

const (
	ExportPath   = "/admin/cli/export_webservices.php"
	ExportScript = `<?php

/**
 * CLI script to export web service JSON
 *
 * @package   moodle-api-gen
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @author    Joshua Pare
 *
 * This script is part of a custom package for autogenerated Moodle clients and
 * documentation.
 *
 * Repository: https://github.com/joshuapare/moodle-api-gen
 */

define('CLI_SCRIPT', true);

use core_external\external_api;

require(__DIR__.'/../../config.php');
require_once($CFG->libdir.'/clilib.php');
require_once($CFG->dirroot.'/webservice/lib.php');
require_once($CFG->libdir.'/adminlib.php');

list($options, $unrecognized) = cli_get_params(
    [
        'file' => false,
        'help' => false
    ],
    [
        'f' => 'file',
        'h' => 'help'
    ]
);

if ($unrecognized) {
    cli_error(get_string('cliunknowoption', 'admin', implode("\n  ", $unrecognized)));
}

if ($options['help']) {
    $help = "Export web service JSON.

Options:
-f, --file     Optional: Output to a specified file instead of stdout.
-h, --help     Print out this help.

Example:
\$sudo -u www-data /usr/bin/php admin/cli/export_webservices.php --file=output.json

";
    echo $help;
    exit(0);
}

// get all the function descriptions programatically
$functions = $DB->get_records('external_functions', [], 'name');
$functiondescs = [];
foreach ($functions as $function) {
    try {
        $functiondescs[$function->name] = external_api::external_function_info($function);
    } catch (Throwable $exception) {
        cli_error($exception->getMessage());
    }
}

$formatted = json_encode($functiondescs, JSON_PRETTY_PRINT);

if ($options['file']) {
    file_put_contents($options['file'], $formatted);
    cli_writeln("Output written to {$options['file']}");
} else {
    echo $formatted;
}

exit(0);
`
)

// RunBootstrap runs the bootstrap process for the Moodle installation.
func RunBootstrap(path string, skipCliScript bool, skipCatalystPlugin bool) error {
	install, err := GetMoodleInstallation(path)
	if err != nil {
		return err
	}

	PrettyPrintMoodleInstallation(install)

	// Install the webservices export CLI script
	if !skipCliScript {
		if err := InstallCliScript(path); err != nil {
			return err
		}
	}
	// Install the Catalyst RESTful API plugin
	if !skipCatalystPlugin {
		if err := InstallCatalystRestApiPlugin(path); err != nil {
			return err
		}
	}
	return nil
}

// InstallCliScript installs the webservices export CLI script into
// the moodle installation at the given path.
func InstallCliScript(path string) error {
	localPath := filepath.Join(path, ExportPath)

	// Check if the script already exists
	if _, err := os.Stat(localPath); err == nil {
		return nil
	}
	// Copy the script to the installation path
	err := os.WriteFile(localPath, []byte(ExportScript), 0644)
	if err != nil {
		return err
	}
	return nil
}

// UninstallCliScript removes the webservices export CLI script from
// the moodle installation at the given path.
func UninstallCliScript(path string) error {
	localPath := filepath.Join(path, ExportPath)

	// Check if the script exists
	if _, err := os.Stat(localPath); os.IsNotExist(err) {
		return nil
	}
	// Remove the script from the installation path
	err := os.Remove(localPath)
	if err != nil {
		return err
	}
	return nil
}

// InstallCatalystRestApiPlugin installs the Catalyst RESTful API plugin
// into the Moodle installation at the given path.
func InstallCatalystRestApiPlugin(path string) error {
	pluginDir := filepath.Join(path, "webservice", "restful")

	// Check if the plugin directory already exists
	if _, err := os.Stat(pluginDir); !os.IsNotExist(err) {
		return nil
	}

	// Clone the plugin from GitHub
	repoURL := "https://github.com/catalyst/moodle-webservice_restful"

	cloneCmd := exec.Command("git", "clone", repoURL, pluginDir)
	if output, err := cloneCmd.CombinedOutput(); err != nil {
		return fmt.Errorf("failed to install catalyst plugin: %v, output: %s", err, string(output))
	}

	fmt.Println("Catalyst plugin installed successfully.")
	return nil
}

// UninstallCatalystRestApiPlugin removes the Catalyst RESTful API plugin
// from the Moodle installation at the given path.
func UninstallCatalystRestApiPlugin(path string) error {
	pluginDir := filepath.Join(path, "webservice", "restful")
	// Check if the plugin directory exists
	if _, err := os.Stat(pluginDir); os.IsNotExist(err) {
		return nil
	}
	// Remove the plugin directory
	err := os.RemoveAll(pluginDir)
	if err != nil {
		return err
	}
	return nil
}
